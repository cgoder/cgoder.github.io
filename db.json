{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"d9c9db5465183d9bb87d3b395bfb06aa998d3d80","modified":1473151484978},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1473151485588},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1473151485604},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1473151485619},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1473151485619},{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1473151485588},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1473151485604},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1473151485619},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1473151485619},{"_id":"themes/next/_config.yml","hash":"87e038110d5529095e72ceba154fab71088ec94d","modified":1473323340178},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1473151485641},{"_id":"source/_posts/Android-Stuido-Golang.md","hash":"95a32a0be3cda2eeabf3f7c16485b63531ad42b8","modified":1473313894579},{"_id":"source/_posts/CoreOS.md","hash":"5625bfa27d4391b976a45911bfe3030faa8e9319","modified":1473151484986},{"_id":"source/_posts/Golang-Docker.md","hash":"ddc73cb4451f5d5e7ada0bfe93a3a009c827d9b9","modified":1473151484989},{"_id":"source/_posts/Golang-init.md","hash":"143bd4d35951f840df8291b1a2e80e890c1cce48","modified":1473323844961},{"_id":"source/_posts/Hello World.md","hash":"f1f66579b1ad34cfab8b4ff7acc871e49546b7c2","modified":1473151484989},{"_id":"source/_posts/IPSEC-IKEV2-vpn-fo-vps.md","hash":"87ffa8b8e8deb93d9750dd9b02debaa4f6492f79","modified":1473151484989},{"_id":"source/_posts/Markdown编辑器.md","hash":"b11e0ae98a4879037749716ff4757119816ad0f5","modified":1473151485005},{"_id":"source/_posts/crack-CAS-for-china-DTV.md","hash":"c7d21210a4086fd8337d0a2bc45879462bd437a5","modified":1473151485005},{"_id":"source/_posts/docker命令状态机.md","hash":"48ec4b09a836cee2a9d58fe29745967a6843361f","modified":1473151485005},{"_id":"source/_posts/etcd-CoreOS.md","hash":"882e0cd5198ae1e731f96b1bd76d8599b41bdc90","modified":1473151485005},{"_id":"source/_posts/gomobile.md","hash":"2eb5c8fbc3e7a16a96ab3cbea41fa05097fa4b42","modified":1473319298233},{"_id":"source/_posts/etcd-and-MQTT-cluster.md","hash":"d7a44a2ed3b492955b70086da5c9853147d79ce9","modified":1473151485021},{"_id":"source/_posts/http-2.md","hash":"370e4f19adcc328be5dcf950949bcc1303689c05","modified":1473151485021},{"_id":"source/_posts/mosquitto-bridge-桥接设置.md","hash":"cb348fb5f6f272c797846f5e67df2696087cfe2c","modified":1473151485021},{"_id":"source/_posts/mstar6586-supernova-note.md","hash":"b157013c61154e5114ff0e6c808715a31778694d","modified":1473151485040},{"_id":"source/_posts/perfect-proxifier-UWP.md","hash":"f659ed11a999dfbf62484fa3088367a5f7a5e424","modified":1473384161544},{"_id":"source/_posts/podcast.md","hash":"8aa0f3485fe1ff354ee0ff097fc55475b70ab5e0","modified":1473151485040},{"_id":"source/_posts/realtek-TV-RPC.md","hash":"b71a00a29e43b99d047977ce7b0ab41b074b986d","modified":1473151485040},{"_id":"source/_posts/shadowsock-proxifier.md","hash":"9af35d6432a74d0ebf2d930e601d73fd38fe93ac","modified":1473320622582},{"_id":"source/_posts/tv-scan-flow.md","hash":"998a45db705f30183e0ced34b06dd51ac59f0cd2","modified":1473151485040},{"_id":"source/_posts/zookeeper.md","hash":"6929968b3ced5421be99bbd87a6df768d9e60018","modified":1473151485056},{"_id":"source/_posts/学习Docker好榜样.md","hash":"b020ecccd59d1738adf4d55efe6b95f552636859","modified":1473151485056},{"_id":"source/_posts/学习Markdown.md","hash":"43f0c123761b36f01a9692e49fcdfc2bfa923f44","modified":1473151485056},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1473151485639},{"_id":"source/_posts/当了一天的翻译机器.md","hash":"9229ec8882a5ae82887048f67f79cfc0f9b64e27","modified":1473151485056},{"_id":"source/_posts/微博图床.md","hash":"a96f29e5499790dc3202e882baf8154ade21f747","modified":1473315113782},{"_id":"source/_posts/推荐款不错的hexo主题.md","hash":"449ca11334711017ca23040637282355f50367ff","modified":1473151485071},{"_id":"source/_posts/继续mqtt.md","hash":"d66e3198c519dd086a597d00e01518fed8c393d8","modified":1473151485071},{"_id":"source/_posts/最近要看的资料.md","hash":"836db5f949375c325bdefdde19b82d622e30d7a4","modified":1473151485071},{"_id":"source/_posts/都快忘了这个blog了.md","hash":"6f88fa9f9577488c37ff7925b30f1452281ba7bc","modified":1473151485087},{"_id":"source/_posts/重启github-blog.md","hash":"c9357b465ec06c25ae5482b28b29961aa96ee467","modified":1473151485087},{"_id":"source/about/index.md","hash":"7c83751748c3933c0684a4f2a8a5d92ff7a21256","modified":1473151485087},{"_id":"source/categories/index.md","hash":"086e4dc9e4f9966d2b6575f8f1298df1a3ad0a56","modified":1473151485087},{"_id":"source/tags/index.md","hash":"faea5f81a436b936cfeb9d108e180e1069e48eec","modified":1473151485103},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1473151486074},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1473151485604},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1473151485604},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1473151485641},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1473151485641},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1473151485641},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1473151485641},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1473151485657},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1473151485673},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1473151485673},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1473151485657},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1473151485673},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1473151485657},{"_id":"themes/next/languages/zh-Hans.yml","hash":"570a176b61fcd522eef1eae642cd32bd20769bba","modified":1473151485673},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1473151485688},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1473151485688},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1473151486058},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1473151486043},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1473151486074},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1473151486058},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1473151486058},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1473151486039},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1473151486058},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1473151488678},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151488060},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1473151488693},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1473151485704},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1473151485688},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1473151488709},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1473151485688},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1473151485720},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1473151485704},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1473151485704},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1473151485704},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1473151485742},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1473151485736},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1473151485742},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1473151485820},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1473151485720},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1473151485820},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1473151486089},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1473151486074},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1473151486089},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1473151485820},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1473151485742},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1473151486020},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1473151488060},{"_id":"themes/next/source/images/avatar.png","hash":"3a1f905931d85fe13a8fb28175ba88280f4097a7","modified":1473151488076},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1473151488060},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1473151488107},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1473151488092},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1473151488092},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473151488123},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1473151488076},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1473151488123},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1473151488107},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1473151488107},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1473151488107},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1473151488123},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1473151488123},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151485838},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151485838},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151486505},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151486505},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151486521},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151487945},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1473151488045},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1473151488123},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1473151485739},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1473151485757},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1473151485742},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1473151485804},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1473151485837},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1473151485820},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1473151485757},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1473151485842},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1473151485937},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1473151485842},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1473151485757},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1473151485804},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1473151485973},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1473151486505},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1473151485989},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1473151485958},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1473151485973},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1473151486521},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1473151486505},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1473151488045},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1473151488002},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1473151488245},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1473151488277},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1473151488261},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1473151488223},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1473151488191},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1473151488377},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1473151488308},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1473151487945},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1473151488292},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1473151488377},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1473151488424},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1473151488377},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1473151488424},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1473151488424},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1473151488443},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1473151488508},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1473151488377},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1473151488562},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1473151488562},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1473151488424},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1473151488546},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1473151488609},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1473151488546},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1473151488562},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1473151488577},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1473151488593},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1473151488678},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1473151488646},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1473151488546},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1473151488646},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1473151485842},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1473151485842},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1473151485842},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1473151485858},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1473151485858},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1473151486105},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1473151485920},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1473151486105},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1473151486105},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1473151486174},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1473151486105},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1473151486290},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1473151486474},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1473151486490},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1473151486490},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1473151486490},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1473151486474},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1473151486505},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1473151486590},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1473151486590},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1473151486590},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1473151486590},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1473151485942},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1473151486590},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1473151486521},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1473151486521},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1473151486539},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1473151486544},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1473151486544},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1473151485942},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1473151486706},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1473151486544},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1473151486742},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1473151486743},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1473151487922},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1473151486543},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1473151486721},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1473151486759},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1473151488308},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1473151488277},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1473151487922},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1473151488346},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1473151488361},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1473151488392},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1473151488446},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1473151488361},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1473151488424},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1473151488446},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1473151488446},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1473151488508},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1473151488593},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1473151488593},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1473151488477},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1473151488461},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1473151488508},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1473151486121},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1473151486121},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1473151486121},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1473151486121},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1473151486143},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1473151486143},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1473151486143},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1473151486143},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1473151486158},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1473151486158},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1473151486174},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1473151486174},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1473151486174},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1473151486190},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1473151486190},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1473151486190},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1473151486190},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1473151486205},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1473151486205},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1473151486205},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1473151486205},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1473151486243},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1473151486258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1473151486258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1473151486258},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1473151486274},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1473151486274},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1473151486274},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1473151486274},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1473151486158},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1473151486290},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1473151486290},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1473151486305},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1473151486258},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1473151486305},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1473151486343},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1473151486343},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1473151486343},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1473151486359},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1473151486374},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1473151486606},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1473151486559},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1473151486575},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1473151486343},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1473151486290},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1473151488308},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1473151488323},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1473151486139},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1473151488493},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1473151488624},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1473151488323},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1473151488323},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1473151488344},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1473151488493},{"_id":"public/search.xml","hash":"c454189391380d1c2aca42972932bdf54bddc20e","modified":1473384851271},{"_id":"public/about/index.html","hash":"2e5f0f23d1b7e3254e1f5edd66f8d162676056aa","modified":1473384851371},{"_id":"public/404.html","hash":"4adeb61c7adddc2446cedf194dd4b6724067c8e2","modified":1473384851372},{"_id":"public/categories/index.html","hash":"3a835090ef567dbcfe801d3825d3c2df7469e2ee","modified":1473384851372},{"_id":"public/tags/index.html","hash":"feb5ad73b449ac8307ec9e513760fff671fd468d","modified":1473384851372},{"_id":"public/2016/09/08/shadowsock-proxifier/index.html","hash":"ff19c5d40b71f137238f87b1896ac237db28f9a3","modified":1473384851372},{"_id":"public/2016/09/08/gomobile/index.html","hash":"228b29d9c56f07ac1aee34047706c3d5998a6553","modified":1473384851372},{"_id":"public/2016/09/08/微博图床/index.html","hash":"f1ae67c2846ed81b863d62c4591b48e6e841749c","modified":1473384851372},{"_id":"public/2016/09/08/Android-Stuido-Golang/index.html","hash":"f180a4da55389eca84e062794b6045989519d344","modified":1473384851373},{"_id":"public/2016/09/06/Golang-init/index.html","hash":"09ab6eacde5db297d459d6f29d770f95f9bfc681","modified":1473384851373},{"_id":"public/2016/08/11/IPSEC-IKEV2-vpn-fo-vps/index.html","hash":"4b7261458c73fdee26bceaf9e351d8f31304d704","modified":1473384851373},{"_id":"public/2016/08/11/crack-CAS-for-china-DTV/index.html","hash":"2d429a9c6456837ec26cbf1ac2939d5913b2d109","modified":1473384851373},{"_id":"public/2016/08/03/http-2/index.html","hash":"25c6feff8cafd4a53848dfd5334a7fe36cfc11ea","modified":1473384851373},{"_id":"public/2016/07/28/docker命令状态机/index.html","hash":"594cb84303b9f529ac70e9e7984de1e5985ee2ea","modified":1473384851373},{"_id":"public/2016/07/27/etcd-CoreOS/index.html","hash":"fdc807c0948c87c36e424018228cbaaa418f65cc","modified":1473384851373},{"_id":"public/2016/07/26/zookeeper/index.html","hash":"2ee4cceffdb1057c8179c0a61f7a2932472184f1","modified":1473384851373},{"_id":"public/2016/07/26/CoreOS/index.html","hash":"72336755dd7f919668d7544c848e7341c39d1f43","modified":1473384851373},{"_id":"public/2016/07/26/podcast/index.html","hash":"58622fa5abf97d18faf00aac7d1c02525a2d5f86","modified":1473384851373},{"_id":"public/2016/07/25/etcd-and-MQTT-cluster/index.html","hash":"594196fbbbebb4be39390e6feb06d4ccbcdd2f5a","modified":1473384851374},{"_id":"public/2016/07/25/最近要看的资料/index.html","hash":"a89ebc835a44d7ff786726b6eaf9eb1706c58bee","modified":1473384851374},{"_id":"public/2016/07/22/mstar6586-supernova-note/index.html","hash":"5cec3ff8ab537ea292375a8be61ba9bf783789cb","modified":1473384851374},{"_id":"public/2016/07/22/tv-scan-flow/index.html","hash":"43e33bf13ceecffb92965feca51e524f852f6a58","modified":1473384851374},{"_id":"public/2016/07/20/Golang-Docker/index.html","hash":"7b44f65a5953bb1d2f45b234df413bca47261443","modified":1473384851374},{"_id":"public/2016/07/15/推荐款不错的hexo主题/index.html","hash":"66d3c82164e7cca7671e1a32b058b5b4764d3491","modified":1473384851374},{"_id":"public/2016/07/15/realtek-TV-RPC/index.html","hash":"3565ffc565758f0bf1df544e5e2b98d4ce9ba1dc","modified":1473384851374},{"_id":"public/2016/07/15/当了一天的翻译机器/index.html","hash":"495de16d1401e506d32b8e058baae893ba2d4869","modified":1473384851374},{"_id":"public/2016/07/14/重启github-blog/index.html","hash":"11b67432777e65fb5cbf039e033067ba87b3c711","modified":1473384851374},{"_id":"public/2016/07/14/都快忘了这个blog了/index.html","hash":"dceabccad3e4807a3f0cd5ea545a340600a8538c","modified":1473384851374},{"_id":"public/2015/06/24/学习Docker好榜样/index.html","hash":"bf77890ee35bf4e025188808736618515e152112","modified":1473384851374},{"_id":"public/2015/05/18/mosquitto-bridge-桥接设置/index.html","hash":"a4473a3d98a4751f01f2b5a44b48def23e80e07b","modified":1473384851374},{"_id":"public/2015/05/15/Markdown编辑器/index.html","hash":"93e5032127b6134744d3805725fa5ba7862ed9bd","modified":1473384851374},{"_id":"public/2015/05/15/继续mqtt/index.html","hash":"2133383c1a971d5c146e698be7ffbaa06507add3","modified":1473384851375},{"_id":"public/2015/05/13/学习Markdown/index.html","hash":"36aabdbc036bbf004f76b915c588df4b69c8380a","modified":1473384851375},{"_id":"public/2015/05/12/Hello World/index.html","hash":"6ab8a8c254f62fe87533b6a9f7ec7078f5857a22","modified":1473384851375},{"_id":"public/categories/study/index.html","hash":"695f2a19eaef3dd68bec26961379db7e49c6ac7e","modified":1473384851375},{"_id":"public/categories/study/page/2/index.html","hash":"ae0e02779d577f4454b8178f205588ab14cb14b9","modified":1473384851375},{"_id":"public/categories/study/page/3/index.html","hash":"85c9a7e33d3b1d06147fa0852ca38982bd79b92c","modified":1473384851375},{"_id":"public/categories/life/index.html","hash":"5412d619a02e08b4d35b5c40628a14955a47a9e0","modified":1473384851375},{"_id":"public/categories/life/page/2/index.html","hash":"5d9976d254f100bcc1bbfa82dd567a2b86b13215","modified":1473384851375},{"_id":"public/categories/work/index.html","hash":"9ace45fec0fb1bf254a4ff5d490097218f256eaf","modified":1473384851375},{"_id":"public/archives/index.html","hash":"c5955d5b2685aec894d11b642d7767653028cab9","modified":1473384851375},{"_id":"public/archives/page/2/index.html","hash":"754be0efcc9c3939d7e087edf780739132bfbec9","modified":1473384851375},{"_id":"public/archives/page/3/index.html","hash":"dcb1cf34c94d4962a6d53d18412eb0f9d31fc4b4","modified":1473384851375},{"_id":"public/archives/page/4/index.html","hash":"16a025dc5c39f4e7dbcef67a9405dd965ecd0bfd","modified":1473384851375},{"_id":"public/archives/page/5/index.html","hash":"9abd1a492cbe7a76d1e24fe4e32be84e50d32890","modified":1473384851375},{"_id":"public/archives/2015/index.html","hash":"f3ac01b6ad834b48182e36ab5a189afbdbd9a37f","modified":1473384851376},{"_id":"public/archives/2015/05/index.html","hash":"2ebccc33aa70931db96b907622c6a5b8a9ee9ae8","modified":1473384851376},{"_id":"public/archives/2015/06/index.html","hash":"107079f71c8fc9ff4995c4dbf913a8e271c8cb64","modified":1473384851376},{"_id":"public/archives/2016/index.html","hash":"c04e9dc9edf90bfac088e5162cf1acb80002b2ba","modified":1473384851376},{"_id":"public/archives/2016/page/2/index.html","hash":"0a052d5840cc06943fb830b51a65a8c489434811","modified":1473384851376},{"_id":"public/archives/2016/page/3/index.html","hash":"cc3e79fc751493c5f465a77d8afe56d527013756","modified":1473384851376},{"_id":"public/archives/2016/page/4/index.html","hash":"793a552180101ffa886563bac7f444e9c1e4d15d","modified":1473384851376},{"_id":"public/archives/2016/07/index.html","hash":"893edf1e72da9f2128805d9230fa41165aaba096","modified":1473384851376},{"_id":"public/archives/2016/07/page/2/index.html","hash":"65ff07e229f20a091f1a1198d49039cfd1dc1944","modified":1473384851376},{"_id":"public/archives/2016/07/page/3/index.html","hash":"71ec01149c26b8a1036f3d99178801be91df2513","modified":1473384851376},{"_id":"public/archives/2016/08/index.html","hash":"1952b86bdc5ad2475b7e40b781ad62ad7d67edfa","modified":1473384851376},{"_id":"public/archives/2016/09/index.html","hash":"035e473b48cc016fa2753bbcb2f61eaf42cde7a0","modified":1473384851376},{"_id":"public/index.html","hash":"c482e32a47efea191d19d906f3e5d4407f8c5f36","modified":1473384851376},{"_id":"public/page/2/index.html","hash":"b22a30f33fe06f77b06977c46d40a091ba817080","modified":1473384851376},{"_id":"public/page/3/index.html","hash":"988eb488ec57e655e3e94fd5898e0f34b2cd125e","modified":1473384851377},{"_id":"public/page/4/index.html","hash":"c53ac2004adc63284a9277fc13a2e226c2513a47","modified":1473384851377},{"_id":"public/page/5/index.html","hash":"3519125ec8ba0398b6786f60e03ab63e74f65f8a","modified":1473384851377},{"_id":"public/tags/Android/index.html","hash":"fc004cad7a32c4f549eced958b64ff0f75546f98","modified":1473384851377},{"_id":"public/tags/Golang/index.html","hash":"ffae271958722f06785832bfd6c76b560aee1b43","modified":1473384851377},{"_id":"public/tags/CoreOS/index.html","hash":"c0bae878cf3218a655dcc1543709bbb0d31da5c0","modified":1473384851378},{"_id":"public/tags/golang/index.html","hash":"2774b4663486a32f7205ad863737535248256cba","modified":1473384851380},{"_id":"public/tags/Docker/index.html","hash":"dfe28c7545d77b99ebb9a1825fef5e9f2746520e","modified":1473384851380},{"_id":"public/tags/虾扯/index.html","hash":"c0c63f8fdea1d298cb216c54311232793e2fc2ec","modified":1473384851380},{"_id":"public/tags/DTV/index.html","hash":"8dd1ca9f9910133c9acb98a80d036132e42a0c4d","modified":1473384851380},{"_id":"public/tags/CAS/index.html","hash":"73fbf5378702d7246f8dc9909d266174af8e71e9","modified":1473384851380},{"_id":"public/tags/vpn/index.html","hash":"80c8fbd0d10baff6d6a87d4667c48db895e371eb","modified":1473384851380},{"_id":"public/tags/vps/index.html","hash":"21b13f42326ced088f714486905abdbd049509c1","modified":1473384851380},{"_id":"public/tags/Markdown/index.html","hash":"b81d3963fa1c4300ed2f83409493cdf2e0ae04f1","modified":1473384851380},{"_id":"public/tags/etcd/index.html","hash":"e5f581e61485a55d0984aa5f44e8bd653d0faa10","modified":1473384851380},{"_id":"public/tags/http2/index.html","hash":"b7d6c3860940d7db8d2f735fb7d394a9aa6a1809","modified":1473384851380},{"_id":"public/tags/mqtt/index.html","hash":"a43f86ecaeafd114164373cb0158de8e1e6792d3","modified":1473384851380},{"_id":"public/tags/cluster/index.html","hash":"84439abf5af4252f82842a6caab1e8523ee5da04","modified":1473384851381},{"_id":"public/tags/mosquitto/index.html","hash":"b335958793e2a3a41e24b392cf6321438fed4abd","modified":1473384851381},{"_id":"public/tags/mstar/index.html","hash":"d03d8291791934467cbfdf690aabf2601b09facd","modified":1473384851382},{"_id":"public/tags/supernova/index.html","hash":"605dbb939a1d8a5e2508cb6cb27af5414fc5d1f2","modified":1473384851382},{"_id":"public/tags/podcast/index.html","hash":"39508c9b52ead87fc71719ab986517e620317809","modified":1473384851382},{"_id":"public/tags/shadowsocks/index.html","hash":"7e3157aa7af71f311b762ffb14cf6d0cb4caeb9d","modified":1473384851382},{"_id":"public/tags/realtek/index.html","hash":"568c9d432a06d6795685a93acad93fb3b9f76e6d","modified":1473384851382},{"_id":"public/tags/linux/index.html","hash":"7f2d06d39816f0df0520c00295447904ca40a441","modified":1473384851382},{"_id":"public/tags/DVB/index.html","hash":"bc43996be840694f9c22ec7a7d18ac93c91a49d7","modified":1473384851382},{"_id":"public/tags/docker/index.html","hash":"53b733704775e986e36d67968e8568855382f0b8","modified":1473384851382},{"_id":"public/tags/zookeeper/index.html","hash":"f5db3db7d3c4e733a1cedc141457bbe508069c8d","modified":1473384851382},{"_id":"public/tags/hexo/index.html","hash":"fe9868aad70ec6fbdca5408b6829fe0f3978901b","modified":1473384851382},{"_id":"public/tags/Alpine/index.html","hash":"9a01041cabe606813e64b66e7d21e24b667d0dab","modified":1473384851382},{"_id":"public/2016/09/09/perfect-proxifier-UWP/index.html","hash":"275486c7b0427c0bd681029703e8274e261f3af5","modified":1473384851392}],"Category":[{"name":"study","_id":"cisv2z1460004fgn9m0s99kvd"},{"name":"life","_id":"cisv2z15r000ofgn964bxjg28"},{"name":"work","_id":"cisv2z17c000wfgn91m5tfzd6"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-09-06T08:44:44.978Z","updated":"2016-09-06T08:44:44.978Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cisv2z0yg0000fgn95dbpcw8f","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"title":"about","date":"2016-07-18T01:26:42.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-18 09:26:42\n---\n","updated":"2016-09-06T08:44:45.087Z","path":"about/index.html","comments":1,"layout":"page","_id":"cisv2z16z000sfgn9328o9i23","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-07-14T12:22:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-14 20:22:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-09-06T08:44:45.087Z","path":"categories/index.html","layout":"page","_id":"cisv2z176000ufgn9wzy8es0g","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-07-14T12:13:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-14 20:13:35\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-09-06T08:44:45.103Z","path":"tags/index.html","layout":"page","_id":"cisv2z17m000yfgn95j4vzt2l","content":"","excerpt":"","more":""}],"Post":[{"title":"Android Studio + Golang","date":"2016-09-08T02:01:44.000Z","_content":"\n简单说下如何在Android上用Golang编译软件。\nGolang基础版本得高于1.5；Android Studio最好是2.0以上；Java SDK版本最好是1.7以上。\n以下配置均以Windows为例。在Windows 10上实践。\n\n## 软件安装\n1. 安装Golang。version>1.5。\n2. 安装Android Studio。version>2.0。\n3. 安装Java SDK。version>1.7。\n\n以上是基础软件安装，到各自的官方网站上下载安装即可。下面要开始配置环境。\n\n<!-- more -->\n\n## Golang\nGolang依赖的最重要的环境变量是`GOPATH`和`GOROOT`。\n+ GOROOT：Golang的安装目录。Windows下一般默认为`C:\\go`。\n+ GOPATH：Golang除`$GOROOT`之外，包含其它项目源码及其二进制文件的目录。\n\n### $GOROOT\n#### 示例\n添加系统变量GOROOT\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7lzljutz5j20fo00qwel.jpg)\n\n### $GOPATH\n`$GOPATH`是`go get`/`go install`等命令的必须设置项。\n`$GOPATH`可以是一个目录，也可以是一个目录列表。\n\n`GOPATH`列表中每个目录均包含三个目录src、pkg、bin。\n+ `src` 存放源代码（比如*.go *.c *.h *.s等）\n+ `pkg` 存放编译的库文件（比如*.a）\n+ `bin` 存放可执行文件（为了方便，可以把此目录加入到 $PATH 变量中。如果`$GOPATH`有设置多个目录，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）\n\n`go install`会将可执行文件下载到bin目录。\n`go get`命令会将源码下载到src目录，可执行文件下载到bin目录；\n> *go系列工具如`get/build/install`等默认会以列表的第一个目录为安装目录。*\n\n#### 示例\n添加系统变量GOPATH\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f7lzjub1a8j20fo00xt8w.jpg)\n如上图所示，我的`$GOPATH`配置了2个目录:\n- `C:\\Gopath`：用于安装第三方库。如`go get code.google.com/p/go-tour/gotour`会将totour安装到此目录。\n- `F:\\go`：用于自己写的项目代码。如果在此目录下用`go install`或`go build`来编译安装自己的项目的话，会将项目生成的可执行文件安装到此目录。\n\n**注意：**\n*Windows系统中环境变量的形式为%GOPATH%。*\n*当go命令搜索包时，它总是第一个从$GOROOT开始。如果找到符合的包名，将不会再去$GOPATH搜索。*\n*go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面，然后执行go install。*\n**不要将GOPATH设置为与GOROOT同一目录。**\n\n### $PATH\n修改环境变量PATH：将%GOROOT%\\bin加到环境变量PATH里面，这样就可以直接在dos命令模式下任意目录运行%GOROOT%\\bin目录下的程序 如：go.exe godoc.exe。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f7m0nzekzjj20bk030q38.jpg)\n\n## Android Studio\n首先下载安装包安装主程序，安装好之后，到安装目录下的tools目录，点击android.bat脚本启动Android SDK Manager工具。由于被墙了，所以要不翻墙，要不找国内代理源，如腾讯。\n> 1.启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options…』，弹出『Android SDK Manager - Settings』窗口；\n> 2.在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server』和『HTTP Proxy Port』输入框内填入 android-mirror.bugly.qq.com 镜像服务器地址(不包含http://，如下图)和端口8080，并且选中『Force https://… sources to be fetched using』复选框。设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n> 依次选择『Packages』、『Reload』。\n然后你就可以更新最新的tools和buildtools工具了，还需要更新最新的SDK以及支持库文件。\n\n+ 配置Android环境变量`ANDROID_HOME`：\n编辑系统环境变量,新建ANDROID_HOME,在变量值一栏中填写你上面的安装路径，比如我的就是`C:\\Users\\tienchiu\\AppData\\Local\\Android\\sdk`;\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m4prssgnj20ij05adgp.jpg)\n+ 配置PATH环境变量：\n编辑Path变量，增加`%ANDROID_HOME%\\tools`和`%ANDROID_HOME%\\platform-tools`;\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m4pxqxfaj20bx01gwen.jpg)\n+ 验证\n验证一下你的环境是不是配置好了，启动命令行，输入命令adb version，看是否有信息输出,如果能看到正确的版本信息，那就说你的环境配置没有问题。\n\n\n\n## JAVA\njava环境有2个参数要配置：\n+ `JAVA_HOME ` java安装目录。\n+ `CLASSPATH` \n\n在系统环境变量里添加`JAVA_HOME`变量如下:\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m118os3rj20fv014aag.jpg)\n在系统环境变量里添加`CLASSPATH`变量如下:\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m11lt9f2j20ij05aab2.jpg)\n在系统环境变量`PATH`变量后添加java的可执行目录\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m11fhwb4j20b000vwee.jpg)\n\n测试一下，任意打开一个dos界面，`java`命令是否可用\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m16fimjkj20g30ajabf.jpg)\n测试一下，任意打开一个dos界面，`javac`命令是否可用\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m16m1asyj20g10ahjtg.jpg)\n\n**注意：**\n**安装完成后记得重启电脑！**\n\n\n## 参考文献 \n[GOPATH与工作空间](https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md)\n[Go语言介绍 - 3：GOPATH](http://qizhanming.com/blog/2012/06/03/go-intro-3-gopath/)\n[Golang学习之GOROOT、PATH、GOPATH及go get](http://my.oschina.net/yearnfar/blog/187266)\n[Android编译环境配置](http://frank-zhu.github.io/android/2015/10/28/android-build-config/)\n","source":"_posts/Android-Stuido-Golang.md","raw":"---\ntitle: Android Studio + Golang\ndate: 2016-09-08 10:01:44\ncategories:\n - study\ntags:\n - Android\n - Golang\n---\n\n简单说下如何在Android上用Golang编译软件。\nGolang基础版本得高于1.5；Android Studio最好是2.0以上；Java SDK版本最好是1.7以上。\n以下配置均以Windows为例。在Windows 10上实践。\n\n## 软件安装\n1. 安装Golang。version>1.5。\n2. 安装Android Studio。version>2.0。\n3. 安装Java SDK。version>1.7。\n\n以上是基础软件安装，到各自的官方网站上下载安装即可。下面要开始配置环境。\n\n<!-- more -->\n\n## Golang\nGolang依赖的最重要的环境变量是`GOPATH`和`GOROOT`。\n+ GOROOT：Golang的安装目录。Windows下一般默认为`C:\\go`。\n+ GOPATH：Golang除`$GOROOT`之外，包含其它项目源码及其二进制文件的目录。\n\n### $GOROOT\n#### 示例\n添加系统变量GOROOT\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7lzljutz5j20fo00qwel.jpg)\n\n### $GOPATH\n`$GOPATH`是`go get`/`go install`等命令的必须设置项。\n`$GOPATH`可以是一个目录，也可以是一个目录列表。\n\n`GOPATH`列表中每个目录均包含三个目录src、pkg、bin。\n+ `src` 存放源代码（比如*.go *.c *.h *.s等）\n+ `pkg` 存放编译的库文件（比如*.a）\n+ `bin` 存放可执行文件（为了方便，可以把此目录加入到 $PATH 变量中。如果`$GOPATH`有设置多个目录，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）\n\n`go install`会将可执行文件下载到bin目录。\n`go get`命令会将源码下载到src目录，可执行文件下载到bin目录；\n> *go系列工具如`get/build/install`等默认会以列表的第一个目录为安装目录。*\n\n#### 示例\n添加系统变量GOPATH\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f7lzjub1a8j20fo00xt8w.jpg)\n如上图所示，我的`$GOPATH`配置了2个目录:\n- `C:\\Gopath`：用于安装第三方库。如`go get code.google.com/p/go-tour/gotour`会将totour安装到此目录。\n- `F:\\go`：用于自己写的项目代码。如果在此目录下用`go install`或`go build`来编译安装自己的项目的话，会将项目生成的可执行文件安装到此目录。\n\n**注意：**\n*Windows系统中环境变量的形式为%GOPATH%。*\n*当go命令搜索包时，它总是第一个从$GOROOT开始。如果找到符合的包名，将不会再去$GOPATH搜索。*\n*go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面，然后执行go install。*\n**不要将GOPATH设置为与GOROOT同一目录。**\n\n### $PATH\n修改环境变量PATH：将%GOROOT%\\bin加到环境变量PATH里面，这样就可以直接在dos命令模式下任意目录运行%GOROOT%\\bin目录下的程序 如：go.exe godoc.exe。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f7m0nzekzjj20bk030q38.jpg)\n\n## Android Studio\n首先下载安装包安装主程序，安装好之后，到安装目录下的tools目录，点击android.bat脚本启动Android SDK Manager工具。由于被墙了，所以要不翻墙，要不找国内代理源，如腾讯。\n> 1.启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options…』，弹出『Android SDK Manager - Settings』窗口；\n> 2.在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server』和『HTTP Proxy Port』输入框内填入 android-mirror.bugly.qq.com 镜像服务器地址(不包含http://，如下图)和端口8080，并且选中『Force https://… sources to be fetched using』复选框。设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；\n> 依次选择『Packages』、『Reload』。\n然后你就可以更新最新的tools和buildtools工具了，还需要更新最新的SDK以及支持库文件。\n\n+ 配置Android环境变量`ANDROID_HOME`：\n编辑系统环境变量,新建ANDROID_HOME,在变量值一栏中填写你上面的安装路径，比如我的就是`C:\\Users\\tienchiu\\AppData\\Local\\Android\\sdk`;\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m4prssgnj20ij05adgp.jpg)\n+ 配置PATH环境变量：\n编辑Path变量，增加`%ANDROID_HOME%\\tools`和`%ANDROID_HOME%\\platform-tools`;\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m4pxqxfaj20bx01gwen.jpg)\n+ 验证\n验证一下你的环境是不是配置好了，启动命令行，输入命令adb version，看是否有信息输出,如果能看到正确的版本信息，那就说你的环境配置没有问题。\n\n\n\n## JAVA\njava环境有2个参数要配置：\n+ `JAVA_HOME ` java安装目录。\n+ `CLASSPATH` \n\n在系统环境变量里添加`JAVA_HOME`变量如下:\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m118os3rj20fv014aag.jpg)\n在系统环境变量里添加`CLASSPATH`变量如下:\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m11lt9f2j20ij05aab2.jpg)\n在系统环境变量`PATH`变量后添加java的可执行目录\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m11fhwb4j20b000vwee.jpg)\n\n测试一下，任意打开一个dos界面，`java`命令是否可用\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m16fimjkj20g30ajabf.jpg)\n测试一下，任意打开一个dos界面，`javac`命令是否可用\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m16m1asyj20g10ahjtg.jpg)\n\n**注意：**\n**安装完成后记得重启电脑！**\n\n\n## 参考文献 \n[GOPATH与工作空间](https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md)\n[Go语言介绍 - 3：GOPATH](http://qizhanming.com/blog/2012/06/03/go-intro-3-gopath/)\n[Golang学习之GOROOT、PATH、GOPATH及go get](http://my.oschina.net/yearnfar/blog/187266)\n[Android编译环境配置](http://frank-zhu.github.io/android/2015/10/28/android-build-config/)\n","slug":"Android-Stuido-Golang","published":1,"updated":"2016-09-08T05:51:34.579Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z13p0001fgn9ktwu9tog","content":"<p>简单说下如何在Android上用Golang编译软件。<br>Golang基础版本得高于1.5；Android Studio最好是2.0以上；Java SDK版本最好是1.7以上。<br>以下配置均以Windows为例。在Windows 10上实践。</p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><ol>\n<li>安装Golang。version&gt;1.5。</li>\n<li>安装Android Studio。version&gt;2.0。</li>\n<li>安装Java SDK。version&gt;1.7。</li>\n</ol>\n<p>以上是基础软件安装，到各自的官方网站上下载安装即可。下面要开始配置环境。</p>\n<a id=\"more\"></a>\n<h2 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h2><p>Golang依赖的最重要的环境变量是<code>GOPATH</code>和<code>GOROOT</code>。</p>\n<ul>\n<li>GOROOT：Golang的安装目录。Windows下一般默认为<code>C:\\go</code>。</li>\n<li>GOPATH：Golang除<code>$GOROOT</code>之外，包含其它项目源码及其二进制文件的目录。</li>\n</ul>\n<h3 id=\"GOROOT\"><a href=\"#GOROOT\" class=\"headerlink\" title=\"$GOROOT\"></a>$GOROOT</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>添加系统变量GOROOT<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7lzljutz5j20fo00qwel.jpg\" alt=\"\"></p>\n<h3 id=\"GOPATH\"><a href=\"#GOPATH\" class=\"headerlink\" title=\"$GOPATH\"></a>$GOPATH</h3><p><code>$GOPATH</code>是<code>go get</code>/<code>go install</code>等命令的必须设置项。<br><code>$GOPATH</code>可以是一个目录，也可以是一个目录列表。</p>\n<p><code>GOPATH</code>列表中每个目录均包含三个目录src、pkg、bin。</p>\n<ul>\n<li><code>src</code> 存放源代码（比如<em>.go </em>.c <em>.h </em>.s等）</li>\n<li><code>pkg</code> 存放编译的库文件（比如*.a）</li>\n<li><code>bin</code> 存放可执行文件（为了方便，可以把此目录加入到 $PATH 变量中。如果<code>$GOPATH</code>有设置多个目录，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）</li>\n</ul>\n<p><code>go install</code>会将可执行文件下载到bin目录。<br><code>go get</code>命令会将源码下载到src目录，可执行文件下载到bin目录；</p>\n<blockquote>\n<p><em>go系列工具如<code>get/build/install</code>等默认会以列表的第一个目录为安装目录。</em></p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>添加系统变量GOPATH<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f7lzjub1a8j20fo00xt8w.jpg\" alt=\"\"><br>如上图所示，我的<code>$GOPATH</code>配置了2个目录:</p>\n<ul>\n<li><code>C:\\Gopath</code>：用于安装第三方库。如<code>go get code.google.com/p/go-tour/gotour</code>会将totour安装到此目录。</li>\n<li><code>F:\\go</code>：用于自己写的项目代码。如果在此目录下用<code>go install</code>或<code>go build</code>来编译安装自己的项目的话，会将项目生成的可执行文件安装到此目录。</li>\n</ul>\n<p><strong>注意：</strong><br><em>Windows系统中环境变量的形式为%GOPATH%。</em><br><em>当go命令搜索包时，它总是第一个从$GOROOT开始。如果找到符合的包名，将不会再去$GOPATH搜索。</em><br><em>go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面，然后执行go install。</em><br><strong>不要将GOPATH设置为与GOROOT同一目录。</strong></p>\n<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"$PATH\"></a>$PATH</h3><p>修改环境变量PATH：将%GOROOT%\\bin加到环境变量PATH里面，这样就可以直接在dos命令模式下任意目录运行%GOROOT%\\bin目录下的程序 如：go.exe godoc.exe。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f7m0nzekzjj20bk030q38.jpg\" alt=\"\"></p>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><p>首先下载安装包安装主程序，安装好之后，到安装目录下的tools目录，点击android.bat脚本启动Android SDK Manager工具。由于被墙了，所以要不翻墙，要不找国内代理源，如腾讯。</p>\n<blockquote>\n<p>1.启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options…』，弹出『Android SDK Manager - Settings』窗口；<br>2.在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server』和『HTTP Proxy Port』输入框内填入 android-mirror.bugly.qq.com 镜像服务器地址(不包含<a href=\"http://，如下图)和端口8080，并且选中『Force\" target=\"_blank\" rel=\"external\">http://，如下图)和端口8080，并且选中『Force</a> https://… sources to be fetched using』复选框。设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；<br>依次选择『Packages』、『Reload』。<br>然后你就可以更新最新的tools和buildtools工具了，还需要更新最新的SDK以及支持库文件。</p>\n</blockquote>\n<ul>\n<li>配置Android环境变量<code>ANDROID_HOME</code>：<br>编辑系统环境变量,新建ANDROID_HOME,在变量值一栏中填写你上面的安装路径，比如我的就是<code>C:\\Users\\tienchiu\\AppData\\Local\\Android\\sdk</code>;<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m4prssgnj20ij05adgp.jpg\" alt=\"\"></li>\n<li>配置PATH环境变量：<br>编辑Path变量，增加<code>%ANDROID_HOME%\\tools</code>和<code>%ANDROID_HOME%\\platform-tools</code>;<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m4pxqxfaj20bx01gwen.jpg\" alt=\"\"></li>\n<li>验证<br>验证一下你的环境是不是配置好了，启动命令行，输入命令adb version，看是否有信息输出,如果能看到正确的版本信息，那就说你的环境配置没有问题。</li>\n</ul>\n<h2 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h2><p>java环境有2个参数要配置：</p>\n<ul>\n<li><code>JAVA_HOME</code> java安装目录。</li>\n<li><code>CLASSPATH</code> </li>\n</ul>\n<p>在系统环境变量里添加<code>JAVA_HOME</code>变量如下:<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m118os3rj20fv014aag.jpg\" alt=\"\"><br>在系统环境变量里添加<code>CLASSPATH</code>变量如下:<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m11lt9f2j20ij05aab2.jpg\" alt=\"\"><br>在系统环境变量<code>PATH</code>变量后添加java的可执行目录<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m11fhwb4j20b000vwee.jpg\" alt=\"\"></p>\n<p>测试一下，任意打开一个dos界面，<code>java</code>命令是否可用<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m16fimjkj20g30ajabf.jpg\" alt=\"\"><br>测试一下，任意打开一个dos界面，<code>javac</code>命令是否可用<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m16m1asyj20g10ahjtg.jpg\" alt=\"\"></p>\n<p><strong>注意：</strong><br><strong>安装完成后记得重启电脑！</strong></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md\" target=\"_blank\" rel=\"external\">GOPATH与工作空间</a><br><a href=\"http://qizhanming.com/blog/2012/06/03/go-intro-3-gopath/\" target=\"_blank\" rel=\"external\">Go语言介绍 - 3：GOPATH</a><br><a href=\"http://my.oschina.net/yearnfar/blog/187266\" target=\"_blank\" rel=\"external\">Golang学习之GOROOT、PATH、GOPATH及go get</a><br><a href=\"http://frank-zhu.github.io/android/2015/10/28/android-build-config/\" target=\"_blank\" rel=\"external\">Android编译环境配置</a></p>\n","excerpt":"<p>简单说下如何在Android上用Golang编译软件。<br>Golang基础版本得高于1.5；Android Studio最好是2.0以上；Java SDK版本最好是1.7以上。<br>以下配置均以Windows为例。在Windows 10上实践。</p>\n<h2 id=\"软件安装\"><a href=\"#软件安装\" class=\"headerlink\" title=\"软件安装\"></a>软件安装</h2><ol>\n<li>安装Golang。version&gt;1.5。</li>\n<li>安装Android Studio。version&gt;2.0。</li>\n<li>安装Java SDK。version&gt;1.7。</li>\n</ol>\n<p>以上是基础软件安装，到各自的官方网站上下载安装即可。下面要开始配置环境。</p>","more":"<h2 id=\"Golang\"><a href=\"#Golang\" class=\"headerlink\" title=\"Golang\"></a>Golang</h2><p>Golang依赖的最重要的环境变量是<code>GOPATH</code>和<code>GOROOT</code>。</p>\n<ul>\n<li>GOROOT：Golang的安装目录。Windows下一般默认为<code>C:\\go</code>。</li>\n<li>GOPATH：Golang除<code>$GOROOT</code>之外，包含其它项目源码及其二进制文件的目录。</li>\n</ul>\n<h3 id=\"GOROOT\"><a href=\"#GOROOT\" class=\"headerlink\" title=\"$GOROOT\"></a>$GOROOT</h3><h4 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>添加系统变量GOROOT<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7lzljutz5j20fo00qwel.jpg\" alt=\"\"></p>\n<h3 id=\"GOPATH\"><a href=\"#GOPATH\" class=\"headerlink\" title=\"$GOPATH\"></a>$GOPATH</h3><p><code>$GOPATH</code>是<code>go get</code>/<code>go install</code>等命令的必须设置项。<br><code>$GOPATH</code>可以是一个目录，也可以是一个目录列表。</p>\n<p><code>GOPATH</code>列表中每个目录均包含三个目录src、pkg、bin。</p>\n<ul>\n<li><code>src</code> 存放源代码（比如<em>.go </em>.c <em>.h </em>.s等）</li>\n<li><code>pkg</code> 存放编译的库文件（比如*.a）</li>\n<li><code>bin</code> 存放可执行文件（为了方便，可以把此目录加入到 $PATH 变量中。如果<code>$GOPATH</code>有设置多个目录，那么使用${GOPATH//://bin:}/bin添加所有的bin目录）</li>\n</ul>\n<p><code>go install</code>会将可执行文件下载到bin目录。<br><code>go get</code>命令会将源码下载到src目录，可执行文件下载到bin目录；</p>\n<blockquote>\n<p><em>go系列工具如<code>get/build/install</code>等默认会以列表的第一个目录为安装目录。</em></p>\n</blockquote>\n<h4 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h4><p>添加系统变量GOPATH<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f7lzjub1a8j20fo00xt8w.jpg\" alt=\"\"><br>如上图所示，我的<code>$GOPATH</code>配置了2个目录:</p>\n<ul>\n<li><code>C:\\Gopath</code>：用于安装第三方库。如<code>go get code.google.com/p/go-tour/gotour</code>会将totour安装到此目录。</li>\n<li><code>F:\\go</code>：用于自己写的项目代码。如果在此目录下用<code>go install</code>或<code>go build</code>来编译安装自己的项目的话，会将项目生成的可执行文件安装到此目录。</li>\n</ul>\n<p><strong>注意：</strong><br><em>Windows系统中环境变量的形式为%GOPATH%。</em><br><em>当go命令搜索包时，它总是第一个从$GOROOT开始。如果找到符合的包名，将不会再去$GOPATH搜索。</em><br><em>go get本质上可以理解为首先第一步是通过源码工具clone代码到src下面，然后执行go install。</em><br><strong>不要将GOPATH设置为与GOROOT同一目录。</strong></p>\n<h3 id=\"PATH\"><a href=\"#PATH\" class=\"headerlink\" title=\"$PATH\"></a>$PATH</h3><p>修改环境变量PATH：将%GOROOT%\\bin加到环境变量PATH里面，这样就可以直接在dos命令模式下任意目录运行%GOROOT%\\bin目录下的程序 如：go.exe godoc.exe。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f7m0nzekzjj20bk030q38.jpg\" alt=\"\"></p>\n<h2 id=\"Android-Studio\"><a href=\"#Android-Studio\" class=\"headerlink\" title=\"Android Studio\"></a>Android Studio</h2><p>首先下载安装包安装主程序，安装好之后，到安装目录下的tools目录，点击android.bat脚本启动Android SDK Manager工具。由于被墙了，所以要不翻墙，要不找国内代理源，如腾讯。</p>\n<blockquote>\n<p>1.启动 Android SDK Manager ，打开主界面，依次选择『Tools』、『Options…』，弹出『Android SDK Manager - Settings』窗口；<br>2.在『Android SDK Manager - Settings』窗口中，在『HTTP Proxy Server』和『HTTP Proxy Port』输入框内填入 android-mirror.bugly.qq.com 镜像服务器地址(不包含<a href=\"http://，如下图)和端口8080，并且选中『Force\">http://，如下图)和端口8080，并且选中『Force</a> https://… sources to be fetched using』复选框。设置完成后单击『Close』按钮关闭『Android SDK Manager - Settings』窗口返回到主界面；<br>依次选择『Packages』、『Reload』。<br>然后你就可以更新最新的tools和buildtools工具了，还需要更新最新的SDK以及支持库文件。</p>\n</blockquote>\n<ul>\n<li>配置Android环境变量<code>ANDROID_HOME</code>：<br>编辑系统环境变量,新建ANDROID_HOME,在变量值一栏中填写你上面的安装路径，比如我的就是<code>C:\\Users\\tienchiu\\AppData\\Local\\Android\\sdk</code>;<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m4prssgnj20ij05adgp.jpg\" alt=\"\"></li>\n<li>配置PATH环境变量：<br>编辑Path变量，增加<code>%ANDROID_HOME%\\tools</code>和<code>%ANDROID_HOME%\\platform-tools</code>;<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m4pxqxfaj20bx01gwen.jpg\" alt=\"\"></li>\n<li>验证<br>验证一下你的环境是不是配置好了，启动命令行，输入命令adb version，看是否有信息输出,如果能看到正确的版本信息，那就说你的环境配置没有问题。</li>\n</ul>\n<h2 id=\"JAVA\"><a href=\"#JAVA\" class=\"headerlink\" title=\"JAVA\"></a>JAVA</h2><p>java环境有2个参数要配置：</p>\n<ul>\n<li><code>JAVA_HOME</code> java安装目录。</li>\n<li><code>CLASSPATH</code> </li>\n</ul>\n<p>在系统环境变量里添加<code>JAVA_HOME</code>变量如下:<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m118os3rj20fv014aag.jpg\" alt=\"\"><br>在系统环境变量里添加<code>CLASSPATH</code>变量如下:<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m11lt9f2j20ij05aab2.jpg\" alt=\"\"><br>在系统环境变量<code>PATH</code>变量后添加java的可执行目录<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m11fhwb4j20b000vwee.jpg\" alt=\"\"></p>\n<p>测试一下，任意打开一个dos界面，<code>java</code>命令是否可用<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m16fimjkj20g30ajabf.jpg\" alt=\"\"><br>测试一下，任意打开一个dos界面，<code>javac</code>命令是否可用<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m16m1asyj20g10ahjtg.jpg\" alt=\"\"></p>\n<p><strong>注意：</strong><br><strong>安装完成后记得重启电脑！</strong></p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/01.2.md\">GOPATH与工作空间</a><br><a href=\"http://qizhanming.com/blog/2012/06/03/go-intro-3-gopath/\">Go语言介绍 - 3：GOPATH</a><br><a href=\"http://my.oschina.net/yearnfar/blog/187266\">Golang学习之GOROOT、PATH、GOPATH及go get</a><br><a href=\"http://frank-zhu.github.io/android/2015/10/28/android-build-config/\">Android编译环境配置</a></p>"},{"title":"CoreOS","date":"2016-07-26T07:20:06.000Z","_content":"## 简介\n[CoreOS](https://coreos.com/) 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。\nCoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg)\n> CoreOS 没有提供包管理工具，而是通过容器化 (containerized) 的运算环境向应用程序提供运算资源。应用程序之间共享系统内核和资源，但是彼此之间又互不可见。这样就意味着应用程序将不会再被直接安装到操作系统中，而是通过Docker运行在容器中。这种方式使得操作系统、应用程序及运行环境之间的耦合度大大降低。\n> CoreOS 采用双系统分区 (dual root partition) 设计。两个分区分别被设置成主动模式和被动模式并在系统运行期间各司其职。主动分区负责系统运行，被动分区负责系统升级。一旦新版本的操作系统被发布，一个完整的系统文件将被下载至被动分区，并在系统下一次重启时从新版本分区启动，原来的被动分区将切换为主动分区，而之前的主动分区则被切换为被动分区，两个分区扮演的角色将相互对调。同时在系统运行期间系统分区被设置成只读状态，这样也确保了CoreOS的安全性。CoreOS的升级过程在默认条件下将自动完成，并且通过cgroup对升级过程中使用到的网络和磁盘资源进行限制，将系统升级所带来的影响降至最低。\n\n*`注：CoreOS原来是Docker的基础。不过可能觉得Docker现在越来越不pure，越来越背离初衷？于是现在自己另起炉灶，搞了个与Docker类似的东西`[Rkt](https://github.com/coreos/rkt)*\n\n## CoreOS架构\n* 从整体架构来看，CoreOS就是一个极简的，只跑Docker的Linux系统。\n* 从传统分层来看，CoreOS像是底层硬件+固件，Docker像是上层应用层。\n* 从软件分层来看，CoreOS像是操作系统,Docker+etcd像是内核，Docke容器像是进程。\n* 从对比模式来看，CoreOS像是hypervisor，Docker容器像是虚拟机。\n\n<!-- more -->\n\n> CoreOS 内置了两个服务：etcd 和 fleet。它们都是CoreOS的子项目。etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现，类似于 ZooKeeper 和 Doozer。 fleet是一个分布式的container发布工具，用于进行集群中任务的提交和管理。可以这么理解，etcd用来自动化构建CoreOS集群，而fleet则是运行于CoreOS集群之上的任务（docker）管理平台。也就是说，CoreOS设计之初，就将运行环境定位于集群&平台。\n\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f668nmagltj20cs0a6752.jpg)\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669sb8tppj20hq09z75a.jpg)\n\n## etcd\netcd在CoreOS中的位置：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f668mufzjoj20dw08pt9r.jpg)\n> **在CoreOS 集群中处于骨架地位的是etcd。**etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。\n\n\n## 参考文献 \n[http://www.infoq.com/cn/articles/what-is-coreos](http://www.infoq.com/cn/articles/what-is-coreos)\n[https://www.airpair.com/coreos/posts/coreos-with-docker](https://www.airpair.com/coreos/posts/coreos-with-docker)\n[http://cloud.51cto.com/art/201501/464025_all.htm](http://cloud.51cto.com/art/201501/464025_all.htm)\n[《CoreOS实践指南》](http://www.jianshu.com/p/da7ff503064c)\n[《CoreOS实战》](http://www.infoq.com/cn/CoreOSAction)\n","source":"_posts/CoreOS.md","raw":"---\ntitle: CoreOS\ndate: 2016-07-26 15:20:06\ncategories:\n - study\ntags:\n - CoreOS\n---\n## 简介\n[CoreOS](https://coreos.com/) 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。\nCoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg)\n> CoreOS 没有提供包管理工具，而是通过容器化 (containerized) 的运算环境向应用程序提供运算资源。应用程序之间共享系统内核和资源，但是彼此之间又互不可见。这样就意味着应用程序将不会再被直接安装到操作系统中，而是通过Docker运行在容器中。这种方式使得操作系统、应用程序及运行环境之间的耦合度大大降低。\n> CoreOS 采用双系统分区 (dual root partition) 设计。两个分区分别被设置成主动模式和被动模式并在系统运行期间各司其职。主动分区负责系统运行，被动分区负责系统升级。一旦新版本的操作系统被发布，一个完整的系统文件将被下载至被动分区，并在系统下一次重启时从新版本分区启动，原来的被动分区将切换为主动分区，而之前的主动分区则被切换为被动分区，两个分区扮演的角色将相互对调。同时在系统运行期间系统分区被设置成只读状态，这样也确保了CoreOS的安全性。CoreOS的升级过程在默认条件下将自动完成，并且通过cgroup对升级过程中使用到的网络和磁盘资源进行限制，将系统升级所带来的影响降至最低。\n\n*`注：CoreOS原来是Docker的基础。不过可能觉得Docker现在越来越不pure，越来越背离初衷？于是现在自己另起炉灶，搞了个与Docker类似的东西`[Rkt](https://github.com/coreos/rkt)*\n\n## CoreOS架构\n* 从整体架构来看，CoreOS就是一个极简的，只跑Docker的Linux系统。\n* 从传统分层来看，CoreOS像是底层硬件+固件，Docker像是上层应用层。\n* 从软件分层来看，CoreOS像是操作系统,Docker+etcd像是内核，Docke容器像是进程。\n* 从对比模式来看，CoreOS像是hypervisor，Docker容器像是虚拟机。\n\n<!-- more -->\n\n> CoreOS 内置了两个服务：etcd 和 fleet。它们都是CoreOS的子项目。etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现，类似于 ZooKeeper 和 Doozer。 fleet是一个分布式的container发布工具，用于进行集群中任务的提交和管理。可以这么理解，etcd用来自动化构建CoreOS集群，而fleet则是运行于CoreOS集群之上的任务（docker）管理平台。也就是说，CoreOS设计之初，就将运行环境定位于集群&平台。\n\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f668nmagltj20cs0a6752.jpg)\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669sb8tppj20hq09z75a.jpg)\n\n## etcd\netcd在CoreOS中的位置：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f668mufzjoj20dw08pt9r.jpg)\n> **在CoreOS 集群中处于骨架地位的是etcd。**etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。\n\n\n## 参考文献 \n[http://www.infoq.com/cn/articles/what-is-coreos](http://www.infoq.com/cn/articles/what-is-coreos)\n[https://www.airpair.com/coreos/posts/coreos-with-docker](https://www.airpair.com/coreos/posts/coreos-with-docker)\n[http://cloud.51cto.com/art/201501/464025_all.htm](http://cloud.51cto.com/art/201501/464025_all.htm)\n[《CoreOS实践指南》](http://www.jianshu.com/p/da7ff503064c)\n[《CoreOS实战》](http://www.infoq.com/cn/CoreOSAction)\n","slug":"CoreOS","published":1,"updated":"2016-09-06T08:44:44.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z13v0002fgn9e152m4ja","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://coreos.com/\" target=\"_blank\" rel=\"external\">CoreOS</a> 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。<br>CoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg\" alt=\"\"></p>\n<blockquote>\n<p>CoreOS 没有提供包管理工具，而是通过容器化 (containerized) 的运算环境向应用程序提供运算资源。应用程序之间共享系统内核和资源，但是彼此之间又互不可见。这样就意味着应用程序将不会再被直接安装到操作系统中，而是通过Docker运行在容器中。这种方式使得操作系统、应用程序及运行环境之间的耦合度大大降低。<br>CoreOS 采用双系统分区 (dual root partition) 设计。两个分区分别被设置成主动模式和被动模式并在系统运行期间各司其职。主动分区负责系统运行，被动分区负责系统升级。一旦新版本的操作系统被发布，一个完整的系统文件将被下载至被动分区，并在系统下一次重启时从新版本分区启动，原来的被动分区将切换为主动分区，而之前的主动分区则被切换为被动分区，两个分区扮演的角色将相互对调。同时在系统运行期间系统分区被设置成只读状态，这样也确保了CoreOS的安全性。CoreOS的升级过程在默认条件下将自动完成，并且通过cgroup对升级过程中使用到的网络和磁盘资源进行限制，将系统升级所带来的影响降至最低。</p>\n</blockquote>\n<p><em><code>注：CoreOS原来是Docker的基础。不过可能觉得Docker现在越来越不pure，越来越背离初衷？于是现在自己另起炉灶，搞了个与Docker类似的东西</code><a href=\"https://github.com/coreos/rkt\" target=\"_blank\" rel=\"external\">Rkt</a></em></p>\n<h2 id=\"CoreOS架构\"><a href=\"#CoreOS架构\" class=\"headerlink\" title=\"CoreOS架构\"></a>CoreOS架构</h2><ul>\n<li>从整体架构来看，CoreOS就是一个极简的，只跑Docker的Linux系统。</li>\n<li>从传统分层来看，CoreOS像是底层硬件+固件，Docker像是上层应用层。</li>\n<li>从软件分层来看，CoreOS像是操作系统,Docker+etcd像是内核，Docke容器像是进程。</li>\n<li>从对比模式来看，CoreOS像是hypervisor，Docker容器像是虚拟机。</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>CoreOS 内置了两个服务：etcd 和 fleet。它们都是CoreOS的子项目。etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现，类似于 ZooKeeper 和 Doozer。 fleet是一个分布式的container发布工具，用于进行集群中任务的提交和管理。可以这么理解，etcd用来自动化构建CoreOS集群，而fleet则是运行于CoreOS集群之上的任务（docker）管理平台。也就是说，CoreOS设计之初，就将运行环境定位于集群&amp;平台。</p>\n</blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f668nmagltj20cs0a6752.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669sb8tppj20hq09z75a.jpg\" alt=\"\"></p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p>etcd在CoreOS中的位置：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f668mufzjoj20dw08pt9r.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>在CoreOS 集群中处于骨架地位的是etcd。</strong>etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.infoq.com/cn/articles/what-is-coreos\" target=\"_blank\" rel=\"external\">http://www.infoq.com/cn/articles/what-is-coreos</a><br><a href=\"https://www.airpair.com/coreos/posts/coreos-with-docker\" target=\"_blank\" rel=\"external\">https://www.airpair.com/coreos/posts/coreos-with-docker</a><br><a href=\"http://cloud.51cto.com/art/201501/464025_all.htm\" target=\"_blank\" rel=\"external\">http://cloud.51cto.com/art/201501/464025_all.htm</a><br><a href=\"http://www.jianshu.com/p/da7ff503064c\" target=\"_blank\" rel=\"external\">《CoreOS实践指南》</a><br><a href=\"http://www.infoq.com/cn/CoreOSAction\" target=\"_blank\" rel=\"external\">《CoreOS实战》</a></p>\n","excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><a href=\"https://coreos.com/\">CoreOS</a> 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。<br>CoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg\" alt=\"\"></p>\n<blockquote>\n<p>CoreOS 没有提供包管理工具，而是通过容器化 (containerized) 的运算环境向应用程序提供运算资源。应用程序之间共享系统内核和资源，但是彼此之间又互不可见。这样就意味着应用程序将不会再被直接安装到操作系统中，而是通过Docker运行在容器中。这种方式使得操作系统、应用程序及运行环境之间的耦合度大大降低。<br>CoreOS 采用双系统分区 (dual root partition) 设计。两个分区分别被设置成主动模式和被动模式并在系统运行期间各司其职。主动分区负责系统运行，被动分区负责系统升级。一旦新版本的操作系统被发布，一个完整的系统文件将被下载至被动分区，并在系统下一次重启时从新版本分区启动，原来的被动分区将切换为主动分区，而之前的主动分区则被切换为被动分区，两个分区扮演的角色将相互对调。同时在系统运行期间系统分区被设置成只读状态，这样也确保了CoreOS的安全性。CoreOS的升级过程在默认条件下将自动完成，并且通过cgroup对升级过程中使用到的网络和磁盘资源进行限制，将系统升级所带来的影响降至最低。</p>\n</blockquote>\n<p><em><code>注：CoreOS原来是Docker的基础。不过可能觉得Docker现在越来越不pure，越来越背离初衷？于是现在自己另起炉灶，搞了个与Docker类似的东西</code><a href=\"https://github.com/coreos/rkt\">Rkt</a></em></p>\n<h2 id=\"CoreOS架构\"><a href=\"#CoreOS架构\" class=\"headerlink\" title=\"CoreOS架构\"></a>CoreOS架构</h2><ul>\n<li>从整体架构来看，CoreOS就是一个极简的，只跑Docker的Linux系统。</li>\n<li>从传统分层来看，CoreOS像是底层硬件+固件，Docker像是上层应用层。</li>\n<li>从软件分层来看，CoreOS像是操作系统,Docker+etcd像是内核，Docke容器像是进程。</li>\n<li>从对比模式来看，CoreOS像是hypervisor，Docker容器像是虚拟机。</li>\n</ul>","more":"<blockquote>\n<p>CoreOS 内置了两个服务：etcd 和 fleet。它们都是CoreOS的子项目。etcd是一个高可用的键值存储系统，主要用于共享配置和服务发现，类似于 ZooKeeper 和 Doozer。 fleet是一个分布式的container发布工具，用于进行集群中任务的提交和管理。可以这么理解，etcd用来自动化构建CoreOS集群，而fleet则是运行于CoreOS集群之上的任务（docker）管理平台。也就是说，CoreOS设计之初，就将运行环境定位于集群&amp;平台。</p>\n</blockquote>\n<p><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f668nmagltj20cs0a6752.jpg\" alt=\"\"><br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669sb8tppj20hq09z75a.jpg\" alt=\"\"></p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p>etcd在CoreOS中的位置：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f668mufzjoj20dw08pt9r.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>在CoreOS 集群中处于骨架地位的是etcd。</strong>etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。</p>\n</blockquote>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.infoq.com/cn/articles/what-is-coreos\">http://www.infoq.com/cn/articles/what-is-coreos</a><br><a href=\"https://www.airpair.com/coreos/posts/coreos-with-docker\">https://www.airpair.com/coreos/posts/coreos-with-docker</a><br><a href=\"http://cloud.51cto.com/art/201501/464025_all.htm\">http://cloud.51cto.com/art/201501/464025_all.htm</a><br><a href=\"http://www.jianshu.com/p/da7ff503064c\">《CoreOS实践指南》</a><br><a href=\"http://www.infoq.com/cn/CoreOSAction\">《CoreOS实战》</a></p>"},{"title":"Golang@Docker","date":"2016-07-20T05:55:14.000Z","_content":"\n## 学习资料\n前几天花点时间沉下心来学习了下[Docker](https://www.docker.com/)。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在[docker hub](https://hub.docker.com/)上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.1GB了。所以以就找了个mini型的Linux发行版本[Alpine Linux](http://alpinelinux.org/)，做了个基于Alpine的镜像。其中golang的版本是1.6.2。\n- docker hub上的下载页面地址在[**这里**](https://hub.docker.com/r/gcoder/golang/)。（由于docker hub在墙外，所以速度很慢）\n- aliyun上的下载页面地址在[**这里**](https://dev.aliyun.com/detail.html?repoId=9014)。\n\n主要的参考资料来自于gitbook上的一本书[《Docker--从入书到实战》](https://www.gitbook.com/book/yeasy/docker_practice/details)，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。\n![](https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1)\n\nDocker深入一些的概念和原理来自于[酷壳](http://coolshell.cn/?s=docker)的文章。相对来说，[酷壳](http://coolshell.cn/?s=docker)的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。\n![](http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png)\n\n<!-- more -->\n\n## 简单过程\n学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：\n1. 下载Alipne文件系统包。\n2. 将Alipne文件系统包导入Docker镜像\n3. 运行Docker镜像安装golang环境\n4. 将已经安装好golang环境的Docker镜像导出成新的镜像。\n\n其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。\n\n下面，我们来实战一下。以Docker hub上的官方Alpine镜像为基础。\n\n## 实战\n\n### 下载Alpine镜像\n首先，从docker hub上下载官方的[Alpine镜像](https://hub.docker.com/_/alpine/)。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine\nUsing default tag: latest\nlatest: Pulling from library/alpine\nDigest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a\nStatus: Downloaded newer image for alpine:latest\n9527@ubuntu:~/Docker/alpine$\n```\n\n现在，我们来看一下是不是已经下载下来了。用docker images指令\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\nubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB\nubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB\nalpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB\n9527@ubuntu:~/Docker/alpine$\n```\n看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。\n\n### 写Dockerfile\n写个Dockerfile，把需要做的事情按步骤写好。内容如下：\n```shell\n9527@ubuntu:~/Docker/alpine$ cat Dockerfile\nFROM alpine:latest\nRUN apk --update add go\nCMD /bin/ash\n9527@ubuntu:~/Docker/alpine$\n```\n\n### 生成新镜像\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker build -t=\"golang:1.6.2\" .\n```\n指令敲过之后，就是漫长的等待。因为要更新，要下载golang包，配置环境，然后打包。最终生成的镜像如下：\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\n```\n最终生成的镜像有192MB之多。怪不得ubuntu上安装golang，体积能从550MB急剧增加到1.1GB了。\n\n### 试运行\n好了，现在我们的镜像已经生成成功了。简单吧？那么，我们现在来试运行一下\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker run -it golang:1.6.2\n[sudo] password for 9527: \n/ # ls\nbin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var\n/ # go version\ngo version go1.6.2 linux/amd64\n/ # \n```\n很明显进入了linux shell，打印看看golang的版本，是正确的。\n\n### hello world\n那我们接下来试着写个hellworld试试。\n```shell\n/ # vi hello.go\n/ # \n/ # cat hello.go \npackge main\n\nimport \"fmt\"\n\nfunc main(){\n    fmt.Println(\"Hello Golang!\")\n}\n```\n写好了，我们来运行一下试试。\n```shell\n/ # go run hello.go \nHello Golang!\n/ # \n```\nOK，可以了，打完收工！\n","source":"_posts/Golang-Docker.md","raw":"---\ntitle: Golang@Docker\ndate: 2016-07-20 13:55:14\ncategories:\n - study\ntags:\n - golang\n - Docker\n---\n\n## 学习资料\n前几天花点时间沉下心来学习了下[Docker](https://www.docker.com/)。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在[docker hub](https://hub.docker.com/)上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.1GB了。所以以就找了个mini型的Linux发行版本[Alpine Linux](http://alpinelinux.org/)，做了个基于Alpine的镜像。其中golang的版本是1.6.2。\n- docker hub上的下载页面地址在[**这里**](https://hub.docker.com/r/gcoder/golang/)。（由于docker hub在墙外，所以速度很慢）\n- aliyun上的下载页面地址在[**这里**](https://dev.aliyun.com/detail.html?repoId=9014)。\n\n主要的参考资料来自于gitbook上的一本书[《Docker--从入书到实战》](https://www.gitbook.com/book/yeasy/docker_practice/details)，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。\n![](https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1)\n\nDocker深入一些的概念和原理来自于[酷壳](http://coolshell.cn/?s=docker)的文章。相对来说，[酷壳](http://coolshell.cn/?s=docker)的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。\n![](http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png)\n\n<!-- more -->\n\n## 简单过程\n学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：\n1. 下载Alipne文件系统包。\n2. 将Alipne文件系统包导入Docker镜像\n3. 运行Docker镜像安装golang环境\n4. 将已经安装好golang环境的Docker镜像导出成新的镜像。\n\n其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。\n\n下面，我们来实战一下。以Docker hub上的官方Alpine镜像为基础。\n\n## 实战\n\n### 下载Alpine镜像\n首先，从docker hub上下载官方的[Alpine镜像](https://hub.docker.com/_/alpine/)。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine\nUsing default tag: latest\nlatest: Pulling from library/alpine\nDigest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a\nStatus: Downloaded newer image for alpine:latest\n9527@ubuntu:~/Docker/alpine$\n```\n\n现在，我们来看一下是不是已经下载下来了。用docker images指令\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\nubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB\nubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB\nalpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB\n9527@ubuntu:~/Docker/alpine$\n```\n看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。\n\n### 写Dockerfile\n写个Dockerfile，把需要做的事情按步骤写好。内容如下：\n```shell\n9527@ubuntu:~/Docker/alpine$ cat Dockerfile\nFROM alpine:latest\nRUN apk --update add go\nCMD /bin/ash\n9527@ubuntu:~/Docker/alpine$\n```\n\n### 生成新镜像\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker build -t=\"golang:1.6.2\" .\n```\n指令敲过之后，就是漫长的等待。因为要更新，要下载golang包，配置环境，然后打包。最终生成的镜像如下：\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\n```\n最终生成的镜像有192MB之多。怪不得ubuntu上安装golang，体积能从550MB急剧增加到1.1GB了。\n\n### 试运行\n好了，现在我们的镜像已经生成成功了。简单吧？那么，我们现在来试运行一下\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker run -it golang:1.6.2\n[sudo] password for 9527: \n/ # ls\nbin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var\n/ # go version\ngo version go1.6.2 linux/amd64\n/ # \n```\n很明显进入了linux shell，打印看看golang的版本，是正确的。\n\n### hello world\n那我们接下来试着写个hellworld试试。\n```shell\n/ # vi hello.go\n/ # \n/ # cat hello.go \npackge main\n\nimport \"fmt\"\n\nfunc main(){\n    fmt.Println(\"Hello Golang!\")\n}\n```\n写好了，我们来运行一下试试。\n```shell\n/ # go run hello.go \nHello Golang!\n/ # \n```\nOK，可以了，打完收工！\n","slug":"Golang-Docker","published":1,"updated":"2016-09-06T08:44:44.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1480005fgn9oqf7zsu5","content":"<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><p>前几天花点时间沉下心来学习了下<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a>。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">docker hub</a>上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.1GB了。所以以就找了个mini型的Linux发行版本<a href=\"http://alpinelinux.org/\" target=\"_blank\" rel=\"external\">Alpine Linux</a>，做了个基于Alpine的镜像。其中golang的版本是1.6.2。</p>\n<ul>\n<li>docker hub上的下载页面地址在<a href=\"https://hub.docker.com/r/gcoder/golang/\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a>。（由于docker hub在墙外，所以速度很慢）</li>\n<li>aliyun上的下载页面地址在<a href=\"https://dev.aliyun.com/detail.html?repoId=9014\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a>。</li>\n</ul>\n<p>主要的参考资料来自于gitbook上的一本书<a href=\"https://www.gitbook.com/book/yeasy/docker_practice/details\" target=\"_blank\" rel=\"external\">《Docker–从入书到实战》</a>，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。<br><img src=\"https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1\" alt=\"\"></p>\n<p>Docker深入一些的概念和原理来自于<a href=\"http://coolshell.cn/?s=docker\" target=\"_blank\" rel=\"external\">酷壳</a>的文章。相对来说，<a href=\"http://coolshell.cn/?s=docker\" target=\"_blank\" rel=\"external\">酷壳</a>的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。<br><img src=\"http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><p>学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：</p>\n<ol>\n<li>下载Alipne文件系统包。</li>\n<li>将Alipne文件系统包导入Docker镜像</li>\n<li>运行Docker镜像安装golang环境</li>\n<li>将已经安装好golang环境的Docker镜像导出成新的镜像。</li>\n</ol>\n<p>其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。</p>\n<p>下面，我们来实战一下。以Docker hub上的官方Alpine镜像为基础。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"下载Alpine镜像\"><a href=\"#下载Alpine镜像\" class=\"headerlink\" title=\"下载Alpine镜像\"></a>下载Alpine镜像</h3><p>首先，从docker hub上下载官方的<a href=\"https://hub.docker.com/_/alpine/\" target=\"_blank\" rel=\"external\">Alpine镜像</a>。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine</div><div class=\"line\">Using default tag: latest</div><div class=\"line\">latest: Pulling from library/alpine</div><div class=\"line\">Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a</div><div class=\"line\">Status: Downloaded newer image for alpine:latest</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>现在，我们来看一下是不是已经下载下来了。用docker images指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div><div class=\"line\">ubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB</div><div class=\"line\">ubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB</div><div class=\"line\">alpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。</p>\n<h3 id=\"写Dockerfile\"><a href=\"#写Dockerfile\" class=\"headerlink\" title=\"写Dockerfile\"></a>写Dockerfile</h3><p>写个Dockerfile，把需要做的事情按步骤写好。内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ cat Dockerfile</div><div class=\"line\">FROM alpine:latest</div><div class=\"line\">RUN apk --update add go</div><div class=\"line\">CMD /bin/ash</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成新镜像\"><a href=\"#生成新镜像\" class=\"headerlink\" title=\"生成新镜像\"></a>生成新镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker build -t=&quot;golang:1.6.2&quot; .</div></pre></td></tr></table></figure>\n<p>指令敲过之后，就是漫长的等待。因为要更新，要下载golang包，配置环境，然后打包。最终生成的镜像如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div></pre></td></tr></table></figure></p>\n<p>最终生成的镜像有192MB之多。怪不得ubuntu上安装golang，体积能从550MB急剧增加到1.1GB了。</p>\n<h3 id=\"试运行\"><a href=\"#试运行\" class=\"headerlink\" title=\"试运行\"></a>试运行</h3><p>好了，现在我们的镜像已经生成成功了。简单吧？那么，我们现在来试运行一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker run -it golang:1.6.2</div><div class=\"line\">[sudo] password for 9527: </div><div class=\"line\">/ # ls</div><div class=\"line\">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</div><div class=\"line\">/ # go version</div><div class=\"line\">go version go1.6.2 linux/amd64</div><div class=\"line\">/ #</div></pre></td></tr></table></figure></p>\n<p>很明显进入了linux shell，打印看看golang的版本，是正确的。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h3><p>那我们接下来试着写个hellworld试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ # vi hello.go</div><div class=\"line\">/ # </div><div class=\"line\">/ # cat hello.go </div><div class=\"line\">packge main</div><div class=\"line\"></div><div class=\"line\">import &quot;fmt&quot;</div><div class=\"line\"></div><div class=\"line\">func main()&#123;</div><div class=\"line\">    fmt.Println(&quot;Hello Golang!&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>写好了，我们来运行一下试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ # go run hello.go </div><div class=\"line\">Hello Golang!</div><div class=\"line\">/ #</div></pre></td></tr></table></figure></p>\n<p>OK，可以了，打完收工！</p>\n","excerpt":"<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><p>前几天花点时间沉下心来学习了下<a href=\"https://www.docker.com/\">Docker</a>。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在<a href=\"https://hub.docker.com/\">docker hub</a>上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.1GB了。所以以就找了个mini型的Linux发行版本<a href=\"http://alpinelinux.org/\">Alpine Linux</a>，做了个基于Alpine的镜像。其中golang的版本是1.6.2。</p>\n<ul>\n<li>docker hub上的下载页面地址在<a href=\"https://hub.docker.com/r/gcoder/golang/\"><strong>这里</strong></a>。（由于docker hub在墙外，所以速度很慢）</li>\n<li>aliyun上的下载页面地址在<a href=\"https://dev.aliyun.com/detail.html?repoId=9014\"><strong>这里</strong></a>。</li>\n</ul>\n<p>主要的参考资料来自于gitbook上的一本书<a href=\"https://www.gitbook.com/book/yeasy/docker_practice/details\">《Docker–从入书到实战》</a>，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。<br><img src=\"https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1\" alt=\"\"></p>\n<p>Docker深入一些的概念和原理来自于<a href=\"http://coolshell.cn/?s=docker\">酷壳</a>的文章。相对来说，<a href=\"http://coolshell.cn/?s=docker\">酷壳</a>的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。<br><img src=\"http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png\" alt=\"\"></p>","more":"<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><p>学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：</p>\n<ol>\n<li>下载Alipne文件系统包。</li>\n<li>将Alipne文件系统包导入Docker镜像</li>\n<li>运行Docker镜像安装golang环境</li>\n<li>将已经安装好golang环境的Docker镜像导出成新的镜像。</li>\n</ol>\n<p>其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。</p>\n<p>下面，我们来实战一下。以Docker hub上的官方Alpine镜像为基础。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"下载Alpine镜像\"><a href=\"#下载Alpine镜像\" class=\"headerlink\" title=\"下载Alpine镜像\"></a>下载Alpine镜像</h3><p>首先，从docker hub上下载官方的<a href=\"https://hub.docker.com/_/alpine/\">Alpine镜像</a>。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine</div><div class=\"line\">Using default tag: latest</div><div class=\"line\">latest: Pulling from library/alpine</div><div class=\"line\">Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a</div><div class=\"line\">Status: Downloaded newer image for alpine:latest</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>现在，我们来看一下是不是已经下载下来了。用docker images指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div><div class=\"line\">ubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB</div><div class=\"line\">ubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB</div><div class=\"line\">alpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。</p>\n<h3 id=\"写Dockerfile\"><a href=\"#写Dockerfile\" class=\"headerlink\" title=\"写Dockerfile\"></a>写Dockerfile</h3><p>写个Dockerfile，把需要做的事情按步骤写好。内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ cat Dockerfile</div><div class=\"line\">FROM alpine:latest</div><div class=\"line\">RUN apk --update add go</div><div class=\"line\">CMD /bin/ash</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<h3 id=\"生成新镜像\"><a href=\"#生成新镜像\" class=\"headerlink\" title=\"生成新镜像\"></a>生成新镜像</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker build -t=&quot;golang:1.6.2&quot; .</div></pre></td></tr></table></figure>\n<p>指令敲过之后，就是漫长的等待。因为要更新，要下载golang包，配置环境，然后打包。最终生成的镜像如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div></pre></td></tr></table></figure></p>\n<p>最终生成的镜像有192MB之多。怪不得ubuntu上安装golang，体积能从550MB急剧增加到1.1GB了。</p>\n<h3 id=\"试运行\"><a href=\"#试运行\" class=\"headerlink\" title=\"试运行\"></a>试运行</h3><p>好了，现在我们的镜像已经生成成功了。简单吧？那么，我们现在来试运行一下<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker run -it golang:1.6.2</div><div class=\"line\">[sudo] password for 9527: </div><div class=\"line\">/ # ls</div><div class=\"line\">bin      dev      etc      home     lib      linuxrc  media    mnt      proc     root     run      sbin     srv      sys      tmp      usr      var</div><div class=\"line\">/ # go version</div><div class=\"line\">go version go1.6.2 linux/amd64</div><div class=\"line\">/ #</div></pre></td></tr></table></figure></p>\n<p>很明显进入了linux shell，打印看看golang的版本，是正确的。</p>\n<h3 id=\"hello-world\"><a href=\"#hello-world\" class=\"headerlink\" title=\"hello world\"></a>hello world</h3><p>那我们接下来试着写个hellworld试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ # vi hello.go</div><div class=\"line\">/ # </div><div class=\"line\">/ # cat hello.go </div><div class=\"line\">packge main</div><div class=\"line\"></div><div class=\"line\">import &quot;fmt&quot;</div><div class=\"line\"></div><div class=\"line\">func main()&#123;</div><div class=\"line\">    fmt.Println(&quot;Hello Golang!&quot;)</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>写好了，我们来运行一下试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">/ # go run hello.go </div><div class=\"line\">Hello Golang!</div><div class=\"line\">/ #</div></pre></td></tr></table></figure></p>\n<p>OK，可以了，打完收工！</p>"},{"title":"Golang init","date":"2016-09-06T08:44:44.989Z","_content":"![](http://ww1.sinaimg.cn/large/772d7a33jw1f7m9l74lqvj20qc0bnjta.jpg)\n","source":"_posts/Golang-init.md","raw":"---\ntitle: Golang init\ndate: 2016-08-30 10:57:21\n - study\ntags:\n - golang\n---\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f7m9l74lqvj20qc0bnjta.jpg)\n","slug":"Golang-init","published":1,"updated":"2016-09-08T08:37:24.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z15d000kfgn967dlm6pv","content":"<p><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f7m9l74lqvj20qc0bnjta.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f7m9l74lqvj20qc0bnjta.jpg\" alt=\"\"></p>\n"},{"title":"我来了","date":"2015-05-12T08:58:49.000Z","_content":"[Markdown](http://zh.wikipedia.org/zh/Markdown)是个好东西，简洁及高效。\n用它贴张图试试：<font color=red>Bad Walt is watching you!</font>\n![](http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg)\n","source":"_posts/Hello World.md","raw":"title: \"我来了\"\ndate: 2015-05-12 16:58:49\ncategories:\n - life\ntags:\n - 虾扯\n---\n[Markdown](http://zh.wikipedia.org/zh/Markdown)是个好东西，简洁及高效。\n用它贴张图试试：<font color=red>Bad Walt is watching you!</font>\n![](http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg)\n","slug":"Hello World","published":1,"updated":"2016-09-06T08:44:44.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z15g000lfgn9d30plmnl","content":"<p><a href=\"http://zh.wikipedia.org/zh/Markdown\" target=\"_blank\" rel=\"external\">Markdown</a>是个好东西，简洁及高效。<br>用它贴张图试试：<font color=\"red\">Bad Walt is watching you!</font><br><img src=\"http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p><a href=\"http://zh.wikipedia.org/zh/Markdown\">Markdown</a>是个好东西，简洁及高效。<br>用它贴张图试试：<font color=red>Bad Walt is watching you!</font><br><img src=\"http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg\" alt=\"\"></p>\n"},{"title":"crack CAS for china DTV","date":"2016-08-11T03:31:02.000Z","_content":"## 如何实现不用花钱收看广电的电视节目？\n今天bbs上有人PM我，问我广电盒子不能看电视的问题。看了下他的描述，应该是被广电把授权给取消了。就给他回复了可能的原因和解决方法。\n翻了下PM纪录，还是一年多前告诉他这种解决方案。想想，还是重新在这儿记录一下吧。如果有人觉得有用就试试，国内大部分地方都能使用这种方案来达到伪crack的目的。如果有广电数字公司的人看到，想办法补下这个bug吧。（不过个人对此表示呵呵哒。。。）对于国内垄断性的行业的官老爷来说，告诉他们这些是然并X的。\n不过以下说的也只个讨巧的方法，并不是真正的能绕过去，广电想干掉你那是分分钟的事，谁让人垄断呢？\n\n## 为什么能实现？\n作为一个理工男，遇到问题，首先问的肯定是为什么？那为什么能实现不用花钱也能“享受”广电的垄断服务呢？\n首先，我们来看看目前国内广电数字电视收费的基础。一般家庭要看有线电视，会有以下几个场景：\n- 到广电营业厅交钱开户\n- 交钱领一个数字电视机顶盒\n- 拿到一张像信用卡一样的数字电视CA卡\n- 回家插上机顶盒，插入CA卡\n- 插上信号线，搜台，看电视。\n\n目前国内大部分数字电视运营方都是独立成一个叫有钱数字公司来负责信号的播发，费用的收取等，所谓制播分离。我们拿到的CA卡就是由他们从几家CAS集成公司来订购的。有线数字公司的前端播发设备里有很重要的一环---加密节目就是由这些CAS来负责实现的。很简单，把原来从卫星上收取下来的节目（或者是免费或者是加密）的节目，复合一下，再进行加密一下，通过有线播发出来。用户手里的CA卡像手机卡芯片一样，和机顶盒里的软件程序一起（后续可能需要专用硬件）来实现把信号线里的加密信号解密出来，进行播放。这里面涉及很多环节。最重要的就是CA卡里的解密功能。\n我们给广电交钱看电视，实质是让有线数字公司前端通过向我们手里的CA卡（每张都有一个唯一编号）写入一些数据，以保证这张CA卡能与机顶盒软件模块一起配合解密不同的节目包。给的钱越多（开越多的电视节目包），CA卡里的数据条数就越多，能看的电视节目就越多。所以，关键点就来了。我们只要把手里的CA卡多写入一些数据，不就行了？\n可是，并没有那么简单。人家CAS厂商为广电想到了，你钱只交到今年春节，难道我还能让你明年也能看到春节晚会？呵呵~~~ 所以CA卡里写入的数据，都会有一个属性，那就是时间范围，即有效起始时间和终止时间。过了这个终止时间，就不能保证CA卡和机顶盒软件模块能工作了。电视上就能看到让你交费的提示了。。。\n那么，我们让CA卡里的数据终止时间变长点不就好了么？（。。。你要是有那本事，就可以去黑掉人家服务器了，据说里面茶挺好喝，还有免费住房和免费饭。。。）\n\n（。。。废话我写不下去了，直接上干货吧。。。）\n\n**以下为干货**\n<!-- more -->\n\n## 怎么来实现？\n上面说了2点关键的点。就是：\n1. 想法让CA卡里的数据多一些，你能看的节目就多一些。\n2. 想法让CA卡里的数据时间范围长一些，你能看的节目时间就长一些。\n\n> 好了，我们就这2点来动手吧。\n动手？我们动什么手？我们什么手都动不了！\n那扯什么淡！\n别急，我们要的是让广电帮我们动手。\n。。。\n\n第1点，怎么让CA卡里数据多一些？\n\n> 交钱啊！交钱越多就看的越多不是？\n可是我并不想交钱啊！你不是说能不花钱就能看吗？\n。。。\n那好吧，能不能尽量少的交钱？\n嗯，这还能聊下去。\n呵呵，来，说吧，怎么办？\n现在是月底了吧？去广电营业厅把你看的所有电视包全给开了。\n。。。那要花多少钱啊？\n别管，先去开了。开完你就是发现CA卡里的数据条数是多了些？\n额，好像是啊。。。那接下来呢？\n到下个月初再去营业厅，随便找个理由，关掉这些电视包。\n。。。那，好吧。接下来呢？\n接下来？没有接下来了。完事了啊。\n。。。那我开这些电视包，钱花了好多啊。\n你想想，你这个月底开，下个月初去关，能花多少钱？最多一个月的吧？良心点的地方广电还只收这几天的钱，是不是？\n哎，是啊。这么一说还真是。真是良心啊。不过我家那里的广电必须要一次收几年的钱咋办？\n。。。那就狗带吧。。。哦，对了，你在关掉这些电视包之前，还得找一个能够把EMM接收功能关掉的机顶盒，替换你家那“免费送”的机顶盒。\n。。。EMM是什么鬼？还有哪里去找能够关掉这个什么鬼EMM的机顶盒？\nEMM。。。额，你不用知道什么意思了。去找机顶盒，满世界去找嘛。各大BBS，X宝都是宝藏库啊。\n。。。你不能直接给个地儿嘛？？？\n那好吧，你过来，到XXXXXXXXXX（以下省略几百字。。。）\n\n第2点，怎么让卡里的数据时间范围长一些？\n\n> 那我们怎么让CA卡里的数据时间范围长一呢？这样，我就不用下个月底再这样操作了。毕竟操作多了，被营业厅的小妹看破诡计，也不太好嘛\n这个。。。我也没办法。只能看各地广电的懒政程度了。\n。。。你又在耍我。。。\n。。。\n\nThe END.\n","source":"_posts/crack-CAS-for-china-DTV.md","raw":"---\ntitle: crack CAS for china DTV\ndate: 2016-08-11 11:31:02\ncategories:\n - work\ntags:\n - DTV\n - CAS\n---\n## 如何实现不用花钱收看广电的电视节目？\n今天bbs上有人PM我，问我广电盒子不能看电视的问题。看了下他的描述，应该是被广电把授权给取消了。就给他回复了可能的原因和解决方法。\n翻了下PM纪录，还是一年多前告诉他这种解决方案。想想，还是重新在这儿记录一下吧。如果有人觉得有用就试试，国内大部分地方都能使用这种方案来达到伪crack的目的。如果有广电数字公司的人看到，想办法补下这个bug吧。（不过个人对此表示呵呵哒。。。）对于国内垄断性的行业的官老爷来说，告诉他们这些是然并X的。\n不过以下说的也只个讨巧的方法，并不是真正的能绕过去，广电想干掉你那是分分钟的事，谁让人垄断呢？\n\n## 为什么能实现？\n作为一个理工男，遇到问题，首先问的肯定是为什么？那为什么能实现不用花钱也能“享受”广电的垄断服务呢？\n首先，我们来看看目前国内广电数字电视收费的基础。一般家庭要看有线电视，会有以下几个场景：\n- 到广电营业厅交钱开户\n- 交钱领一个数字电视机顶盒\n- 拿到一张像信用卡一样的数字电视CA卡\n- 回家插上机顶盒，插入CA卡\n- 插上信号线，搜台，看电视。\n\n目前国内大部分数字电视运营方都是独立成一个叫有钱数字公司来负责信号的播发，费用的收取等，所谓制播分离。我们拿到的CA卡就是由他们从几家CAS集成公司来订购的。有线数字公司的前端播发设备里有很重要的一环---加密节目就是由这些CAS来负责实现的。很简单，把原来从卫星上收取下来的节目（或者是免费或者是加密）的节目，复合一下，再进行加密一下，通过有线播发出来。用户手里的CA卡像手机卡芯片一样，和机顶盒里的软件程序一起（后续可能需要专用硬件）来实现把信号线里的加密信号解密出来，进行播放。这里面涉及很多环节。最重要的就是CA卡里的解密功能。\n我们给广电交钱看电视，实质是让有线数字公司前端通过向我们手里的CA卡（每张都有一个唯一编号）写入一些数据，以保证这张CA卡能与机顶盒软件模块一起配合解密不同的节目包。给的钱越多（开越多的电视节目包），CA卡里的数据条数就越多，能看的电视节目就越多。所以，关键点就来了。我们只要把手里的CA卡多写入一些数据，不就行了？\n可是，并没有那么简单。人家CAS厂商为广电想到了，你钱只交到今年春节，难道我还能让你明年也能看到春节晚会？呵呵~~~ 所以CA卡里写入的数据，都会有一个属性，那就是时间范围，即有效起始时间和终止时间。过了这个终止时间，就不能保证CA卡和机顶盒软件模块能工作了。电视上就能看到让你交费的提示了。。。\n那么，我们让CA卡里的数据终止时间变长点不就好了么？（。。。你要是有那本事，就可以去黑掉人家服务器了，据说里面茶挺好喝，还有免费住房和免费饭。。。）\n\n（。。。废话我写不下去了，直接上干货吧。。。）\n\n**以下为干货**\n<!-- more -->\n\n## 怎么来实现？\n上面说了2点关键的点。就是：\n1. 想法让CA卡里的数据多一些，你能看的节目就多一些。\n2. 想法让CA卡里的数据时间范围长一些，你能看的节目时间就长一些。\n\n> 好了，我们就这2点来动手吧。\n动手？我们动什么手？我们什么手都动不了！\n那扯什么淡！\n别急，我们要的是让广电帮我们动手。\n。。。\n\n第1点，怎么让CA卡里数据多一些？\n\n> 交钱啊！交钱越多就看的越多不是？\n可是我并不想交钱啊！你不是说能不花钱就能看吗？\n。。。\n那好吧，能不能尽量少的交钱？\n嗯，这还能聊下去。\n呵呵，来，说吧，怎么办？\n现在是月底了吧？去广电营业厅把你看的所有电视包全给开了。\n。。。那要花多少钱啊？\n别管，先去开了。开完你就是发现CA卡里的数据条数是多了些？\n额，好像是啊。。。那接下来呢？\n到下个月初再去营业厅，随便找个理由，关掉这些电视包。\n。。。那，好吧。接下来呢？\n接下来？没有接下来了。完事了啊。\n。。。那我开这些电视包，钱花了好多啊。\n你想想，你这个月底开，下个月初去关，能花多少钱？最多一个月的吧？良心点的地方广电还只收这几天的钱，是不是？\n哎，是啊。这么一说还真是。真是良心啊。不过我家那里的广电必须要一次收几年的钱咋办？\n。。。那就狗带吧。。。哦，对了，你在关掉这些电视包之前，还得找一个能够把EMM接收功能关掉的机顶盒，替换你家那“免费送”的机顶盒。\n。。。EMM是什么鬼？还有哪里去找能够关掉这个什么鬼EMM的机顶盒？\nEMM。。。额，你不用知道什么意思了。去找机顶盒，满世界去找嘛。各大BBS，X宝都是宝藏库啊。\n。。。你不能直接给个地儿嘛？？？\n那好吧，你过来，到XXXXXXXXXX（以下省略几百字。。。）\n\n第2点，怎么让卡里的数据时间范围长一些？\n\n> 那我们怎么让CA卡里的数据时间范围长一呢？这样，我就不用下个月底再这样操作了。毕竟操作多了，被营业厅的小妹看破诡计，也不太好嘛\n这个。。。我也没办法。只能看各地广电的懒政程度了。\n。。。你又在耍我。。。\n。。。\n\nThe END.\n","slug":"crack-CAS-for-china-DTV","published":1,"updated":"2016-09-06T08:44:45.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z16w000rfgn929qv8kyk","content":"<h2 id=\"如何实现不用花钱收看广电的电视节目？\"><a href=\"#如何实现不用花钱收看广电的电视节目？\" class=\"headerlink\" title=\"如何实现不用花钱收看广电的电视节目？\"></a>如何实现不用花钱收看广电的电视节目？</h2><p>今天bbs上有人PM我，问我广电盒子不能看电视的问题。看了下他的描述，应该是被广电把授权给取消了。就给他回复了可能的原因和解决方法。<br>翻了下PM纪录，还是一年多前告诉他这种解决方案。想想，还是重新在这儿记录一下吧。如果有人觉得有用就试试，国内大部分地方都能使用这种方案来达到伪crack的目的。如果有广电数字公司的人看到，想办法补下这个bug吧。（不过个人对此表示呵呵哒。。。）对于国内垄断性的行业的官老爷来说，告诉他们这些是然并X的。<br>不过以下说的也只个讨巧的方法，并不是真正的能绕过去，广电想干掉你那是分分钟的事，谁让人垄断呢？</p>\n<h2 id=\"为什么能实现？\"><a href=\"#为什么能实现？\" class=\"headerlink\" title=\"为什么能实现？\"></a>为什么能实现？</h2><p>作为一个理工男，遇到问题，首先问的肯定是为什么？那为什么能实现不用花钱也能“享受”广电的垄断服务呢？<br>首先，我们来看看目前国内广电数字电视收费的基础。一般家庭要看有线电视，会有以下几个场景：</p>\n<ul>\n<li>到广电营业厅交钱开户</li>\n<li>交钱领一个数字电视机顶盒</li>\n<li>拿到一张像信用卡一样的数字电视CA卡</li>\n<li>回家插上机顶盒，插入CA卡</li>\n<li>插上信号线，搜台，看电视。</li>\n</ul>\n<p>目前国内大部分数字电视运营方都是独立成一个叫有钱数字公司来负责信号的播发，费用的收取等，所谓制播分离。我们拿到的CA卡就是由他们从几家CAS集成公司来订购的。有线数字公司的前端播发设备里有很重要的一环—加密节目就是由这些CAS来负责实现的。很简单，把原来从卫星上收取下来的节目（或者是免费或者是加密）的节目，复合一下，再进行加密一下，通过有线播发出来。用户手里的CA卡像手机卡芯片一样，和机顶盒里的软件程序一起（后续可能需要专用硬件）来实现把信号线里的加密信号解密出来，进行播放。这里面涉及很多环节。最重要的就是CA卡里的解密功能。<br>我们给广电交钱看电视，实质是让有线数字公司前端通过向我们手里的CA卡（每张都有一个唯一编号）写入一些数据，以保证这张CA卡能与机顶盒软件模块一起配合解密不同的节目包。给的钱越多（开越多的电视节目包），CA卡里的数据条数就越多，能看的电视节目就越多。所以，关键点就来了。我们只要把手里的CA卡多写入一些数据，不就行了？<br>可是，并没有那么简单。人家CAS厂商为广电想到了，你钱只交到今年春节，难道我还能让你明年也能看到春节晚会？呵呵~~~ 所以CA卡里写入的数据，都会有一个属性，那就是时间范围，即有效起始时间和终止时间。过了这个终止时间，就不能保证CA卡和机顶盒软件模块能工作了。电视上就能看到让你交费的提示了。。。<br>那么，我们让CA卡里的数据终止时间变长点不就好了么？（。。。你要是有那本事，就可以去黑掉人家服务器了，据说里面茶挺好喝，还有免费住房和免费饭。。。）</p>\n<p>（。。。废话我写不下去了，直接上干货吧。。。）</p>\n<p><strong>以下为干货</strong><br><a id=\"more\"></a></p>\n<h2 id=\"怎么来实现？\"><a href=\"#怎么来实现？\" class=\"headerlink\" title=\"怎么来实现？\"></a>怎么来实现？</h2><p>上面说了2点关键的点。就是：</p>\n<ol>\n<li>想法让CA卡里的数据多一些，你能看的节目就多一些。</li>\n<li>想法让CA卡里的数据时间范围长一些，你能看的节目时间就长一些。</li>\n</ol>\n<blockquote>\n<p>好了，我们就这2点来动手吧。<br>动手？我们动什么手？我们什么手都动不了！<br>那扯什么淡！<br>别急，我们要的是让广电帮我们动手。<br>。。。</p>\n</blockquote>\n<p>第1点，怎么让CA卡里数据多一些？</p>\n<blockquote>\n<p>交钱啊！交钱越多就看的越多不是？<br>可是我并不想交钱啊！你不是说能不花钱就能看吗？<br>。。。<br>那好吧，能不能尽量少的交钱？<br>嗯，这还能聊下去。<br>呵呵，来，说吧，怎么办？<br>现在是月底了吧？去广电营业厅把你看的所有电视包全给开了。<br>。。。那要花多少钱啊？<br>别管，先去开了。开完你就是发现CA卡里的数据条数是多了些？<br>额，好像是啊。。。那接下来呢？<br>到下个月初再去营业厅，随便找个理由，关掉这些电视包。<br>。。。那，好吧。接下来呢？<br>接下来？没有接下来了。完事了啊。<br>。。。那我开这些电视包，钱花了好多啊。<br>你想想，你这个月底开，下个月初去关，能花多少钱？最多一个月的吧？良心点的地方广电还只收这几天的钱，是不是？<br>哎，是啊。这么一说还真是。真是良心啊。不过我家那里的广电必须要一次收几年的钱咋办？<br>。。。那就狗带吧。。。哦，对了，你在关掉这些电视包之前，还得找一个能够把EMM接收功能关掉的机顶盒，替换你家那“免费送”的机顶盒。<br>。。。EMM是什么鬼？还有哪里去找能够关掉这个什么鬼EMM的机顶盒？<br>EMM。。。额，你不用知道什么意思了。去找机顶盒，满世界去找嘛。各大BBS，X宝都是宝藏库啊。<br>。。。你不能直接给个地儿嘛？？？<br>那好吧，你过来，到XXXXXXXXXX（以下省略几百字。。。）</p>\n</blockquote>\n<p>第2点，怎么让卡里的数据时间范围长一些？</p>\n<blockquote>\n<p>那我们怎么让CA卡里的数据时间范围长一呢？这样，我就不用下个月底再这样操作了。毕竟操作多了，被营业厅的小妹看破诡计，也不太好嘛<br>这个。。。我也没办法。只能看各地广电的懒政程度了。<br>。。。你又在耍我。。。<br>。。。</p>\n</blockquote>\n<p>The END.</p>\n","excerpt":"<h2 id=\"如何实现不用花钱收看广电的电视节目？\"><a href=\"#如何实现不用花钱收看广电的电视节目？\" class=\"headerlink\" title=\"如何实现不用花钱收看广电的电视节目？\"></a>如何实现不用花钱收看广电的电视节目？</h2><p>今天bbs上有人PM我，问我广电盒子不能看电视的问题。看了下他的描述，应该是被广电把授权给取消了。就给他回复了可能的原因和解决方法。<br>翻了下PM纪录，还是一年多前告诉他这种解决方案。想想，还是重新在这儿记录一下吧。如果有人觉得有用就试试，国内大部分地方都能使用这种方案来达到伪crack的目的。如果有广电数字公司的人看到，想办法补下这个bug吧。（不过个人对此表示呵呵哒。。。）对于国内垄断性的行业的官老爷来说，告诉他们这些是然并X的。<br>不过以下说的也只个讨巧的方法，并不是真正的能绕过去，广电想干掉你那是分分钟的事，谁让人垄断呢？</p>\n<h2 id=\"为什么能实现？\"><a href=\"#为什么能实现？\" class=\"headerlink\" title=\"为什么能实现？\"></a>为什么能实现？</h2><p>作为一个理工男，遇到问题，首先问的肯定是为什么？那为什么能实现不用花钱也能“享受”广电的垄断服务呢？<br>首先，我们来看看目前国内广电数字电视收费的基础。一般家庭要看有线电视，会有以下几个场景：</p>\n<ul>\n<li>到广电营业厅交钱开户</li>\n<li>交钱领一个数字电视机顶盒</li>\n<li>拿到一张像信用卡一样的数字电视CA卡</li>\n<li>回家插上机顶盒，插入CA卡</li>\n<li>插上信号线，搜台，看电视。</li>\n</ul>\n<p>目前国内大部分数字电视运营方都是独立成一个叫有钱数字公司来负责信号的播发，费用的收取等，所谓制播分离。我们拿到的CA卡就是由他们从几家CAS集成公司来订购的。有线数字公司的前端播发设备里有很重要的一环—加密节目就是由这些CAS来负责实现的。很简单，把原来从卫星上收取下来的节目（或者是免费或者是加密）的节目，复合一下，再进行加密一下，通过有线播发出来。用户手里的CA卡像手机卡芯片一样，和机顶盒里的软件程序一起（后续可能需要专用硬件）来实现把信号线里的加密信号解密出来，进行播放。这里面涉及很多环节。最重要的就是CA卡里的解密功能。<br>我们给广电交钱看电视，实质是让有线数字公司前端通过向我们手里的CA卡（每张都有一个唯一编号）写入一些数据，以保证这张CA卡能与机顶盒软件模块一起配合解密不同的节目包。给的钱越多（开越多的电视节目包），CA卡里的数据条数就越多，能看的电视节目就越多。所以，关键点就来了。我们只要把手里的CA卡多写入一些数据，不就行了？<br>可是，并没有那么简单。人家CAS厂商为广电想到了，你钱只交到今年春节，难道我还能让你明年也能看到春节晚会？呵呵~~~ 所以CA卡里写入的数据，都会有一个属性，那就是时间范围，即有效起始时间和终止时间。过了这个终止时间，就不能保证CA卡和机顶盒软件模块能工作了。电视上就能看到让你交费的提示了。。。<br>那么，我们让CA卡里的数据终止时间变长点不就好了么？（。。。你要是有那本事，就可以去黑掉人家服务器了，据说里面茶挺好喝，还有免费住房和免费饭。。。）</p>\n<p>（。。。废话我写不下去了，直接上干货吧。。。）</p>\n<p><strong>以下为干货</strong><br>","more":"</p>\n<h2 id=\"怎么来实现？\"><a href=\"#怎么来实现？\" class=\"headerlink\" title=\"怎么来实现？\"></a>怎么来实现？</h2><p>上面说了2点关键的点。就是：</p>\n<ol>\n<li>想法让CA卡里的数据多一些，你能看的节目就多一些。</li>\n<li>想法让CA卡里的数据时间范围长一些，你能看的节目时间就长一些。</li>\n</ol>\n<blockquote>\n<p>好了，我们就这2点来动手吧。<br>动手？我们动什么手？我们什么手都动不了！<br>那扯什么淡！<br>别急，我们要的是让广电帮我们动手。<br>。。。</p>\n</blockquote>\n<p>第1点，怎么让CA卡里数据多一些？</p>\n<blockquote>\n<p>交钱啊！交钱越多就看的越多不是？<br>可是我并不想交钱啊！你不是说能不花钱就能看吗？<br>。。。<br>那好吧，能不能尽量少的交钱？<br>嗯，这还能聊下去。<br>呵呵，来，说吧，怎么办？<br>现在是月底了吧？去广电营业厅把你看的所有电视包全给开了。<br>。。。那要花多少钱啊？<br>别管，先去开了。开完你就是发现CA卡里的数据条数是多了些？<br>额，好像是啊。。。那接下来呢？<br>到下个月初再去营业厅，随便找个理由，关掉这些电视包。<br>。。。那，好吧。接下来呢？<br>接下来？没有接下来了。完事了啊。<br>。。。那我开这些电视包，钱花了好多啊。<br>你想想，你这个月底开，下个月初去关，能花多少钱？最多一个月的吧？良心点的地方广电还只收这几天的钱，是不是？<br>哎，是啊。这么一说还真是。真是良心啊。不过我家那里的广电必须要一次收几年的钱咋办？<br>。。。那就狗带吧。。。哦，对了，你在关掉这些电视包之前，还得找一个能够把EMM接收功能关掉的机顶盒，替换你家那“免费送”的机顶盒。<br>。。。EMM是什么鬼？还有哪里去找能够关掉这个什么鬼EMM的机顶盒？<br>EMM。。。额，你不用知道什么意思了。去找机顶盒，满世界去找嘛。各大BBS，X宝都是宝藏库啊。<br>。。。你不能直接给个地儿嘛？？？<br>那好吧，你过来，到XXXXXXXXXX（以下省略几百字。。。）</p>\n</blockquote>\n<p>第2点，怎么让卡里的数据时间范围长一些？</p>\n<blockquote>\n<p>那我们怎么让CA卡里的数据时间范围长一呢？这样，我就不用下个月底再这样操作了。毕竟操作多了，被营业厅的小妹看破诡计，也不太好嘛<br>这个。。。我也没办法。只能看各地广电的懒政程度了。<br>。。。你又在耍我。。。<br>。。。</p>\n</blockquote>\n<p>The END.</p>"},{"title":"IPSEC/IKEV2 vpn fo vps","date":"2016-08-11T07:49:44.000Z","_content":"前阵子在VPS上搭了个IPSEC的vpn服务器，主要用于没越狱的iOS8上。简单记录一下过程。\n主要有牛人已经做好脚本了，我几乎只需要照着步骤，一路按回车就行。\n前人的blog在[这儿](https://quericy.me/blog/699/)，Github的脚本页面在[这儿](https://github.com/quericy/one-key-ikev2-vpn)。\n\nSSH连接到VPS上，直接wget下来脚本，修改下权限，执行脚本，按着提示一路回车就OK。\n> wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh\n\n```shell\nchmod +x one-key-ikev2.sh\n./one-key-ikev2.sh\n```\n\n**注意项：**\n1. 在执行脚本的时候，要注意，选对自己VPS的架构，不然就哦哦了。\n2. 安装完，记得把启动命令`/usr/local/sbin/ipsec start`加入到系统启动脚本(/etc/rc.local)里。\n3. 安装完，如果不想用默认的密码，可以修改`/usr/local/etc/ipsec.secrets`文件中的密码。形如\n```shell\nroot@localhost:~# cat /usr/local/etc/ipsec.secrets\n: RSA server.pem\n: PSK \"IPSECXXXX\"\n: XAUTH \"IPSECXXXX\"\nguest : EAP \"pwd4guest\"\nmyboss : EAP \"bigboss\"\n```\n4. 如果不需要了，卸载要在脚本下载下来并解压的`strongswan-5.3.5`目录里直接`make uninstall`即可。\n","source":"_posts/IPSEC-IKEV2-vpn-fo-vps.md","raw":"---\ntitle: IPSEC/IKEV2 vpn fo vps\ndate: 2016-08-11 15:49:44\ncategories:\n - study\ntags:\n - vpn\n - vps\n---\n前阵子在VPS上搭了个IPSEC的vpn服务器，主要用于没越狱的iOS8上。简单记录一下过程。\n主要有牛人已经做好脚本了，我几乎只需要照着步骤，一路按回车就行。\n前人的blog在[这儿](https://quericy.me/blog/699/)，Github的脚本页面在[这儿](https://github.com/quericy/one-key-ikev2-vpn)。\n\nSSH连接到VPS上，直接wget下来脚本，修改下权限，执行脚本，按着提示一路回车就OK。\n> wget --no-check-certificate https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh\n\n```shell\nchmod +x one-key-ikev2.sh\n./one-key-ikev2.sh\n```\n\n**注意项：**\n1. 在执行脚本的时候，要注意，选对自己VPS的架构，不然就哦哦了。\n2. 安装完，记得把启动命令`/usr/local/sbin/ipsec start`加入到系统启动脚本(/etc/rc.local)里。\n3. 安装完，如果不想用默认的密码，可以修改`/usr/local/etc/ipsec.secrets`文件中的密码。形如\n```shell\nroot@localhost:~# cat /usr/local/etc/ipsec.secrets\n: RSA server.pem\n: PSK \"IPSECXXXX\"\n: XAUTH \"IPSECXXXX\"\nguest : EAP \"pwd4guest\"\nmyboss : EAP \"bigboss\"\n```\n4. 如果不需要了，卸载要在脚本下载下来并解压的`strongswan-5.3.5`目录里直接`make uninstall`即可。\n","slug":"IPSEC-IKEV2-vpn-fo-vps","published":1,"updated":"2016-09-06T08:44:44.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z171000tfgn9lq11k615","content":"<p>前阵子在VPS上搭了个IPSEC的vpn服务器，主要用于没越狱的iOS8上。简单记录一下过程。<br>主要有牛人已经做好脚本了，我几乎只需要照着步骤，一路按回车就行。<br>前人的blog在<a href=\"https://quericy.me/blog/699/\" target=\"_blank\" rel=\"external\">这儿</a>，Github的脚本页面在<a href=\"https://github.com/quericy/one-key-ikev2-vpn\" target=\"_blank\" rel=\"external\">这儿</a>。</p>\n<p>SSH连接到VPS上，直接wget下来脚本，修改下权限，执行脚本，按着提示一路回车就OK。</p>\n<blockquote>\n<p>wget –no-check-certificate <a href=\"https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh\" target=\"_blank\" rel=\"external\">https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x one-key-ikev2.sh</div><div class=\"line\">./one-key-ikev2.sh</div></pre></td></tr></table></figure>\n<p><strong>注意项：</strong></p>\n<ol>\n<li>在执行脚本的时候，要注意，选对自己VPS的架构，不然就哦哦了。</li>\n<li>安装完，记得把启动命令<code>/usr/local/sbin/ipsec start</code>加入到系统启动脚本(/etc/rc.local)里。</li>\n<li><p>安装完，如果不想用默认的密码，可以修改<code>/usr/local/etc/ipsec.secrets</code>文件中的密码。形如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@localhost:~# cat /usr/local/etc/ipsec.secrets</div><div class=\"line\">: RSA server.pem</div><div class=\"line\">: PSK &quot;IPSECXXXX&quot;</div><div class=\"line\">: XAUTH &quot;IPSECXXXX&quot;</div><div class=\"line\">guest : EAP &quot;pwd4guest&quot;</div><div class=\"line\">myboss : EAP &quot;bigboss&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果不需要了，卸载要在脚本下载下来并解压的<code>strongswan-5.3.5</code>目录里直接<code>make uninstall</code>即可。</p>\n</li>\n</ol>\n","excerpt":"","more":"<p>前阵子在VPS上搭了个IPSEC的vpn服务器，主要用于没越狱的iOS8上。简单记录一下过程。<br>主要有牛人已经做好脚本了，我几乎只需要照着步骤，一路按回车就行。<br>前人的blog在<a href=\"https://quericy.me/blog/699/\">这儿</a>，Github的脚本页面在<a href=\"https://github.com/quericy/one-key-ikev2-vpn\">这儿</a>。</p>\n<p>SSH连接到VPS上，直接wget下来脚本，修改下权限，执行脚本，按着提示一路回车就OK。</p>\n<blockquote>\n<p>wget –no-check-certificate <a href=\"https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh\">https://raw.githubusercontent.com/quericy/one-key-ikev2-vpn/master/one-key-ikev2.sh</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">chmod +x one-key-ikev2.sh</div><div class=\"line\">./one-key-ikev2.sh</div></pre></td></tr></table></figure>\n<p><strong>注意项：</strong></p>\n<ol>\n<li>在执行脚本的时候，要注意，选对自己VPS的架构，不然就哦哦了。</li>\n<li>安装完，记得把启动命令<code>/usr/local/sbin/ipsec start</code>加入到系统启动脚本(/etc/rc.local)里。</li>\n<li><p>安装完，如果不想用默认的密码，可以修改<code>/usr/local/etc/ipsec.secrets</code>文件中的密码。形如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">root@localhost:~# cat /usr/local/etc/ipsec.secrets</div><div class=\"line\">: RSA server.pem</div><div class=\"line\">: PSK &quot;IPSECXXXX&quot;</div><div class=\"line\">: XAUTH &quot;IPSECXXXX&quot;</div><div class=\"line\">guest : EAP &quot;pwd4guest&quot;</div><div class=\"line\">myboss : EAP &quot;bigboss&quot;</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果不需要了，卸载要在脚本下载下来并解压的<code>strongswan-5.3.5</code>目录里直接<code>make uninstall</code>即可。</p>\n</li>\n</ol>\n"},{"title":"Markdown编辑器","date":"2015-05-15T02:54:11.000Z","_content":"学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用[markdownpad](http://markdownpad.com/),方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？\n我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此[链接](http://code.csdn.net/news/2819623)。\n","source":"_posts/Markdown编辑器.md","raw":"title: \"Markdown编辑器\"\ndate: 2015-05-15 10:54:11\ncategories:\n - study\ntags:\n - Markdown\n---\n学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用[markdownpad](http://markdownpad.com/),方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？\n我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此[链接](http://code.csdn.net/news/2819623)。\n","slug":"Markdown编辑器","published":1,"updated":"2016-09-06T08:44:45.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z17e000xfgn96seax9ok","content":"<p>学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用<a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external\">markdownpad</a>,方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？<br>我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此<a href=\"http://code.csdn.net/news/2819623\" target=\"_blank\" rel=\"external\">链接</a>。</p>\n","excerpt":"","more":"<p>学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用<a href=\"http://markdownpad.com/\">markdownpad</a>,方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？<br>我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此<a href=\"http://code.csdn.net/news/2819623\">链接</a>。</p>\n"},{"title":"docker命令状态机","date":"2016-07-28T06:44:51.000Z","_content":"看完[Docker实战](https://yeasy.gitbooks.io/docker_practice)这本书，感觉印象最深的是下面这张图。docker的各种命令之间切换的状态机转换示意图。\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f69mec6nyhj20fk0cp0ua.jpg)\n","source":"_posts/docker命令状态机.md","raw":"---\ntitle: docker命令状态机\ndate: 2016-07-28 14:44:51\ncategories:\n - study\ntags:\n - Docker\n---\n看完[Docker实战](https://yeasy.gitbooks.io/docker_practice)这本书，感觉印象最深的是下面这张图。docker的各种命令之间切换的状态机转换示意图。\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f69mec6nyhj20fk0cp0ua.jpg)\n","slug":"docker命令状态机","published":1,"updated":"2016-09-06T08:44:45.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z17q000zfgn9i0jf9die","content":"<p>看完<a href=\"https://yeasy.gitbooks.io/docker_practice\" target=\"_blank\" rel=\"external\">Docker实战</a>这本书，感觉印象最深的是下面这张图。docker的各种命令之间切换的状态机转换示意图。<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f69mec6nyhj20fk0cp0ua.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>看完<a href=\"https://yeasy.gitbooks.io/docker_practice\">Docker实战</a>这本书，感觉印象最深的是下面这张图。docker的各种命令之间切换的状态机转换示意图。<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f69mec6nyhj20fk0cp0ua.jpg\" alt=\"\"></p>\n"},{"title":"etcd@CoreOS","date":"2016-07-27T10:59:09.000Z","_content":"\n## 前言\n在前面**{% post_link CoreOS CoreOS介绍 %}**的介绍文章中，提到了CoreOS的核心etcd模块。这次就主要讲下etcd模块的核心Raft共识算法，这也是etcd模块提供的集群化的原理。\n\n## etcd\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f66dbq241nj20hq0dbwfa.jpg)\n> **在CoreOS 集群中处于骨架地位的是etcd。**etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。\n\n<!-- more -->\n\n一个 etcd 节点的核心由三部分组成：\n+ Raft：Raft 状态机是对 Raft 共识算法的实现\n+ WAL：Raft 日志存储\n+ Storage：数据的存储与索引\n\n> WAL (Write-ahead logging)，是用于向系统提供原子性和持久性的一系列技术。在使用 WAL 的系提供中，所有的修改在提交之前都要先写入 log 文件中。etcd 的 WAL 由日志存储与快照存储两部分组成，其中 Entry 负责存储具体日志的内容，而 Snapshot 负责在日志内容发生变化的时候保存 Raft 的状态。WAL 会在本地磁盘的一个指定目录下分别日志条目与快照内容。\n\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118058.png)\n\n## Raft算法\netcd基于[Raft共识算法](https://Raft.github.io/)，Github上有**[中文译版](https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md)**。\n同时，这里有2篇文章很简易的解释了Raft算法中选举出leader的原理。\n [《CoreOS实战：剖析etcd》](http://www.infoq.com/cn/articles/coreos-analyse-etcd) \n [《Raft为什么是更易理解的分布式一致性算法》](http://www.cnblogs.com/mindwind/p/5231986.html)\n\n*`注：曾经在用mqtt协议设计智能家居本地网络和云端网络时，为这个网络集群的同步一致性问题搞得迷乱不已，现在看到这个，真是拔云见日般清爽啊。`*\n\n\n> Raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。\n\n### Raft状态机\n> Raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换：follower, candidate 与 leader。leader 向 follower 同步日志，follower 只从 leader 处获取日志。在节点初始启动时，节点的 Raft 状态机将处于 follower 状态并被设定一个 election timeout，如果在这一时间周期内没有收到来自 leader 的 heartbeat，节点将发起选举：节点在将自己的状态切换为 candidate 之后，向集群中其它 follower 节点发送请求，询问其是否选举自己成为 leader。当收到来自集群中过半数节点的接受投票后，节点即成为 leader，开始接收保存 client 的数据并向其它的 follower 节点同步日志。leader 节点依靠定时向 follower 发送 heartbeat 来保持其地位。任何时候如果其它 follower 在 election timeout 期间都没有收到来自 leader 的 heartbeat，同样会将自己的状态切换为 candidate 并发起选举。每成功选举一次，新 leader 的步进数都会比之前 leader 的步进数大1。\n\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118010.png)\n\n### Raft选举leader\n一个 candidate 成为 leader 需要具备三个要素：\n+ 获得集群多数节点的同意。\n+ 集群中不存在比自己步进数更高的 candidate。\n+ 集群中不存在其他 leader。\n\n#### 选举过程\n1. 初始状态下集群中的所有节点都处于 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118011.png)\n2. 某一时刻，其中的一个 follower 由于没有收到 leader 的 heartbeat 率先发生 election timeout 进而发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118012.png)\n3. 只要集群中超过半数的节点接受投票，candidate 节点将成为即切换 leader 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118013.png)\n4.  成为 leader 节点之后，leader 将定时向 follower 节点同步日志并发送 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118014.png)\n\n### Raft节点异常\n集群中各个节点的状态随时都有可能发生变化。节点的异常大致可以分为四种类型：\n+ leader 不可用。\n+ follower 不可用。\n+ 多个 candidate 或多个 leader。\n+ 新节点加入集群。\n\n#### leader不可用\n1. 一般情况下，leader 节点定时发送 heartbeat 到 follower 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118015.png)\n2. 由于某些异常导致 leader 不再发送 heartbeat ，或 follower 无法收到 heartbeat 。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118016.png)\n3. 当某一 follower 发生 election timeout 时，其状态变更为 candidate，并向其他 follower 发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118017.png)\n4. 当超过半数的 follower 接受投票后，这一节点将成为新的 leader，leader 的步进数加1并开始向 follower 同步日志。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118018.png)\n5. 当一段时间之后，如果之前的 leader 再次加入集群，则两个 leader 比较彼此的步进数，步进数低的 leader 将切换自己的状态为 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118019.png)\n6. 较早前 leader 中不一致的日志将被清除，并与现有 leader 中的日志保持一致。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118020.png)\n\n#### follower 节点不可用\nfollower 节点不可用的情况相对容易解决。因为集群中的日志内容始终是从 leader 节点同步的，只要这一节点再次加入集群时重新从 leader 节点处复制日志即可。\n1. 集群中的某个 follower 节点发生异常，不再同步日志以及接收 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118021.png)\n2. 经过一段时间之后，原来的 follower 节点重新加入集群。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118022.png)\n3. 这一节点的日志将从当时的 leader 处同步。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118023.png)\n\n#### 多个 candidate 或多个 leader\n在集群中出现多个 candidate 或多个 leader 通常是由于数据传输不畅造成的。出现多个 leader 的情况相对少见，但多个 candidate 比较容易出现在集群节点启动初期尚未选出 leader 的“混沌”时期。\n1. 初始状态下集群中的所有节点都处于 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118024.png)\n2. 两个节点同时成为 candidate 发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118025.png)\n3. 两个 candidate 都只得到了少部分 follower 的接受投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118026.png)\n4. candidate 继续向其他的 follower 询问。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118027.png)\n5. 由于一些 follower 已经投过票了，所以均返回拒绝接受。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118028.png)\n6. candidate 也可能向一个 candidate 询问投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118029.png)\n7. 在步进数相同的情况下，candidate 将拒绝接受另一个 candidate 的请求。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118030.png)\n8. 由于第一次未选出 leader，candidate 将随机选择一个等待间隔（150ms ~ 300ms）再次发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118031.png)\n9. 如果得到集群中半数以上的 follower 的接受，这一 candidate 将成为 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118032.png)\n10. 稍后另一个 candidate 也将再次发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118033.png)\n11. 由于集群中已经选出 leader，candidate 将收到拒绝接受的投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118034.png)\n12. 在被多数节点拒绝之后，并已知集群中已存在 leader 后，这一 candidate 节点将终止投票请求，切换为 follower，从 leader 节点同步日志。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118035.png)\n\n### 日志\n\n#### 复制\n在 Raft 集群中，所有日志都必须首先提交至 leader 节点。leader 在每个 heartbeat 向 follower 同步日志，follower 在收到日志之后向 leader 反馈结果，leader 在确认日志内容正确之后将此条目提交并存储于本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118036.png)\n1. 首先有一条 uncommitted 的日志条目提交至 leader 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118037.png)\n2. 在下一个 heartbeat，leader 将此条目复制给所有的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118038.png)\n3. 当大多数节点记录此条目之后，leader 节点认定此条目有效，将此条目设定为已提交并存储于本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118039.png)\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118040.png)\n4. 在下一个 heartbeat，leader 通知所有 follower 提交这一日志条目并存储于各自的磁盘内。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118041.png)\n\n#### 容错\n如果由于网络的隔断，造成集群中多数的节点在一段时间内无法访问到 leader 节点。按照 raft 共识算法，没有 leader 的那一组集群将会通过选举投票出新的 leader，甚至会在两个集群内产生不一致的日志条目。在集群重新完整连通之后，原来的 leader 仍会按照 raft 共识算法从步进数更高的 leader 同步日志并将自己切换为 follower。\n通过这种方式，只要集群中有效连接的节点超过总数的一半，集群将一直以这种规则运行下去并始终确保各个节点中的数据始终一致。\n1. 集群的理想状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118042.png)\n2. 网络间隔造成大多数的节点无法访问 leader 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118043.png)\n3. 新的日志条目添加到 leader 中。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118044.png)\n4. leader 节点将此条日志同步至能够访问到 leader 的节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118045.png)\n5. follower 确认日志被记录，但是确认记录日志的 follower 数量没有超过集群节点的半数，leader 节点并不将此条日志存档。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118046.png)\n6. 在被隔断的这部分节点，在 election timeout 之后，followers 中产生 candidate 并发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118047.png)\n7. 多数节点接受投票之后，candidate 成为 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118048.png)\n8. 一个日志条目被添加到新的 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118049.png)\n9. 日志被复制给新 leader 的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118050.png)\n10. 多数节点确认之后，leader 将日志条目提交并存储。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118051.png)\n11. 在下一个 heartbeat，leader 通知 follower 各自提交并保存在本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118052.png)\n12. 经过一段时间之后，集群重新连通到一起，集群中出现两个 leader 并且存在不一致的日志条目。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118053.png)\n13. 新的 leader 在下一次 heartbeat timeout 时向所有的节点发送一次 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118054.png)\n14. #1 leader 在收到步进数更高的 #2 leader heartbeat 时放弃 leader 地位并切换到 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118055.png)\n15. 节点中所有未存档的日志条目都将被丢弃。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118056.png)\n16. 未被复制的日志条目将会被同步给所有的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118057.png)\n\n\n## 实现\n\n### clients\n在默认设定下，etcd 通过主机的 2379 端口向 Client 提供服务。每个主机上的应用程序都可以通过主机的 2379 以 HTTP + JSON 的方式向 etcd 读写数据。写入的数据会由 etcd 同步到集群的其它节点中。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118059.png)\n\n### peers\n在默认设定下，etcd 通过主机的 2380 端口在各个节点中同步 Raft 状态及数据。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118060.png)\n\n### create\n从方法上来划分，创建 etcd 集群的方式分为两种：Static （通过制定 peers 的 IP 和端口创建）与 Discovery （通过一个发现服务创建）。\nStatic 方式需要预先知道集群所有节点的 IP，所以适合小规模的集群或者搭建一个临时的开发与测试环境。\nDiscovery 方式不需要预先了解其他节点的 IP。启动时 etcd 通过访问一个 Discovery URL 来注册自己并获取其他节点的信息。这种方式通常适合将 etcd 部署在某个云服务平台或是一个 DHCP 环境中。其中 Discovery 服务可以使用 CoreOS 提供的一个公共地址 https://discovery.etcd.io/new 来申请一个 token，或者自己搭建一个这样的服务并设定一个 token。出于安全的考虑，这个 token 应该只在集群初始引导时短暂存在，因为集群建立之后将不再需要这一地址，而集群中节点的变更可以通过 etcd 运行时重构的能力来进行配置。\n\n### run\nTODO:\n\n\n\n## 参考文献 \n[CoreOS实战：剖析etcd](http://www.infoq.com/cn/articles/coreos-analyse-etcd)\n[Raft 为什么是更易理解的分布式一致性算法](http://www.cnblogs.com/mindwind/p/5231986.html)\n[Raft算法](https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md)\n[CoreOS实战系列](http://www.infoq.com/cn/CoreOSAction)\n[https://coreos.com/blog/new-functional-testing-in-etcd/](https://coreos.com/blog/new-functional-testing-in-etcd/)\n","source":"_posts/etcd-CoreOS.md","raw":"---\ntitle: etcd@CoreOS\ndate: 2016-07-27 18:59:09\ncategories:\n - study\ntags:\n - CoreOS\n - etcd\n---\n\n## 前言\n在前面**{% post_link CoreOS CoreOS介绍 %}**的介绍文章中，提到了CoreOS的核心etcd模块。这次就主要讲下etcd模块的核心Raft共识算法，这也是etcd模块提供的集群化的原理。\n\n## etcd\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f66dbq241nj20hq0dbwfa.jpg)\n> **在CoreOS 集群中处于骨架地位的是etcd。**etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。\n\n<!-- more -->\n\n一个 etcd 节点的核心由三部分组成：\n+ Raft：Raft 状态机是对 Raft 共识算法的实现\n+ WAL：Raft 日志存储\n+ Storage：数据的存储与索引\n\n> WAL (Write-ahead logging)，是用于向系统提供原子性和持久性的一系列技术。在使用 WAL 的系提供中，所有的修改在提交之前都要先写入 log 文件中。etcd 的 WAL 由日志存储与快照存储两部分组成，其中 Entry 负责存储具体日志的内容，而 Snapshot 负责在日志内容发生变化的时候保存 Raft 的状态。WAL 会在本地磁盘的一个指定目录下分别日志条目与快照内容。\n\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118058.png)\n\n## Raft算法\netcd基于[Raft共识算法](https://Raft.github.io/)，Github上有**[中文译版](https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md)**。\n同时，这里有2篇文章很简易的解释了Raft算法中选举出leader的原理。\n [《CoreOS实战：剖析etcd》](http://www.infoq.com/cn/articles/coreos-analyse-etcd) \n [《Raft为什么是更易理解的分布式一致性算法》](http://www.cnblogs.com/mindwind/p/5231986.html)\n\n*`注：曾经在用mqtt协议设计智能家居本地网络和云端网络时，为这个网络集群的同步一致性问题搞得迷乱不已，现在看到这个，真是拔云见日般清爽啊。`*\n\n\n> Raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。\n\n### Raft状态机\n> Raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换：follower, candidate 与 leader。leader 向 follower 同步日志，follower 只从 leader 处获取日志。在节点初始启动时，节点的 Raft 状态机将处于 follower 状态并被设定一个 election timeout，如果在这一时间周期内没有收到来自 leader 的 heartbeat，节点将发起选举：节点在将自己的状态切换为 candidate 之后，向集群中其它 follower 节点发送请求，询问其是否选举自己成为 leader。当收到来自集群中过半数节点的接受投票后，节点即成为 leader，开始接收保存 client 的数据并向其它的 follower 节点同步日志。leader 节点依靠定时向 follower 发送 heartbeat 来保持其地位。任何时候如果其它 follower 在 election timeout 期间都没有收到来自 leader 的 heartbeat，同样会将自己的状态切换为 candidate 并发起选举。每成功选举一次，新 leader 的步进数都会比之前 leader 的步进数大1。\n\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118010.png)\n\n### Raft选举leader\n一个 candidate 成为 leader 需要具备三个要素：\n+ 获得集群多数节点的同意。\n+ 集群中不存在比自己步进数更高的 candidate。\n+ 集群中不存在其他 leader。\n\n#### 选举过程\n1. 初始状态下集群中的所有节点都处于 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118011.png)\n2. 某一时刻，其中的一个 follower 由于没有收到 leader 的 heartbeat 率先发生 election timeout 进而发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118012.png)\n3. 只要集群中超过半数的节点接受投票，candidate 节点将成为即切换 leader 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118013.png)\n4.  成为 leader 节点之后，leader 将定时向 follower 节点同步日志并发送 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118014.png)\n\n### Raft节点异常\n集群中各个节点的状态随时都有可能发生变化。节点的异常大致可以分为四种类型：\n+ leader 不可用。\n+ follower 不可用。\n+ 多个 candidate 或多个 leader。\n+ 新节点加入集群。\n\n#### leader不可用\n1. 一般情况下，leader 节点定时发送 heartbeat 到 follower 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118015.png)\n2. 由于某些异常导致 leader 不再发送 heartbeat ，或 follower 无法收到 heartbeat 。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118016.png)\n3. 当某一 follower 发生 election timeout 时，其状态变更为 candidate，并向其他 follower 发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118017.png)\n4. 当超过半数的 follower 接受投票后，这一节点将成为新的 leader，leader 的步进数加1并开始向 follower 同步日志。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118018.png)\n5. 当一段时间之后，如果之前的 leader 再次加入集群，则两个 leader 比较彼此的步进数，步进数低的 leader 将切换自己的状态为 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118019.png)\n6. 较早前 leader 中不一致的日志将被清除，并与现有 leader 中的日志保持一致。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118020.png)\n\n#### follower 节点不可用\nfollower 节点不可用的情况相对容易解决。因为集群中的日志内容始终是从 leader 节点同步的，只要这一节点再次加入集群时重新从 leader 节点处复制日志即可。\n1. 集群中的某个 follower 节点发生异常，不再同步日志以及接收 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118021.png)\n2. 经过一段时间之后，原来的 follower 节点重新加入集群。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118022.png)\n3. 这一节点的日志将从当时的 leader 处同步。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118023.png)\n\n#### 多个 candidate 或多个 leader\n在集群中出现多个 candidate 或多个 leader 通常是由于数据传输不畅造成的。出现多个 leader 的情况相对少见，但多个 candidate 比较容易出现在集群节点启动初期尚未选出 leader 的“混沌”时期。\n1. 初始状态下集群中的所有节点都处于 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118024.png)\n2. 两个节点同时成为 candidate 发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118025.png)\n3. 两个 candidate 都只得到了少部分 follower 的接受投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118026.png)\n4. candidate 继续向其他的 follower 询问。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118027.png)\n5. 由于一些 follower 已经投过票了，所以均返回拒绝接受。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118028.png)\n6. candidate 也可能向一个 candidate 询问投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118029.png)\n7. 在步进数相同的情况下，candidate 将拒绝接受另一个 candidate 的请求。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118030.png)\n8. 由于第一次未选出 leader，candidate 将随机选择一个等待间隔（150ms ~ 300ms）再次发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118031.png)\n9. 如果得到集群中半数以上的 follower 的接受，这一 candidate 将成为 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118032.png)\n10. 稍后另一个 candidate 也将再次发起投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118033.png)\n11. 由于集群中已经选出 leader，candidate 将收到拒绝接受的投票。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118034.png)\n12. 在被多数节点拒绝之后，并已知集群中已存在 leader 后，这一 candidate 节点将终止投票请求，切换为 follower，从 leader 节点同步日志。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118035.png)\n\n### 日志\n\n#### 复制\n在 Raft 集群中，所有日志都必须首先提交至 leader 节点。leader 在每个 heartbeat 向 follower 同步日志，follower 在收到日志之后向 leader 反馈结果，leader 在确认日志内容正确之后将此条目提交并存储于本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118036.png)\n1. 首先有一条 uncommitted 的日志条目提交至 leader 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118037.png)\n2. 在下一个 heartbeat，leader 将此条目复制给所有的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118038.png)\n3. 当大多数节点记录此条目之后，leader 节点认定此条目有效，将此条目设定为已提交并存储于本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118039.png)\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118040.png)\n4. 在下一个 heartbeat，leader 通知所有 follower 提交这一日志条目并存储于各自的磁盘内。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118041.png)\n\n#### 容错\n如果由于网络的隔断，造成集群中多数的节点在一段时间内无法访问到 leader 节点。按照 raft 共识算法，没有 leader 的那一组集群将会通过选举投票出新的 leader，甚至会在两个集群内产生不一致的日志条目。在集群重新完整连通之后，原来的 leader 仍会按照 raft 共识算法从步进数更高的 leader 同步日志并将自己切换为 follower。\n通过这种方式，只要集群中有效连接的节点超过总数的一半，集群将一直以这种规则运行下去并始终确保各个节点中的数据始终一致。\n1. 集群的理想状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118042.png)\n2. 网络间隔造成大多数的节点无法访问 leader 节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118043.png)\n3. 新的日志条目添加到 leader 中。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118044.png)\n4. leader 节点将此条日志同步至能够访问到 leader 的节点。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118045.png)\n5. follower 确认日志被记录，但是确认记录日志的 follower 数量没有超过集群节点的半数，leader 节点并不将此条日志存档。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118046.png)\n6. 在被隔断的这部分节点，在 election timeout 之后，followers 中产生 candidate 并发起选举。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118047.png)\n7. 多数节点接受投票之后，candidate 成为 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118048.png)\n8. 一个日志条目被添加到新的 leader。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118049.png)\n9. 日志被复制给新 leader 的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118050.png)\n10. 多数节点确认之后，leader 将日志条目提交并存储。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118051.png)\n11. 在下一个 heartbeat，leader 通知 follower 各自提交并保存在本地磁盘。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118052.png)\n12. 经过一段时间之后，集群重新连通到一起，集群中出现两个 leader 并且存在不一致的日志条目。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118053.png)\n13. 新的 leader 在下一次 heartbeat timeout 时向所有的节点发送一次 heartbeat。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118054.png)\n14. #1 leader 在收到步进数更高的 #2 leader heartbeat 时放弃 leader 地位并切换到 follower 状态。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118055.png)\n15. 节点中所有未存档的日志条目都将被丢弃。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118056.png)\n16. 未被复制的日志条目将会被同步给所有的 follower。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118057.png)\n\n\n## 实现\n\n### clients\n在默认设定下，etcd 通过主机的 2379 端口向 Client 提供服务。每个主机上的应用程序都可以通过主机的 2379 以 HTTP + JSON 的方式向 etcd 读写数据。写入的数据会由 etcd 同步到集群的其它节点中。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118059.png)\n\n### peers\n在默认设定下，etcd 通过主机的 2380 端口在各个节点中同步 Raft 状态及数据。\n![](http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118060.png)\n\n### create\n从方法上来划分，创建 etcd 集群的方式分为两种：Static （通过制定 peers 的 IP 和端口创建）与 Discovery （通过一个发现服务创建）。\nStatic 方式需要预先知道集群所有节点的 IP，所以适合小规模的集群或者搭建一个临时的开发与测试环境。\nDiscovery 方式不需要预先了解其他节点的 IP。启动时 etcd 通过访问一个 Discovery URL 来注册自己并获取其他节点的信息。这种方式通常适合将 etcd 部署在某个云服务平台或是一个 DHCP 环境中。其中 Discovery 服务可以使用 CoreOS 提供的一个公共地址 https://discovery.etcd.io/new 来申请一个 token，或者自己搭建一个这样的服务并设定一个 token。出于安全的考虑，这个 token 应该只在集群初始引导时短暂存在，因为集群建立之后将不再需要这一地址，而集群中节点的变更可以通过 etcd 运行时重构的能力来进行配置。\n\n### run\nTODO:\n\n\n\n## 参考文献 \n[CoreOS实战：剖析etcd](http://www.infoq.com/cn/articles/coreos-analyse-etcd)\n[Raft 为什么是更易理解的分布式一致性算法](http://www.cnblogs.com/mindwind/p/5231986.html)\n[Raft算法](https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md)\n[CoreOS实战系列](http://www.infoq.com/cn/CoreOSAction)\n[https://coreos.com/blog/new-functional-testing-in-etcd/](https://coreos.com/blog/new-functional-testing-in-etcd/)\n","slug":"etcd-CoreOS","published":1,"updated":"2016-09-06T08:44:45.005Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z17w0012fgn9qjqq6uu1","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在前面<strong><a href=\"/2016/07/26/CoreOS/\" title=\"CoreOS介绍\">CoreOS介绍</a></strong>的介绍文章中，提到了CoreOS的核心etcd模块。这次就主要讲下etcd模块的核心Raft共识算法，这也是etcd模块提供的集群化的原理。</p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f66dbq241nj20hq0dbwfa.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>在CoreOS 集群中处于骨架地位的是etcd。</strong>etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>一个 etcd 节点的核心由三部分组成：</p>\n<ul>\n<li>Raft：Raft 状态机是对 Raft 共识算法的实现</li>\n<li>WAL：Raft 日志存储</li>\n<li>Storage：数据的存储与索引</li>\n</ul>\n<blockquote>\n<p>WAL (Write-ahead logging)，是用于向系统提供原子性和持久性的一系列技术。在使用 WAL 的系提供中，所有的修改在提交之前都要先写入 log 文件中。etcd 的 WAL 由日志存储与快照存储两部分组成，其中 Entry 负责存储具体日志的内容，而 Snapshot 负责在日志内容发生变化的时候保存 Raft 的状态。WAL 会在本地磁盘的一个指定目录下分别日志条目与快照内容。</p>\n</blockquote>\n<p><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118058.png\" alt=\"\"></p>\n<h2 id=\"Raft算法\"><a href=\"#Raft算法\" class=\"headerlink\" title=\"Raft算法\"></a>Raft算法</h2><p>etcd基于<a href=\"https://Raft.github.io/\" target=\"_blank\" rel=\"external\">Raft共识算法</a>，Github上有<strong><a href=\"https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md\" target=\"_blank\" rel=\"external\">中文译版</a></strong>。<br>同时，这里有2篇文章很简易的解释了Raft算法中选举出leader的原理。<br> <a href=\"http://www.infoq.com/cn/articles/coreos-analyse-etcd\" target=\"_blank\" rel=\"external\">《CoreOS实战：剖析etcd》</a><br> <a href=\"http://www.cnblogs.com/mindwind/p/5231986.html\" target=\"_blank\" rel=\"external\">《Raft为什么是更易理解的分布式一致性算法》</a></p>\n<p><em><code>注：曾经在用mqtt协议设计智能家居本地网络和云端网络时，为这个网络集群的同步一致性问题搞得迷乱不已，现在看到这个，真是拔云见日般清爽啊。</code></em></p>\n<blockquote>\n<p>Raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</p>\n</blockquote>\n<h3 id=\"Raft状态机\"><a href=\"#Raft状态机\" class=\"headerlink\" title=\"Raft状态机\"></a>Raft状态机</h3><blockquote>\n<p>Raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换：follower, candidate 与 leader。leader 向 follower 同步日志，follower 只从 leader 处获取日志。在节点初始启动时，节点的 Raft 状态机将处于 follower 状态并被设定一个 election timeout，如果在这一时间周期内没有收到来自 leader 的 heartbeat，节点将发起选举：节点在将自己的状态切换为 candidate 之后，向集群中其它 follower 节点发送请求，询问其是否选举自己成为 leader。当收到来自集群中过半数节点的接受投票后，节点即成为 leader，开始接收保存 client 的数据并向其它的 follower 节点同步日志。leader 节点依靠定时向 follower 发送 heartbeat 来保持其地位。任何时候如果其它 follower 在 election timeout 期间都没有收到来自 leader 的 heartbeat，同样会将自己的状态切换为 candidate 并发起选举。每成功选举一次，新 leader 的步进数都会比之前 leader 的步进数大1。</p>\n</blockquote>\n<p><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118010.png\" alt=\"\"></p>\n<h3 id=\"Raft选举leader\"><a href=\"#Raft选举leader\" class=\"headerlink\" title=\"Raft选举leader\"></a>Raft选举leader</h3><p>一个 candidate 成为 leader 需要具备三个要素：</p>\n<ul>\n<li>获得集群多数节点的同意。</li>\n<li>集群中不存在比自己步进数更高的 candidate。</li>\n<li>集群中不存在其他 leader。</li>\n</ul>\n<h4 id=\"选举过程\"><a href=\"#选举过程\" class=\"headerlink\" title=\"选举过程\"></a>选举过程</h4><ol>\n<li>初始状态下集群中的所有节点都处于 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118011.png\" alt=\"\"></li>\n<li>某一时刻，其中的一个 follower 由于没有收到 leader 的 heartbeat 率先发生 election timeout 进而发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118012.png\" alt=\"\"></li>\n<li>只要集群中超过半数的节点接受投票，candidate 节点将成为即切换 leader 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118013.png\" alt=\"\"></li>\n<li>成为 leader 节点之后，leader 将定时向 follower 节点同步日志并发送 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118014.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"Raft节点异常\"><a href=\"#Raft节点异常\" class=\"headerlink\" title=\"Raft节点异常\"></a>Raft节点异常</h3><p>集群中各个节点的状态随时都有可能发生变化。节点的异常大致可以分为四种类型：</p>\n<ul>\n<li>leader 不可用。</li>\n<li>follower 不可用。</li>\n<li>多个 candidate 或多个 leader。</li>\n<li>新节点加入集群。</li>\n</ul>\n<h4 id=\"leader不可用\"><a href=\"#leader不可用\" class=\"headerlink\" title=\"leader不可用\"></a>leader不可用</h4><ol>\n<li>一般情况下，leader 节点定时发送 heartbeat 到 follower 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118015.png\" alt=\"\"></li>\n<li>由于某些异常导致 leader 不再发送 heartbeat ，或 follower 无法收到 heartbeat 。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118016.png\" alt=\"\"></li>\n<li>当某一 follower 发生 election timeout 时，其状态变更为 candidate，并向其他 follower 发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118017.png\" alt=\"\"></li>\n<li>当超过半数的 follower 接受投票后，这一节点将成为新的 leader，leader 的步进数加1并开始向 follower 同步日志。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118018.png\" alt=\"\"></li>\n<li>当一段时间之后，如果之前的 leader 再次加入集群，则两个 leader 比较彼此的步进数，步进数低的 leader 将切换自己的状态为 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118019.png\" alt=\"\"></li>\n<li>较早前 leader 中不一致的日志将被清除，并与现有 leader 中的日志保持一致。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118020.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"follower-节点不可用\"><a href=\"#follower-节点不可用\" class=\"headerlink\" title=\"follower 节点不可用\"></a>follower 节点不可用</h4><p>follower 节点不可用的情况相对容易解决。因为集群中的日志内容始终是从 leader 节点同步的，只要这一节点再次加入集群时重新从 leader 节点处复制日志即可。</p>\n<ol>\n<li>集群中的某个 follower 节点发生异常，不再同步日志以及接收 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118021.png\" alt=\"\"></li>\n<li>经过一段时间之后，原来的 follower 节点重新加入集群。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118022.png\" alt=\"\"></li>\n<li>这一节点的日志将从当时的 leader 处同步。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118023.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"多个-candidate-或多个-leader\"><a href=\"#多个-candidate-或多个-leader\" class=\"headerlink\" title=\"多个 candidate 或多个 leader\"></a>多个 candidate 或多个 leader</h4><p>在集群中出现多个 candidate 或多个 leader 通常是由于数据传输不畅造成的。出现多个 leader 的情况相对少见，但多个 candidate 比较容易出现在集群节点启动初期尚未选出 leader 的“混沌”时期。</p>\n<ol>\n<li>初始状态下集群中的所有节点都处于 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118024.png\" alt=\"\"></li>\n<li>两个节点同时成为 candidate 发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118025.png\" alt=\"\"></li>\n<li>两个 candidate 都只得到了少部分 follower 的接受投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118026.png\" alt=\"\"></li>\n<li>candidate 继续向其他的 follower 询问。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118027.png\" alt=\"\"></li>\n<li>由于一些 follower 已经投过票了，所以均返回拒绝接受。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118028.png\" alt=\"\"></li>\n<li>candidate 也可能向一个 candidate 询问投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118029.png\" alt=\"\"></li>\n<li>在步进数相同的情况下，candidate 将拒绝接受另一个 candidate 的请求。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118030.png\" alt=\"\"></li>\n<li>由于第一次未选出 leader，candidate 将随机选择一个等待间隔（150ms ~ 300ms）再次发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118031.png\" alt=\"\"></li>\n<li>如果得到集群中半数以上的 follower 的接受，这一 candidate 将成为 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118032.png\" alt=\"\"></li>\n<li>稍后另一个 candidate 也将再次发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118033.png\" alt=\"\"></li>\n<li>由于集群中已经选出 leader，candidate 将收到拒绝接受的投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118034.png\" alt=\"\"></li>\n<li>在被多数节点拒绝之后，并已知集群中已存在 leader 后，这一 candidate 节点将终止投票请求，切换为 follower，从 leader 节点同步日志。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118035.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><p>在 Raft 集群中，所有日志都必须首先提交至 leader 节点。leader 在每个 heartbeat 向 follower 同步日志，follower 在收到日志之后向 leader 反馈结果，leader 在确认日志内容正确之后将此条目提交并存储于本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118036.png\" alt=\"\"></p>\n<ol>\n<li>首先有一条 uncommitted 的日志条目提交至 leader 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118037.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 将此条目复制给所有的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118038.png\" alt=\"\"></li>\n<li>当大多数节点记录此条目之后，leader 节点认定此条目有效，将此条目设定为已提交并存储于本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118039.png\" alt=\"\"><br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118040.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 通知所有 follower 提交这一日志条目并存储于各自的磁盘内。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118041.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"容错\"><a href=\"#容错\" class=\"headerlink\" title=\"容错\"></a>容错</h4><p>如果由于网络的隔断，造成集群中多数的节点在一段时间内无法访问到 leader 节点。按照 raft 共识算法，没有 leader 的那一组集群将会通过选举投票出新的 leader，甚至会在两个集群内产生不一致的日志条目。在集群重新完整连通之后，原来的 leader 仍会按照 raft 共识算法从步进数更高的 leader 同步日志并将自己切换为 follower。<br>通过这种方式，只要集群中有效连接的节点超过总数的一半，集群将一直以这种规则运行下去并始终确保各个节点中的数据始终一致。</p>\n<ol>\n<li>集群的理想状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118042.png\" alt=\"\"></li>\n<li>网络间隔造成大多数的节点无法访问 leader 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118043.png\" alt=\"\"></li>\n<li>新的日志条目添加到 leader 中。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118044.png\" alt=\"\"></li>\n<li>leader 节点将此条日志同步至能够访问到 leader 的节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118045.png\" alt=\"\"></li>\n<li>follower 确认日志被记录，但是确认记录日志的 follower 数量没有超过集群节点的半数，leader 节点并不将此条日志存档。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118046.png\" alt=\"\"></li>\n<li>在被隔断的这部分节点，在 election timeout 之后，followers 中产生 candidate 并发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118047.png\" alt=\"\"></li>\n<li>多数节点接受投票之后，candidate 成为 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118048.png\" alt=\"\"></li>\n<li>一个日志条目被添加到新的 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118049.png\" alt=\"\"></li>\n<li>日志被复制给新 leader 的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118050.png\" alt=\"\"></li>\n<li>多数节点确认之后，leader 将日志条目提交并存储。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118051.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 通知 follower 各自提交并保存在本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118052.png\" alt=\"\"></li>\n<li>经过一段时间之后，集群重新连通到一起，集群中出现两个 leader 并且存在不一致的日志条目。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118053.png\" alt=\"\"></li>\n<li>新的 leader 在下一次 heartbeat timeout 时向所有的节点发送一次 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118054.png\" alt=\"\"></li>\n<li>#1 leader 在收到步进数更高的 #2 leader heartbeat 时放弃 leader 地位并切换到 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118055.png\" alt=\"\"></li>\n<li>节点中所有未存档的日志条目都将被丢弃。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118056.png\" alt=\"\"></li>\n<li>未被复制的日志条目将会被同步给所有的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118057.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"clients\"><a href=\"#clients\" class=\"headerlink\" title=\"clients\"></a>clients</h3><p>在默认设定下，etcd 通过主机的 2379 端口向 Client 提供服务。每个主机上的应用程序都可以通过主机的 2379 以 HTTP + JSON 的方式向 etcd 读写数据。写入的数据会由 etcd 同步到集群的其它节点中。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118059.png\" alt=\"\"></p>\n<h3 id=\"peers\"><a href=\"#peers\" class=\"headerlink\" title=\"peers\"></a>peers</h3><p>在默认设定下，etcd 通过主机的 2380 端口在各个节点中同步 Raft 状态及数据。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118060.png\" alt=\"\"></p>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p>从方法上来划分，创建 etcd 集群的方式分为两种：Static （通过制定 peers 的 IP 和端口创建）与 Discovery （通过一个发现服务创建）。<br>Static 方式需要预先知道集群所有节点的 IP，所以适合小规模的集群或者搭建一个临时的开发与测试环境。<br>Discovery 方式不需要预先了解其他节点的 IP。启动时 etcd 通过访问一个 Discovery URL 来注册自己并获取其他节点的信息。这种方式通常适合将 etcd 部署在某个云服务平台或是一个 DHCP 环境中。其中 Discovery 服务可以使用 CoreOS 提供的一个公共地址 <a href=\"https://discovery.etcd.io/new\" target=\"_blank\" rel=\"external\">https://discovery.etcd.io/new</a> 来申请一个 token，或者自己搭建一个这样的服务并设定一个 token。出于安全的考虑，这个 token 应该只在集群初始引导时短暂存在，因为集群建立之后将不再需要这一地址，而集群中节点的变更可以通过 etcd 运行时重构的能力来进行配置。</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>TODO:</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.infoq.com/cn/articles/coreos-analyse-etcd\" target=\"_blank\" rel=\"external\">CoreOS实战：剖析etcd</a><br><a href=\"http://www.cnblogs.com/mindwind/p/5231986.html\" target=\"_blank\" rel=\"external\">Raft 为什么是更易理解的分布式一致性算法</a><br><a href=\"https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md\" target=\"_blank\" rel=\"external\">Raft算法</a><br><a href=\"http://www.infoq.com/cn/CoreOSAction\" target=\"_blank\" rel=\"external\">CoreOS实战系列</a><br><a href=\"https://coreos.com/blog/new-functional-testing-in-etcd/\" target=\"_blank\" rel=\"external\">https://coreos.com/blog/new-functional-testing-in-etcd/</a></p>\n","excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在前面<strong><a href=\"/2016/07/26/CoreOS/\" title=\"CoreOS介绍\">CoreOS介绍</a></strong>的介绍文章中，提到了CoreOS的核心etcd模块。这次就主要讲下etcd模块的核心Raft共识算法，这也是etcd模块提供的集群化的原理。</p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f66dbq241nj20hq0dbwfa.jpg\" alt=\"\"></p>\n<blockquote>\n<p><strong>在CoreOS 集群中处于骨架地位的是etcd。</strong>etcd是一个分布式 key/value存储服务，CoreOS集群中的程序和服务可以通过etcd共享信息或做服务发现。etcd基于非常著名的raft一致性算法：通过选举形式在服务器之中选举Lead来同步数据，并以此确保集群之内信息始终一致和可用。etcd以默认的形式安装于每个CoreOS系统之中。在默认的配置下，etcd使用系统中的两个端口：4001和7001，其中4001提供给外部应用程序以HTTP+Json的形式读写数据，而7001则用作在每个etcd之间进行数据同步。用户更可以通过配置CA Cert让 etcd以HTTPS的方式读写及同步数据，进一步确保数据信息的安全性。</p>\n</blockquote>","more":"<p>一个 etcd 节点的核心由三部分组成：</p>\n<ul>\n<li>Raft：Raft 状态机是对 Raft 共识算法的实现</li>\n<li>WAL：Raft 日志存储</li>\n<li>Storage：数据的存储与索引</li>\n</ul>\n<blockquote>\n<p>WAL (Write-ahead logging)，是用于向系统提供原子性和持久性的一系列技术。在使用 WAL 的系提供中，所有的修改在提交之前都要先写入 log 文件中。etcd 的 WAL 由日志存储与快照存储两部分组成，其中 Entry 负责存储具体日志的内容，而 Snapshot 负责在日志内容发生变化的时候保存 Raft 的状态。WAL 会在本地磁盘的一个指定目录下分别日志条目与快照内容。</p>\n</blockquote>\n<p><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118058.png\" alt=\"\"></p>\n<h2 id=\"Raft算法\"><a href=\"#Raft算法\" class=\"headerlink\" title=\"Raft算法\"></a>Raft算法</h2><p>etcd基于<a href=\"https://Raft.github.io/\">Raft共识算法</a>，Github上有<strong><a href=\"https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md\">中文译版</a></strong>。<br>同时，这里有2篇文章很简易的解释了Raft算法中选举出leader的原理。<br> <a href=\"http://www.infoq.com/cn/articles/coreos-analyse-etcd\">《CoreOS实战：剖析etcd》</a><br> <a href=\"http://www.cnblogs.com/mindwind/p/5231986.html\">《Raft为什么是更易理解的分布式一致性算法》</a></p>\n<p><em><code>注：曾经在用mqtt协议设计智能家居本地网络和云端网络时，为这个网络集群的同步一致性问题搞得迷乱不已，现在看到这个，真是拔云见日般清爽啊。</code></em></p>\n<blockquote>\n<p>Raft 共识算法的优点在于可以在高效的解决分布式系统中各个节点日志内容一致性问题的同时，也使得集群具备一定的容错能力。即使集群中出现部分节点故障、网络故障等问题，仍可保证其余大多数节点正确的步进。甚至当更多的节点（一般来说超过集群节点总数的一半）出现故障而导致集群不可用时，依然可以保证节点中的数据不会出现错误的结果。</p>\n</blockquote>\n<h3 id=\"Raft状态机\"><a href=\"#Raft状态机\" class=\"headerlink\" title=\"Raft状态机\"></a>Raft状态机</h3><blockquote>\n<p>Raft 集群中的每个节点都可以根据集群运行的情况在三种状态间切换：follower, candidate 与 leader。leader 向 follower 同步日志，follower 只从 leader 处获取日志。在节点初始启动时，节点的 Raft 状态机将处于 follower 状态并被设定一个 election timeout，如果在这一时间周期内没有收到来自 leader 的 heartbeat，节点将发起选举：节点在将自己的状态切换为 candidate 之后，向集群中其它 follower 节点发送请求，询问其是否选举自己成为 leader。当收到来自集群中过半数节点的接受投票后，节点即成为 leader，开始接收保存 client 的数据并向其它的 follower 节点同步日志。leader 节点依靠定时向 follower 发送 heartbeat 来保持其地位。任何时候如果其它 follower 在 election timeout 期间都没有收到来自 leader 的 heartbeat，同样会将自己的状态切换为 candidate 并发起选举。每成功选举一次，新 leader 的步进数都会比之前 leader 的步进数大1。</p>\n</blockquote>\n<p><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118010.png\" alt=\"\"></p>\n<h3 id=\"Raft选举leader\"><a href=\"#Raft选举leader\" class=\"headerlink\" title=\"Raft选举leader\"></a>Raft选举leader</h3><p>一个 candidate 成为 leader 需要具备三个要素：</p>\n<ul>\n<li>获得集群多数节点的同意。</li>\n<li>集群中不存在比自己步进数更高的 candidate。</li>\n<li>集群中不存在其他 leader。</li>\n</ul>\n<h4 id=\"选举过程\"><a href=\"#选举过程\" class=\"headerlink\" title=\"选举过程\"></a>选举过程</h4><ol>\n<li>初始状态下集群中的所有节点都处于 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118011.png\" alt=\"\"></li>\n<li>某一时刻，其中的一个 follower 由于没有收到 leader 的 heartbeat 率先发生 election timeout 进而发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118012.png\" alt=\"\"></li>\n<li>只要集群中超过半数的节点接受投票，candidate 节点将成为即切换 leader 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118013.png\" alt=\"\"></li>\n<li>成为 leader 节点之后，leader 将定时向 follower 节点同步日志并发送 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118014.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"Raft节点异常\"><a href=\"#Raft节点异常\" class=\"headerlink\" title=\"Raft节点异常\"></a>Raft节点异常</h3><p>集群中各个节点的状态随时都有可能发生变化。节点的异常大致可以分为四种类型：</p>\n<ul>\n<li>leader 不可用。</li>\n<li>follower 不可用。</li>\n<li>多个 candidate 或多个 leader。</li>\n<li>新节点加入集群。</li>\n</ul>\n<h4 id=\"leader不可用\"><a href=\"#leader不可用\" class=\"headerlink\" title=\"leader不可用\"></a>leader不可用</h4><ol>\n<li>一般情况下，leader 节点定时发送 heartbeat 到 follower 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118015.png\" alt=\"\"></li>\n<li>由于某些异常导致 leader 不再发送 heartbeat ，或 follower 无法收到 heartbeat 。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118016.png\" alt=\"\"></li>\n<li>当某一 follower 发生 election timeout 时，其状态变更为 candidate，并向其他 follower 发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118017.png\" alt=\"\"></li>\n<li>当超过半数的 follower 接受投票后，这一节点将成为新的 leader，leader 的步进数加1并开始向 follower 同步日志。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118018.png\" alt=\"\"></li>\n<li>当一段时间之后，如果之前的 leader 再次加入集群，则两个 leader 比较彼此的步进数，步进数低的 leader 将切换自己的状态为 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118019.png\" alt=\"\"></li>\n<li>较早前 leader 中不一致的日志将被清除，并与现有 leader 中的日志保持一致。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118020.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"follower-节点不可用\"><a href=\"#follower-节点不可用\" class=\"headerlink\" title=\"follower 节点不可用\"></a>follower 节点不可用</h4><p>follower 节点不可用的情况相对容易解决。因为集群中的日志内容始终是从 leader 节点同步的，只要这一节点再次加入集群时重新从 leader 节点处复制日志即可。</p>\n<ol>\n<li>集群中的某个 follower 节点发生异常，不再同步日志以及接收 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118021.png\" alt=\"\"></li>\n<li>经过一段时间之后，原来的 follower 节点重新加入集群。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118022.png\" alt=\"\"></li>\n<li>这一节点的日志将从当时的 leader 处同步。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118023.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"多个-candidate-或多个-leader\"><a href=\"#多个-candidate-或多个-leader\" class=\"headerlink\" title=\"多个 candidate 或多个 leader\"></a>多个 candidate 或多个 leader</h4><p>在集群中出现多个 candidate 或多个 leader 通常是由于数据传输不畅造成的。出现多个 leader 的情况相对少见，但多个 candidate 比较容易出现在集群节点启动初期尚未选出 leader 的“混沌”时期。</p>\n<ol>\n<li>初始状态下集群中的所有节点都处于 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118024.png\" alt=\"\"></li>\n<li>两个节点同时成为 candidate 发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118025.png\" alt=\"\"></li>\n<li>两个 candidate 都只得到了少部分 follower 的接受投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118026.png\" alt=\"\"></li>\n<li>candidate 继续向其他的 follower 询问。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118027.png\" alt=\"\"></li>\n<li>由于一些 follower 已经投过票了，所以均返回拒绝接受。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118028.png\" alt=\"\"></li>\n<li>candidate 也可能向一个 candidate 询问投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118029.png\" alt=\"\"></li>\n<li>在步进数相同的情况下，candidate 将拒绝接受另一个 candidate 的请求。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118030.png\" alt=\"\"></li>\n<li>由于第一次未选出 leader，candidate 将随机选择一个等待间隔（150ms ~ 300ms）再次发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118031.png\" alt=\"\"></li>\n<li>如果得到集群中半数以上的 follower 的接受，这一 candidate 将成为 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118032.png\" alt=\"\"></li>\n<li>稍后另一个 candidate 也将再次发起投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118033.png\" alt=\"\"></li>\n<li>由于集群中已经选出 leader，candidate 将收到拒绝接受的投票。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118034.png\" alt=\"\"></li>\n<li>在被多数节点拒绝之后，并已知集群中已存在 leader 后，这一 candidate 节点将终止投票请求，切换为 follower，从 leader 节点同步日志。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118035.png\" alt=\"\"></li>\n</ol>\n<h3 id=\"日志\"><a href=\"#日志\" class=\"headerlink\" title=\"日志\"></a>日志</h3><h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><p>在 Raft 集群中，所有日志都必须首先提交至 leader 节点。leader 在每个 heartbeat 向 follower 同步日志，follower 在收到日志之后向 leader 反馈结果，leader 在确认日志内容正确之后将此条目提交并存储于本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118036.png\" alt=\"\"></p>\n<ol>\n<li>首先有一条 uncommitted 的日志条目提交至 leader 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118037.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 将此条目复制给所有的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118038.png\" alt=\"\"></li>\n<li>当大多数节点记录此条目之后，leader 节点认定此条目有效，将此条目设定为已提交并存储于本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118039.png\" alt=\"\"><br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118040.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 通知所有 follower 提交这一日志条目并存储于各自的磁盘内。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118041.png\" alt=\"\"></li>\n</ol>\n<h4 id=\"容错\"><a href=\"#容错\" class=\"headerlink\" title=\"容错\"></a>容错</h4><p>如果由于网络的隔断，造成集群中多数的节点在一段时间内无法访问到 leader 节点。按照 raft 共识算法，没有 leader 的那一组集群将会通过选举投票出新的 leader，甚至会在两个集群内产生不一致的日志条目。在集群重新完整连通之后，原来的 leader 仍会按照 raft 共识算法从步进数更高的 leader 同步日志并将自己切换为 follower。<br>通过这种方式，只要集群中有效连接的节点超过总数的一半，集群将一直以这种规则运行下去并始终确保各个节点中的数据始终一致。</p>\n<ol>\n<li>集群的理想状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118042.png\" alt=\"\"></li>\n<li>网络间隔造成大多数的节点无法访问 leader 节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118043.png\" alt=\"\"></li>\n<li>新的日志条目添加到 leader 中。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118044.png\" alt=\"\"></li>\n<li>leader 节点将此条日志同步至能够访问到 leader 的节点。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118045.png\" alt=\"\"></li>\n<li>follower 确认日志被记录，但是确认记录日志的 follower 数量没有超过集群节点的半数，leader 节点并不将此条日志存档。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118046.png\" alt=\"\"></li>\n<li>在被隔断的这部分节点，在 election timeout 之后，followers 中产生 candidate 并发起选举。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118047.png\" alt=\"\"></li>\n<li>多数节点接受投票之后，candidate 成为 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118048.png\" alt=\"\"></li>\n<li>一个日志条目被添加到新的 leader。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118049.png\" alt=\"\"></li>\n<li>日志被复制给新 leader 的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118050.png\" alt=\"\"></li>\n<li>多数节点确认之后，leader 将日志条目提交并存储。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118051.png\" alt=\"\"></li>\n<li>在下一个 heartbeat，leader 通知 follower 各自提交并保存在本地磁盘。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118052.png\" alt=\"\"></li>\n<li>经过一段时间之后，集群重新连通到一起，集群中出现两个 leader 并且存在不一致的日志条目。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118053.png\" alt=\"\"></li>\n<li>新的 leader 在下一次 heartbeat timeout 时向所有的节点发送一次 heartbeat。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118054.png\" alt=\"\"></li>\n<li>#1 leader 在收到步进数更高的 #2 leader heartbeat 时放弃 leader 地位并切换到 follower 状态。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118055.png\" alt=\"\"></li>\n<li>节点中所有未存档的日志条目都将被丢弃。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118056.png\" alt=\"\"></li>\n<li>未被复制的日志条目将会被同步给所有的 follower。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118057.png\" alt=\"\"></li>\n</ol>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"clients\"><a href=\"#clients\" class=\"headerlink\" title=\"clients\"></a>clients</h3><p>在默认设定下，etcd 通过主机的 2379 端口向 Client 提供服务。每个主机上的应用程序都可以通过主机的 2379 以 HTTP + JSON 的方式向 etcd 读写数据。写入的数据会由 etcd 同步到集群的其它节点中。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118059.png\" alt=\"\"></p>\n<h3 id=\"peers\"><a href=\"#peers\" class=\"headerlink\" title=\"peers\"></a>peers</h3><p>在默认设定下，etcd 通过主机的 2380 端口在各个节点中同步 Raft 状态及数据。<br><img src=\"http://cdn3.infoqstatic.com/statics_s1_20160720-0404/resource/articles/coreos-analyse-etcd/zh/resources/1118060.png\" alt=\"\"></p>\n<h3 id=\"create\"><a href=\"#create\" class=\"headerlink\" title=\"create\"></a>create</h3><p>从方法上来划分，创建 etcd 集群的方式分为两种：Static （通过制定 peers 的 IP 和端口创建）与 Discovery （通过一个发现服务创建）。<br>Static 方式需要预先知道集群所有节点的 IP，所以适合小规模的集群或者搭建一个临时的开发与测试环境。<br>Discovery 方式不需要预先了解其他节点的 IP。启动时 etcd 通过访问一个 Discovery URL 来注册自己并获取其他节点的信息。这种方式通常适合将 etcd 部署在某个云服务平台或是一个 DHCP 环境中。其中 Discovery 服务可以使用 CoreOS 提供的一个公共地址 <a href=\"https://discovery.etcd.io/new\">https://discovery.etcd.io/new</a> 来申请一个 token，或者自己搭建一个这样的服务并设定一个 token。出于安全的考虑，这个 token 应该只在集群初始引导时短暂存在，因为集群建立之后将不再需要这一地址，而集群中节点的变更可以通过 etcd 运行时重构的能力来进行配置。</p>\n<h3 id=\"run\"><a href=\"#run\" class=\"headerlink\" title=\"run\"></a>run</h3><p>TODO:</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.infoq.com/cn/articles/coreos-analyse-etcd\">CoreOS实战：剖析etcd</a><br><a href=\"http://www.cnblogs.com/mindwind/p/5231986.html\">Raft 为什么是更易理解的分布式一致性算法</a><br><a href=\"https://github.com/maemual/Raft-zh_cn/blob/master/Raft-zh_cn.md\">Raft算法</a><br><a href=\"http://www.infoq.com/cn/CoreOSAction\">CoreOS实战系列</a><br><a href=\"https://coreos.com/blog/new-functional-testing-in-etcd/\">https://coreos.com/blog/new-functional-testing-in-etcd/</a></p>"},{"title":"HTTP/2多路复用","date":"2016-08-03T02:35:57.000Z","_content":"学习HTTP/2的过程中，发现其实大部分基础协议的原理和实现其实都是共通的。比如近来大热的HTTP/2协议与熟知的DVB协议。两者在基础原理上的共通是，都应用了`多路复用`的概念。使得一个TS传输流(DVB)/TCP连接(HTTP2)里可包含多个同通道的数据。DVB协议里是不同的PES数据（可以表义理解为一个节目数据）；HTTP2协议里是不同的meta数据。\n\n## 多路复用\n+ 第一路数据通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-justin.jpg)\n+ 第二路数据通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-ikea.jpg)\n+ 多路数据复用后通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-multiplexed.jpg)\n","source":"_posts/http-2.md","raw":"---\ntitle: HTTP/2多路复用\ndate: 2016-08-03 10:35:57\ncategories:\n - study\ntags:\n - http2\n---\n学习HTTP/2的过程中，发现其实大部分基础协议的原理和实现其实都是共通的。比如近来大热的HTTP/2协议与熟知的DVB协议。两者在基础原理上的共通是，都应用了`多路复用`的概念。使得一个TS传输流(DVB)/TCP连接(HTTP2)里可包含多个同通道的数据。DVB协议里是不同的PES数据（可以表义理解为一个节目数据）；HTTP2协议里是不同的meta数据。\n\n## 多路复用\n+ 第一路数据通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-justin.jpg)\n+ 第二路数据通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-ikea.jpg)\n+ 多路数据复用后通道\n![](https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-multiplexed.jpg)\n","slug":"http-2","published":1,"updated":"2016-09-06T08:44:45.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1830015fgn992tmh9cp","content":"<p>学习HTTP/2的过程中，发现其实大部分基础协议的原理和实现其实都是共通的。比如近来大热的HTTP/2协议与熟知的DVB协议。两者在基础原理上的共通是，都应用了<code>多路复用</code>的概念。使得一个TS传输流(DVB)/TCP连接(HTTP2)里可包含多个同通道的数据。DVB协议里是不同的PES数据（可以表义理解为一个节目数据）；HTTP2协议里是不同的meta数据。</p>\n<h2 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h2><ul>\n<li>第一路数据通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-justin.jpg\" alt=\"\"></li>\n<li>第二路数据通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-ikea.jpg\" alt=\"\"></li>\n<li>多路数据复用后通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-multiplexed.jpg\" alt=\"\"></li>\n</ul>\n","excerpt":"","more":"<p>学习HTTP/2的过程中，发现其实大部分基础协议的原理和实现其实都是共通的。比如近来大热的HTTP/2协议与熟知的DVB协议。两者在基础原理上的共通是，都应用了<code>多路复用</code>的概念。使得一个TS传输流(DVB)/TCP连接(HTTP2)里可包含多个同通道的数据。DVB协议里是不同的PES数据（可以表义理解为一个节目数据）；HTTP2协议里是不同的meta数据。</p>\n<h2 id=\"多路复用\"><a href=\"#多路复用\" class=\"headerlink\" title=\"多路复用\"></a>多路复用</h2><ul>\n<li>第一路数据通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-justin.jpg\" alt=\"\"></li>\n<li>第二路数据通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-ikea.jpg\" alt=\"\"></li>\n<li>多路数据复用后通道<br><img src=\"https://raw.githubusercontent.com/bagder/http2-explained/master/images/train-multiplexed.jpg\" alt=\"\"></li>\n</ul>\n"},{"title":"etcd and MQTT cluster","date":"2016-07-25T07:47:38.000Z","_content":"\n看了下[ectd](https://github.com/coreos/etcd)的介绍，发现这个数据库与MQTT协议的mosqutto一起搭简易的mqtt cluster简直是绝配。\n主要是ectd的设计宗旨符合这个需求。主要如下：\n- 集群化：天生就带有分布式集群特性。\n- 同步性：天生就支持分布式数据同步特性。\n- 键的层次性：键的组织结构像mqtt协议的topic一样具有路径属性。\n- watch功能：像mqtt协议的P/S一样，可以监控某个键值变化。并支持像定时器一样，监测到变化后执行某个动作(exec-wathc)。\n\n目前看到的特性就感觉非常不错。其它的有待继续深入了解。。。\n","source":"_posts/etcd-and-MQTT-cluster.md","raw":"---\ntitle: etcd and MQTT cluster\ndate: 2016-07-25 15:47:38\ncategories:\n - study\ntags:\n - mqtt\n - cluster\n - etcd\n---\n\n看了下[ectd](https://github.com/coreos/etcd)的介绍，发现这个数据库与MQTT协议的mosqutto一起搭简易的mqtt cluster简直是绝配。\n主要是ectd的设计宗旨符合这个需求。主要如下：\n- 集群化：天生就带有分布式集群特性。\n- 同步性：天生就支持分布式数据同步特性。\n- 键的层次性：键的组织结构像mqtt协议的topic一样具有路径属性。\n- watch功能：像mqtt协议的P/S一样，可以监控某个键值变化。并支持像定时器一样，监测到变化后执行某个动作(exec-wathc)。\n\n目前看到的特性就感觉非常不错。其它的有待继续深入了解。。。\n","slug":"etcd-and-MQTT-cluster","published":1,"updated":"2016-09-06T08:44:45.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1860017fgn9vdlfdgf6","content":"<p>看了下<a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"external\">ectd</a>的介绍，发现这个数据库与MQTT协议的mosqutto一起搭简易的mqtt cluster简直是绝配。<br>主要是ectd的设计宗旨符合这个需求。主要如下：</p>\n<ul>\n<li>集群化：天生就带有分布式集群特性。</li>\n<li>同步性：天生就支持分布式数据同步特性。</li>\n<li>键的层次性：键的组织结构像mqtt协议的topic一样具有路径属性。</li>\n<li>watch功能：像mqtt协议的P/S一样，可以监控某个键值变化。并支持像定时器一样，监测到变化后执行某个动作(exec-wathc)。</li>\n</ul>\n<p>目前看到的特性就感觉非常不错。其它的有待继续深入了解。。。</p>\n","excerpt":"","more":"<p>看了下<a href=\"https://github.com/coreos/etcd\">ectd</a>的介绍，发现这个数据库与MQTT协议的mosqutto一起搭简易的mqtt cluster简直是绝配。<br>主要是ectd的设计宗旨符合这个需求。主要如下：</p>\n<ul>\n<li>集群化：天生就带有分布式集群特性。</li>\n<li>同步性：天生就支持分布式数据同步特性。</li>\n<li>键的层次性：键的组织结构像mqtt协议的topic一样具有路径属性。</li>\n<li>watch功能：像mqtt协议的P/S一样，可以监控某个键值变化。并支持像定时器一样，监测到变化后执行某个动作(exec-wathc)。</li>\n</ul>\n<p>目前看到的特性就感觉非常不错。其它的有待继续深入了解。。。</p>\n"},{"title":"gomobile","date":"2016-09-08T06:16:19.000Z","_content":"gomobile\n","source":"_posts/gomobile.md","raw":"---\ntitle: gomobile\ndate: 2016-09-08 14:16:19\ncategories:\n - study\ntags:\n - Android\n - Golang\n---\ngomobile\n","slug":"gomobile","published":1,"updated":"2016-09-08T07:21:38.233Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z189001bfgn9tcgebbtb","content":"<p>gomobile</p>\n","excerpt":"","more":"<p>gomobile</p>\n"},{"title":"mosquitto bridge 桥接设置","date":"2015-05-18T03:18:41.000Z","_content":"\n下面是mosquitto桥接模式的一些参数简单设置。\n上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。\n<!--more-->\n\n----------\n\nbridge桥接配置文件mosquitto.conf内容如下：\n\n     user root\n \tpid_file /var/run/mosquitto.pid\n \tport 61883\n \tpersistence true\n \tpersistence_location /skydir/sshome/\n \tconnection LOCAL-SERVER\n \tremote_clientid MSTARTV_REMOTE\n \tlocal_clientid MSTARTV_LOCAL\n \taddress 4.12.12.6:61883\n \ttopic # both 0 sshome/ sshome/\n \tbridge_protocol_version mqttv311\n\n##1.connection\nbridge时用于表示此桥接的别名。\n格式为:\n\n \tconnection LOCAL-SERVER\n\nlog如:\n\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n\n##2.remote_clientid\n用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。\n格式为：\n\n    remote_clientid BRIDGE_REMOTE\n\n注意：如果不设置。系统为默认分配一个形如localhost.***connection***的别名。\nlog如：\n\n    May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\n    May 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **<font color=red>localhost.LOCAL-SERVER</font>** (c0, k60).\n    May 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n\n##3.local_clientid\n同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。\n格式为：\n\n    local_clientid BRIDGE_LOCAL\n\n##4.address\nbridge的桥接地址和端口。标示远端服务器的IP地址和端口。\n格式为：\n\n    address 8.8.8.8:61883。\n\n##5.topic\nbridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。\n例如:\n\n    topic # both 0 sshome/ sshome/\n\n##6.案例.实践\nPC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n \t\n \ttest msg. pc-mstartv-server-pc.\n \thello,server! what can i do for you?\n \thello,server! what can i do for you?\n \they,are you ok、\n\nPC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hey,are you ok、\"\n\n本地local_mqtt_server运行。\n\n \tmosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n \t1431916959: Config loaded from sshome.conf.\n \t1431916959: Opening ipv6 listen socket on port 61883.\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n\n云端remote_mqtt_server运行。\n\n \tMay 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\n \tMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n\n\n\n运行过程:\n>1.启动local_mqtt_server。\n2.启动remote_mqtt_server。\n3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如**\"sshome/sshome\"**。模拟设备连接云端mqtt服务器。\n4.运行PC上的pub客户端，将信息\"hey,are you ok、\"发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如**\"sshome\"**。模拟设备连接本地mqtt服务器。\n5.此时，信息\"hey,are you ok、\"即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。\n6.服务器转发的内容如下:\n\n>  \tid\thdr\tmid\ttopic\tpayload\tctime\n \t124982 (d0, q0, r0) 0 **sshome/sshome** \"hey,are you ok\" 2015-05-18 12:05:51\n\n\n\n注意：sub客户端订阅的topic为**\"sshome/sshome\"**,而不是mosquitto.conf中的**\"sshome/\"**。\n详细说明见[mosquitto的官方手册](http://mosquitto.org/man/mosquitto-conf-5.html)。\n\n    topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n> Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.\n\n> The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.\n\n> For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.\n\n> For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.\n\n> When using topic mapping, an empty prefix can be defined using the place marker \"\". Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.\n\n> \t \t Topic\tLocal_Prefix\tRemote_Prefix\tValidity\n \t1\tvalue\tvalue\tvalue\tvalid\n \t2\tvalue\tvalue\t\"\"\tvalid\n \t3\tvalue\t\"\"\tvalue\tvalid\n \t4\tvalue\t\"\"\t\"\"\tvalid (no remapping)\n \t5\t\"\"\tvalue\tvalue\tvalid (remap single local topic to remote)\n \t6\t\"\"\tvalue\t\"\"\tinvalid\n \t7\t\"\"\t\"\"\tvalue\tinvalid\n \t8\t\"\"\t\"\"\t\"\"\tinvalid\n\n> To remap an entire topic tree, use e.g.:\ntopic # both 2 local/topic/ remote/topic/\nThis option can be specified multiple times per bridge.\n\n> Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.\n\n> See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.\n\n> Example Bridge Topic Remapping. \nThe configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total\n\n> connection test-mosquitto-org\naddress test.mosquitto.org\ncleansession true\ntopic clients/total in 0 test/mosquitto/org $SYS/broker/\n","source":"_posts/mosquitto-bridge-桥接设置.md","raw":"title: \"mosquitto bridge 桥接设置\"\ndate: 2015-05-18 11:18:41\ncategories:\n - work\ntags:\n - mosquitto\n---\n\n下面是mosquitto桥接模式的一些参数简单设置。\n上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。\n<!--more-->\n\n----------\n\nbridge桥接配置文件mosquitto.conf内容如下：\n\n     user root\n \tpid_file /var/run/mosquitto.pid\n \tport 61883\n \tpersistence true\n \tpersistence_location /skydir/sshome/\n \tconnection LOCAL-SERVER\n \tremote_clientid MSTARTV_REMOTE\n \tlocal_clientid MSTARTV_LOCAL\n \taddress 4.12.12.6:61883\n \ttopic # both 0 sshome/ sshome/\n \tbridge_protocol_version mqttv311\n\n##1.connection\nbridge时用于表示此桥接的别名。\n格式为:\n\n \tconnection LOCAL-SERVER\n\nlog如:\n\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n\n##2.remote_clientid\n用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。\n格式为：\n\n    remote_clientid BRIDGE_REMOTE\n\n注意：如果不设置。系统为默认分配一个形如localhost.***connection***的别名。\nlog如：\n\n    May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\n    May 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **<font color=red>localhost.LOCAL-SERVER</font>** (c0, k60).\n    May 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n\n##3.local_clientid\n同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。\n格式为：\n\n    local_clientid BRIDGE_LOCAL\n\n##4.address\nbridge的桥接地址和端口。标示远端服务器的IP地址和端口。\n格式为：\n\n    address 8.8.8.8:61883。\n\n##5.topic\nbridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。\n例如:\n\n    topic # both 0 sshome/ sshome/\n\n##6.案例.实践\nPC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n \t\n \ttest msg. pc-mstartv-server-pc.\n \thello,server! what can i do for you?\n \thello,server! what can i do for you?\n \they,are you ok、\n\nPC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hey,are you ok、\"\n\n本地local_mqtt_server运行。\n\n \tmosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n \t1431916959: Config loaded from sshome.conf.\n \t1431916959: Opening ipv6 listen socket on port 61883.\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n\n云端remote_mqtt_server运行。\n\n \tMay 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\n \tMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n\n\n\n运行过程:\n>1.启动local_mqtt_server。\n2.启动remote_mqtt_server。\n3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如**\"sshome/sshome\"**。模拟设备连接云端mqtt服务器。\n4.运行PC上的pub客户端，将信息\"hey,are you ok、\"发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如**\"sshome\"**。模拟设备连接本地mqtt服务器。\n5.此时，信息\"hey,are you ok、\"即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。\n6.服务器转发的内容如下:\n\n>  \tid\thdr\tmid\ttopic\tpayload\tctime\n \t124982 (d0, q0, r0) 0 **sshome/sshome** \"hey,are you ok\" 2015-05-18 12:05:51\n\n\n\n注意：sub客户端订阅的topic为**\"sshome/sshome\"**,而不是mosquitto.conf中的**\"sshome/\"**。\n详细说明见[mosquitto的官方手册](http://mosquitto.org/man/mosquitto-conf-5.html)。\n\n    topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n> Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.\n\n> The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.\n\n> For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.\n\n> For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.\n\n> When using topic mapping, an empty prefix can be defined using the place marker \"\". Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.\n\n> \t \t Topic\tLocal_Prefix\tRemote_Prefix\tValidity\n \t1\tvalue\tvalue\tvalue\tvalid\n \t2\tvalue\tvalue\t\"\"\tvalid\n \t3\tvalue\t\"\"\tvalue\tvalid\n \t4\tvalue\t\"\"\t\"\"\tvalid (no remapping)\n \t5\t\"\"\tvalue\tvalue\tvalid (remap single local topic to remote)\n \t6\t\"\"\tvalue\t\"\"\tinvalid\n \t7\t\"\"\t\"\"\tvalue\tinvalid\n \t8\t\"\"\t\"\"\t\"\"\tinvalid\n\n> To remap an entire topic tree, use e.g.:\ntopic # both 2 local/topic/ remote/topic/\nThis option can be specified multiple times per bridge.\n\n> Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.\n\n> See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.\n\n> Example Bridge Topic Remapping. \nThe configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total\n\n> connection test-mosquitto-org\naddress test.mosquitto.org\ncleansession true\ntopic clients/total in 0 test/mosquitto/org $SYS/broker/\n","slug":"mosquitto-bridge-桥接设置","published":1,"updated":"2016-09-06T08:44:45.021Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18c001efgn9hwd5wkcg","content":"<p>下面是mosquitto桥接模式的一些参数简单设置。<br>上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。<br><a id=\"more\"></a></p>\n<hr>\n<p>bridge桥接配置文件mosquitto.conf内容如下：</p>\n<pre><code>user root\npid_file /var/run/mosquitto.pid\nport 61883\npersistence true\npersistence_location /skydir/sshome/\nconnection LOCAL-SERVER\nremote_clientid MSTARTV_REMOTE\nlocal_clientid MSTARTV_LOCAL\naddress 4.12.12.6:61883\ntopic # both 0 sshome/ sshome/\nbridge_protocol_version mqttv311\n</code></pre><p>##1.connection<br>bridge时用于表示此桥接的别名。<br>格式为:</p>\n<pre><code>connection LOCAL-SERVER\n</code></pre><p>log如:</p>\n<pre><code>1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n</code></pre><p>##2.remote_clientid<br>用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。<br>格式为：</p>\n<pre><code>remote_clientid BRIDGE_REMOTE\n</code></pre><p>注意：如果不设置。系统为默认分配一个形如localhost.<strong><em>connection</em></strong>的别名。<br>log如：</p>\n<pre><code>May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\nMay 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **&lt;font color=red&gt;localhost.LOCAL-SERVER&lt;/font&gt;** (c0, k60).\nMay 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n</code></pre><p>##3.local_clientid<br>同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。<br>格式为：</p>\n<pre><code>local_clientid BRIDGE_LOCAL\n</code></pre><p>##4.address<br>bridge的桥接地址和端口。标示远端服务器的IP地址和端口。<br>格式为：</p>\n<pre><code>address 8.8.8.8:61883。\n</code></pre><p>##5.topic<br>bridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。<br>例如:</p>\n<pre><code>topic # both 0 sshome/ sshome/\n</code></pre><p>##6.案例.实践<br>PC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n\ntest msg. pc-mstartv-server-pc.\nhello,server! what can i do for you?\nhello,server! what can i do for you?\nhey,are you ok、\n</code></pre><p>PC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hey,are you ok、&quot;\n</code></pre><p>本地local_mqtt_server运行。</p>\n<pre><code>mosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n1431916959: Config loaded from sshome.conf.\n1431916959: Opening ipv6 listen socket on port 61883.\n1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n</code></pre><p>云端remote_mqtt_server运行。</p>\n<pre><code>May 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\nMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n</code></pre><p>运行过程:</p>\n<blockquote>\n<p>1.启动local_mqtt_server。<br>2.启动remote_mqtt_server。<br>3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如<strong>“sshome/sshome”</strong>。模拟设备连接云端mqtt服务器。<br>4.运行PC上的pub客户端，将信息”hey,are you ok、”发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如<strong>“sshome”</strong>。模拟设备连接本地mqtt服务器。<br>5.此时，信息”hey,are you ok、”即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。<br>6.服务器转发的内容如下:</p>\n<pre><code>id    hdr    mid    topic    payload    ctime\n124982 (d0, q0, r0) 0 **sshome/sshome** &quot;hey,are you ok&quot; 2015-05-18 12:05:51\n</code></pre></blockquote>\n<p>注意：sub客户端订阅的topic为<strong>“sshome/sshome”</strong>,而不是mosquitto.conf中的<strong>“sshome/“</strong>。<br>详细说明见<a href=\"http://mosquitto.org/man/mosquitto-conf-5.html\" target=\"_blank\" rel=\"external\">mosquitto的官方手册</a>。</p>\n<pre><code>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n</code></pre><blockquote>\n<p>Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.</p>\n<p>The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.</p>\n<p>For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.</p>\n<p>For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.</p>\n<p>When using topic mapping, an empty prefix can be defined using the place marker “”. Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.</p>\n<pre><code>     Topic    Local_Prefix    Remote_Prefix    Validity\n1    value    value    value    valid\n2    value    value    &quot;&quot;    valid\n3    value    &quot;&quot;    value    valid\n4    value    &quot;&quot;    &quot;&quot;    valid (no remapping)\n5    &quot;&quot;    value    value    valid (remap single local topic to remote)\n6    &quot;&quot;    value    &quot;&quot;    invalid\n7    &quot;&quot;    &quot;&quot;    value    invalid\n8    &quot;&quot;    &quot;&quot;    &quot;&quot;    invalid\n</code></pre><p>To remap an entire topic tree, use e.g.:<br>topic # both 2 local/topic/ remote/topic/<br>This option can be specified multiple times per bridge.</p>\n<p>Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.</p>\n<p>See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.</p>\n<p>Example Bridge Topic Remapping.<br>The configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total</p>\n<p>connection test-mosquitto-org<br>address test.mosquitto.org<br>cleansession true<br>topic clients/total in 0 test/mosquitto/org $SYS/broker/</p>\n</blockquote>\n","excerpt":"<p>下面是mosquitto桥接模式的一些参数简单设置。<br>上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。<br>","more":"</p>\n<hr>\n<p>bridge桥接配置文件mosquitto.conf内容如下：</p>\n<pre><code>user root\npid_file /var/run/mosquitto.pid\nport 61883\npersistence true\npersistence_location /skydir/sshome/\nconnection LOCAL-SERVER\nremote_clientid MSTARTV_REMOTE\nlocal_clientid MSTARTV_LOCAL\naddress 4.12.12.6:61883\ntopic # both 0 sshome/ sshome/\nbridge_protocol_version mqttv311\n</code></pre><p>##1.connection<br>bridge时用于表示此桥接的别名。<br>格式为:</p>\n<pre><code>connection LOCAL-SERVER\n</code></pre><p>log如:</p>\n<pre><code>1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n</code></pre><p>##2.remote_clientid<br>用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。<br>格式为：</p>\n<pre><code>remote_clientid BRIDGE_REMOTE\n</code></pre><p>注意：如果不设置。系统为默认分配一个形如localhost.<strong><em>connection</em></strong>的别名。<br>log如：</p>\n<pre><code>May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\nMay 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **&lt;font color=red&gt;localhost.LOCAL-SERVER&lt;/font&gt;** (c0, k60).\nMay 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n</code></pre><p>##3.local_clientid<br>同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。<br>格式为：</p>\n<pre><code>local_clientid BRIDGE_LOCAL\n</code></pre><p>##4.address<br>bridge的桥接地址和端口。标示远端服务器的IP地址和端口。<br>格式为：</p>\n<pre><code>address 8.8.8.8:61883。\n</code></pre><p>##5.topic<br>bridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。<br>例如:</p>\n<pre><code>topic # both 0 sshome/ sshome/\n</code></pre><p>##6.案例.实践<br>PC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n\ntest msg. pc-mstartv-server-pc.\nhello,server! what can i do for you?\nhello,server! what can i do for you?\nhey,are you ok、\n</code></pre><p>PC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hey,are you ok、&quot;\n</code></pre><p>本地local_mqtt_server运行。</p>\n<pre><code>mosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n1431916959: Config loaded from sshome.conf.\n1431916959: Opening ipv6 listen socket on port 61883.\n1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n</code></pre><p>云端remote_mqtt_server运行。</p>\n<pre><code>May 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\nMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n</code></pre><p>运行过程:</p>\n<blockquote>\n<p>1.启动local_mqtt_server。<br>2.启动remote_mqtt_server。<br>3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如<strong>“sshome/sshome”</strong>。模拟设备连接云端mqtt服务器。<br>4.运行PC上的pub客户端，将信息”hey,are you ok、”发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如<strong>“sshome”</strong>。模拟设备连接本地mqtt服务器。<br>5.此时，信息”hey,are you ok、”即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。<br>6.服务器转发的内容如下:</p>\n<pre><code>id    hdr    mid    topic    payload    ctime\n124982 (d0, q0, r0) 0 **sshome/sshome** &quot;hey,are you ok&quot; 2015-05-18 12:05:51\n</code></pre></blockquote>\n<p>注意：sub客户端订阅的topic为<strong>“sshome/sshome”</strong>,而不是mosquitto.conf中的<strong>“sshome/“</strong>。<br>详细说明见<a href=\"http://mosquitto.org/man/mosquitto-conf-5.html\">mosquitto的官方手册</a>。</p>\n<pre><code>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n</code></pre><blockquote>\n<p>Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.</p>\n<p>The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.</p>\n<p>For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.</p>\n<p>For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.</p>\n<p>When using topic mapping, an empty prefix can be defined using the place marker “”. Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.</p>\n<pre><code>     Topic    Local_Prefix    Remote_Prefix    Validity\n1    value    value    value    valid\n2    value    value    &quot;&quot;    valid\n3    value    &quot;&quot;    value    valid\n4    value    &quot;&quot;    &quot;&quot;    valid (no remapping)\n5    &quot;&quot;    value    value    valid (remap single local topic to remote)\n6    &quot;&quot;    value    &quot;&quot;    invalid\n7    &quot;&quot;    &quot;&quot;    value    invalid\n8    &quot;&quot;    &quot;&quot;    &quot;&quot;    invalid\n</code></pre><p>To remap an entire topic tree, use e.g.:<br>topic # both 2 local/topic/ remote/topic/<br>This option can be specified multiple times per bridge.</p>\n<p>Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.</p>\n<p>See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.</p>\n<p>Example Bridge Topic Remapping.<br>The configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total</p>\n<p>connection test-mosquitto-org<br>address test.mosquitto.org<br>cleansession true<br>topic clients/total in 0 test/mosquitto/org $SYS/broker/</p>\n</blockquote>"},{"title":"mstar6586 supernova note","date":"2016-07-22T06:12:52.000Z","_content":"前阵子参与了目标市场为海外的，搭载Google Cast应用的TV项目。基于Mstar6586芯片，Linux做的案子。有很多亮点，感觉不错，特别是Mstar新的Supernova，对比之前Turnkey方案下的Pure Supernova进步很大。把过程中的学习笔记放上来记录一下。\n\n这个案子对比传统Linux的案子，比较特别的是IPC部分。它把Android的Binder机制裁剪一下引入进来了。这种IPC机制一下子就方便多了。把自己的Supernova中底层TvService进程与客户订制化要求很高的UI进程之间剥离开来，大大简化了底层逻辑的上层UI之间的耦合度。另外，它的APM部分也不错，有空再另说。\n\n<!-- more -->\n\n## Configuration\n**PATH**:`\\Supernova\\MStarSDK\\release\\lib.macan_build_Macan_093B_ROM_NAND_DVB_SERVICE.sh`\n### `\\Supernova\\out\\buildenv\\env.cfg`\n- CHIP=macan\n- BOARD=093B_DVB\n- TARGET_CPU=arm\n- TOOLCHAIN=arm-gnueabi\n- PROJ_MODE=dvb (support dvb/atsc/isdb)\n- LINK_TYPE=dynamic\n- TV_SYSTEM=dvbt2\n- EXT4=false\n\n### `Supernova\\out\\buildenv\\config\\buildenv.mk`\n- UI_PATH = ui/jarves/dvbt\n- UI_RESOLUTION = _FHD\n\n### `\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk`\n- DVB_ENABLE=1 \n    + DVBT=1\n    + DVBC=1\n    + DVBS=1\n    + DTMB=0\n    + ISDB=0\n- CI_ENABLE=1\n- CI_PLUS_ENABLE=1\n- HBBTV_ENABLE=1\n- MHEG5_ENABLE = 1\n- SUBTITLE_ENABLE = 1\n\n### `Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk`\n- ENABLE_BACKEND = 1\n- CHINA_ATV=0\n- CHINA_ENABLE=0\n\n### `Supernova\\out\\buildenv\\target\\default_setting.mk`\n- STORAGE_TYPE = nand\n    + UBIFS = true\n    + ext4 = false\n    + FS_TYPE = ubifs\n- BOOTLOGO_DELAY = 0\n- BOOTLOGO_DFBLAYER = 0\n- KERNEL_COMPRESS = 0\n\n### `Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk`\n- IMG_FOLDER = Supernova\\target\\dvb.macan\\images\n- APP_EXE_FILE =tvos\n- APP_PADDING_SIZE    = 0x01400000\n- CONFIG_PADDING_SIZE = 0x00100000\n- KERNEL_PADDING_SIZE = 0x00800000\n- MSLIB_PADDING_SIZE  = 0x00C00000\n- RFS_PADDING_SIZE = 0x00900000\n- CUS_PADDING_SIZE    = 0x00400000\n- CUSBK_PADDING_SIZE  = 0x00400000\n- ROOTFS_PADDING_SIZE = 0x00400000\n\n### `Supernova\\out\\buildenv\\config\\devices\\device_option.mk`\n- TUNER_AV2012 = 1\n- TUNER_MXL661 = 1\n- DEMOD_macan = 1\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk`\n- FLOATING = hardfloat\n- WIFI_80211CFG_ENABLE = 1\n- WIFI_DONGLE_RALINK_7632_ENABLE = 1\n- LIBDIR = lib_ipc.macan\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk`\n- MSTAR_IPC = 1\n    + MM_IPC_SERVICE_ENABLE = 1\n    + RVU_IPC_SERVICE_ENABLE = 1\n    + APP_IPC_SERVICE_ENABLE = 1\n    + MOUNTNOTIFIER_IPC_SERVICE_ENABLE = 1\n    + SECURE_IPC_SERVICE_ENABLE = 1\n    + TV_IPC_SERVICE_ENABLE = 1\n    + WEBAPPMGR_IPC_SERVICE_ENABLE = 1\n    + BROWSER_IPC_SERVICE_ENABLE = 1\n    + COMMUI_IPC_SERVICE_ENABLE = 1\n    + WIDI_IPC_SERVICE_ENABLE = 1\n- MSTAR_TVOS = 1\n    + SQL_DB_ENABLE = 1\n- MALI_ENABLE = 0\n- MSTAR_WEBUI = 0\n- PLATFORM_TYPE = MSTAR_PURESN\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk`\n+ KEYPAD_ENABLE = 1\n+ ENCRYPTED_NETWORK_UPGRADE_ENABLE = 1\n+ EPG_ENABLE = 1\n+ EPG_EED_ENABLE = 1\n+ PVR_ENABLE = 1\n+ PIP_ENABLE = 0\n+ TIMESHIFTSEAMLESS_ENABLE = 0\n+ BGPVR_ENABLE = 0\n+ OAD_ENABLE = 1 (DVB OAD Software System Update)\n+ SAMBA_CLIENT_ENABLE = 0\n+ PREVIEW_MODE_ENABLE = 0\n+ WIFI_ENABLE = 1 (Enable to use wifi function)\n+ BLUETOOTH_ENABLE = 0\n+ ACTIVE_STANDBY_MODE_ENABLE = 1 (Background recording function, for recording after TV turn off)\n+ ENABLE_DYNSCALING = 1 (enable dynamic scaling.)\n\n## Architecture\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f62o7mbac8j20go0frq6e.jpg)\n\n### Supernova\n- ATV Player: to provide the ATV basic functions: Display/Signal Monitor/Auto Tuning/Manual Tuning/Channel Up, down/...\n- MM Player: to provide the Multi Media basic functions: Play/Stop/...\n- DTV Player: to provide the DTV basic functions:Display/Signal Monitor/Scan/Channel Change/EPG/CI/MHEG5/PVR...\n- All other Player: to provide the basic functions for various input source: Display/Signal Monitor/...\n- Database: to provide the information saved in the EEprom. For example: Program Info and OSD Info\n- CIMMI: to provide CIMMI display information for CI card ui\n- Timer: to provide all time related functions\n- Channel Manager: wrapper for channel manage functions for ATV/DTV\n- Factory Mode: to provide factory setting interface to factory ui\n- Picture Quality: to provide the Picture basic functions. For example: Brightness, contrast, Color,...etc\n- Control Class(MSrv_Control): interface to get all kinds of MSrv objects\n- TTX class: to provide the TTX basic functions.\n\n\n### Msrv class Hierachy\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f62o8212wdj20l70elabp.jpg)\n\n\n### Msrv_Control\n总控类，是父类的**实例对象**。\n继承自`class MSrv_Control_DVB/MSrv_Control_ATSC`，\n再继承自`class MSrv_Control_TV/MSrv_Control_STB`，\n再继承自`class MSrv_Control_common`。\n\n例子：\nChange Input Source: MSrv_Control(MSrv_Control_DVB/MSrv_Control_common) class\n->SetInputSourceCmd(); \n继承关系图如下：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f62o8gmbv6j20qb08lq58.jpg)\n\n### TVOS Call Flow\n主要逻辑关系调用流程如下：\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f62o9qqyk2j21kw1gj1jo.jpg)\n\n\n\n## EventManager\n事件管理器类。基于Vector的消息队列，异步事件池。允许消息发送者`class TvOSEventSender`异步（发送到`class EventManager`内部的Vector消息队列后再一个个调用发送者的发送消息函数）及同步（立即直接调用发送者自己的消息发送函数）消息发送。\n### Dispatcher\n`class EventManager`创建了一个主检测发送线程`threadEventDispatcher()`来启动发送事件；同时初始化一个最大个数为4的线程池数组存储一系列发送事件任务（分别由各自的线程负责，在`StartPostThreadPool()`中创建），事件发送任务经由`class mapi_event`来完成发送任务启动消息，最终由线程池中的各个发送线程收到启动发送的消息后，自己调用发送者的发送消息函数来发送消息（在发送者各自的子类service中完成）。\n### Dispatch process\n当发送者`class TvOSEventSender `发送消息到`class EventManager`时，事件消息将存储在` vector<ST_TVOS_EVENT> tvos_event_queue`中。发送事件的工作线程`threadEventDispatcher()`中将根据`m_bPoolAvaliable`状态来决定是否进行分发工作，并检测`m_PostTaskCount`空闲的发送任务个数，来循环发送已经被填充的`tvos_event_dipatchqueue`事件队列，通过调用赋值的线程池数组`m_postevent_thread[i]`的成员`mapi_event`中的`send()`来发送`**POST_START**`消息给各自的线程发送处理函数`PostTask()`。当各自的线程接收到`**POST_START**`消息后，通过调用发送者`class TvOSEventSender`的成员函数`_PostEventToClient()`实现最终的消息发送。此消息发送即通过调用每个发送者模块自己的子类service中的`PostEventToClient()`函数来实现。如`bool CaManagerService::PostEventToClient(U32 nEvt, U32 wParam, U32 lParam)`。\n```cpp\nclass EventManager //事件管理器\n{\npublic:\n    EventManager();\n    ~EventManager();\n//获取实例对象\n    static EventManager * GetInstance();\n//销毁实例对象\n    static void Destroy();\n//初始化，并创建事件发送线程threadEventDispatcher()。最大4个发送事件线程空间。\n    bool Init(int paralTaskCount = MAX_POST_THREAD);\n    bool Finalize();\n//发送消息到EM。存储到tvos_event_queue中。默认不重复尝试。\n    bool PostEvent(ST_TVOS_EVENT s_Event, bool retry=false);\n//发送优先消息到EM。存储到优先队列tvos_event_tempqueue中。\n    bool PostEventToQueueForBoot(ST_TVOS_EVENT s_Event);\n//注册发送类型/者。枚举type与sender类一一对应。\n    bool RegisterSender(EN_POSTEVENT_SERVICE servicetype, TvOSEventSender* pSender);\n//取消注册发送类型/者\n    bool UnRegisterSender(EN_POSTEVENT_SERVICE servicetype);\n//通过发送消息类型找到发送者\n    TvOSEventSender * GetEventSender(EN_POSTEVENT_SERVICE servicetype);\n//初始化事件发送任务线程池数组，并创建对应的线程。创建m_PostTaskCount个mapi_event实例及各状态参数。\n    bool StartPostThreadPool();\n//关闭所有的事件发送任务及相关数据。关闭线程池，退出m_PostTaskCount mapi_event。\n    bool StopPostThreadPool();\n    bool IsTvListenerReady();\n    void SetTvListenerReady(bool isReady);\n//分发事件函数。\n//循环从tvos_event_dipatchqueue队列中事件通过空闲的m_postevent_thread[i]调用m_postevent_thread[i].NotifyEvt->Send()发送启动消息。\n//实际发送工作由线程池数组元素中的线程通过调用发送者自己的子类service的发送消息函数来完成发送。\n    void DispatchEvent()\n//线程池任务锁\n    pthread_mutex_t m_ThreadPoolLock;\n//线程池是否可用标志\n    bool m_bPoolAvaliable;\n\nprivate:\n//事件发送线程池中线程数据结构体\n    typedef struct {\n            pthread_t postevent_thread_handle;\n            pthread_cond_t postevent_thread_condition;\n            pthread_mutex_t postevent_thread_mutex;\n            ST_TVOS_EVENT a_Event;\n            mapi_event<POST_TASK_NOTIFY_EVENT> *NotifyEvt;\n            bool inited;\n            bool isBusy;\n            EventManager * pEventManager;\n    } postevent_thread_data;\n//发送事件线程数据状态存储数组。存储了MAX_POST_THREAD个mapi_event实例及线程。\n    postevent_thread_data m_postevent_thread[MAX_POST_THREAD];\n//发送事件线程实际计数\n    int m_PostTaskCount;\n//分发事件线程，调用DispatchEvent()函数分发事件。\n    static void* threadEventDispatcher(void *arg);\n//线程池中的线程处理函数。\n    static void* PostTask(void *pdata);\n//判断事件是否需要重发。\n    static bool EventNeedRetry(U32 evt, U32 wPparam);\n//事件管理器EM的实例\n    static EventManager *m_pInstance ;\n    static bool m_bInit;\n//事件注册列表，以<类型，发送者>存储。\n    std::map<int, TvOSEventSender* > m_ServiceMap;\n//普通事件发送队列。\n    vector<ST_TVOS_EVENT> tvos_event_queue;\n//实际事件发送空队列。发送时将tvos_event_tempqueue和tvos_event_queue中的事件加入并发送。\n    vector<ST_TVOS_EVENT> tvos_event_dipatchqueue;\n//存储优先发送的事件队列。\n    vector<ST_TVOS_EVENT> tvos_event_tempqueue;\n    pthread_mutexattr_t m_ServiceMapLockAttr;\n    pthread_mutex_t m_ServiceMapLock;\n    pthread_mutexattr_t m_QueueLockAttr;\n    pthread_mutex_t m_QueueLock;\n    pthread_mutexattr_t m_ThreadPoolAttr;\n    pthread_t m_threadEventDispatcher_id;\n    bool m_bDisPatchEnable;\n    bool m_TvListenerReady;\n};\n\nclass TvOSEventSender //事件发送者\n{\npublic:\n    mutable Mutex m_Lock;\npublic:\n    TvOSEventSender():m_Lock(Mutex::RECURSIVE){ m_ServiceType = E_MANAGER_NULL; m_bRegistered = false; m_bIsPosting = false;}\n    ~TvOSEventSender();\n//将发送者自己注册到事件管理器\n    bool RegisterToEM(EN_POSTEVENT_SERVICE servicetype);\n//取消注册\n    bool UnRegisterToEM();\n//发送消息到事件管理器。syncchronous参数提供同步与异步方式。默认为异步，即发送到EM事件管理器事件队列。\n    bool PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, int flag=EVENT_FLAG_NONE, U32 togglenEvt=NO_TOGGLE_EVT, bool syncchronous=false);\n//直接调用发送者自己的service中发送消息函数将消息立即发送出去。不经过事件管理器EM。即同步发送方式。\n    bool _PostEventToClient(U32 nEvt, U32 wParam, U32 lParam);\n//纯虚函数。要求继承此类的各种Service实现此消息发送函数，供同步发送方式使用。\n    virtual bool PostEventToClient(U32 nEvt, U32 wParam, U32 lParam) = 0;\n    void Clear();\n\nprotected:\n    bool m_bIsPosting;\n\nprivate:\n//把事件消息发送到事件管理器EM。\n    bool _PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, int flag, U32 togglenEvt);\n//发送事件的类型模块枚举定义（见如下枚举）\n    EN_POSTEVENT_SERVICE m_ServiceType;\n//是否注册到事件管理器EM的标志\n    bool m_bRegistered;\n};\n\ntypedef enum //发送事件的类型模块。每个类型都有一个class TvOSEventSender类的sender注册到事件管理器EM上。\n{\n    E_TVMANAGER,\n    E_PLAYERIMPL,\n    E_AUDIOMANAGER,\n    E_PICTUREMANAGER,\n    E_PIPMANAGER,\n    E_3DMANAGER,\n    E_TIMERMANAGER,\n    E_CAMANAGER,\n    E_CIMANAGER,\n    E_CECMANAGER,\n    E_MHLMANAGER,\n    E_THIRDPARTYMANAGER,\n    E_USBMASSSTORAGEMANAGER,\n    E_NETWORKMANAGER,\n    E_FACTORYMANAGER,\n    E_MANAGER_MAX,\n    E_MANAGER_NULL = E_MANAGER_MAX,\n}EN_POSTEVENT_SERVICE;\n\ntypedef struct //消息事件结构体\n{\n    U32 u32Evt;\n    U32 u32ToggleEvt;\n    U32 u32wParam;\n    U32 u32lParam;\n    EN_POSTEVENT_SERVICE enPostSer;//发送者。\n    U16 u16Flag;\n}ST_TVOS_EVENT;\n```\n\n\n\n\n","source":"_posts/mstar6586-supernova-note.md","raw":"---\ntitle: mstar6586 supernova note\ndate: 2016-07-22 14:12:52\ncategories:\n - work\ntags:\n - mstar\n - supernova\n---\n前阵子参与了目标市场为海外的，搭载Google Cast应用的TV项目。基于Mstar6586芯片，Linux做的案子。有很多亮点，感觉不错，特别是Mstar新的Supernova，对比之前Turnkey方案下的Pure Supernova进步很大。把过程中的学习笔记放上来记录一下。\n\n这个案子对比传统Linux的案子，比较特别的是IPC部分。它把Android的Binder机制裁剪一下引入进来了。这种IPC机制一下子就方便多了。把自己的Supernova中底层TvService进程与客户订制化要求很高的UI进程之间剥离开来，大大简化了底层逻辑的上层UI之间的耦合度。另外，它的APM部分也不错，有空再另说。\n\n<!-- more -->\n\n## Configuration\n**PATH**:`\\Supernova\\MStarSDK\\release\\lib.macan_build_Macan_093B_ROM_NAND_DVB_SERVICE.sh`\n### `\\Supernova\\out\\buildenv\\env.cfg`\n- CHIP=macan\n- BOARD=093B_DVB\n- TARGET_CPU=arm\n- TOOLCHAIN=arm-gnueabi\n- PROJ_MODE=dvb (support dvb/atsc/isdb)\n- LINK_TYPE=dynamic\n- TV_SYSTEM=dvbt2\n- EXT4=false\n\n### `Supernova\\out\\buildenv\\config\\buildenv.mk`\n- UI_PATH = ui/jarves/dvbt\n- UI_RESOLUTION = _FHD\n\n### `\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk`\n- DVB_ENABLE=1 \n    + DVBT=1\n    + DVBC=1\n    + DVBS=1\n    + DTMB=0\n    + ISDB=0\n- CI_ENABLE=1\n- CI_PLUS_ENABLE=1\n- HBBTV_ENABLE=1\n- MHEG5_ENABLE = 1\n- SUBTITLE_ENABLE = 1\n\n### `Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk`\n- ENABLE_BACKEND = 1\n- CHINA_ATV=0\n- CHINA_ENABLE=0\n\n### `Supernova\\out\\buildenv\\target\\default_setting.mk`\n- STORAGE_TYPE = nand\n    + UBIFS = true\n    + ext4 = false\n    + FS_TYPE = ubifs\n- BOOTLOGO_DELAY = 0\n- BOOTLOGO_DFBLAYER = 0\n- KERNEL_COMPRESS = 0\n\n### `Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk`\n- IMG_FOLDER = Supernova\\target\\dvb.macan\\images\n- APP_EXE_FILE =tvos\n- APP_PADDING_SIZE    = 0x01400000\n- CONFIG_PADDING_SIZE = 0x00100000\n- KERNEL_PADDING_SIZE = 0x00800000\n- MSLIB_PADDING_SIZE  = 0x00C00000\n- RFS_PADDING_SIZE = 0x00900000\n- CUS_PADDING_SIZE    = 0x00400000\n- CUSBK_PADDING_SIZE  = 0x00400000\n- ROOTFS_PADDING_SIZE = 0x00400000\n\n### `Supernova\\out\\buildenv\\config\\devices\\device_option.mk`\n- TUNER_AV2012 = 1\n- TUNER_MXL661 = 1\n- DEMOD_macan = 1\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk`\n- FLOATING = hardfloat\n- WIFI_80211CFG_ENABLE = 1\n- WIFI_DONGLE_RALINK_7632_ENABLE = 1\n- LIBDIR = lib_ipc.macan\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk`\n- MSTAR_IPC = 1\n    + MM_IPC_SERVICE_ENABLE = 1\n    + RVU_IPC_SERVICE_ENABLE = 1\n    + APP_IPC_SERVICE_ENABLE = 1\n    + MOUNTNOTIFIER_IPC_SERVICE_ENABLE = 1\n    + SECURE_IPC_SERVICE_ENABLE = 1\n    + TV_IPC_SERVICE_ENABLE = 1\n    + WEBAPPMGR_IPC_SERVICE_ENABLE = 1\n    + BROWSER_IPC_SERVICE_ENABLE = 1\n    + COMMUI_IPC_SERVICE_ENABLE = 1\n    + WIDI_IPC_SERVICE_ENABLE = 1\n- MSTAR_TVOS = 1\n    + SQL_DB_ENABLE = 1\n- MALI_ENABLE = 0\n- MSTAR_WEBUI = 0\n- PLATFORM_TYPE = MSTAR_PURESN\n\n### `Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk`\n+ KEYPAD_ENABLE = 1\n+ ENCRYPTED_NETWORK_UPGRADE_ENABLE = 1\n+ EPG_ENABLE = 1\n+ EPG_EED_ENABLE = 1\n+ PVR_ENABLE = 1\n+ PIP_ENABLE = 0\n+ TIMESHIFTSEAMLESS_ENABLE = 0\n+ BGPVR_ENABLE = 0\n+ OAD_ENABLE = 1 (DVB OAD Software System Update)\n+ SAMBA_CLIENT_ENABLE = 0\n+ PREVIEW_MODE_ENABLE = 0\n+ WIFI_ENABLE = 1 (Enable to use wifi function)\n+ BLUETOOTH_ENABLE = 0\n+ ACTIVE_STANDBY_MODE_ENABLE = 1 (Background recording function, for recording after TV turn off)\n+ ENABLE_DYNSCALING = 1 (enable dynamic scaling.)\n\n## Architecture\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f62o7mbac8j20go0frq6e.jpg)\n\n### Supernova\n- ATV Player: to provide the ATV basic functions: Display/Signal Monitor/Auto Tuning/Manual Tuning/Channel Up, down/...\n- MM Player: to provide the Multi Media basic functions: Play/Stop/...\n- DTV Player: to provide the DTV basic functions:Display/Signal Monitor/Scan/Channel Change/EPG/CI/MHEG5/PVR...\n- All other Player: to provide the basic functions for various input source: Display/Signal Monitor/...\n- Database: to provide the information saved in the EEprom. For example: Program Info and OSD Info\n- CIMMI: to provide CIMMI display information for CI card ui\n- Timer: to provide all time related functions\n- Channel Manager: wrapper for channel manage functions for ATV/DTV\n- Factory Mode: to provide factory setting interface to factory ui\n- Picture Quality: to provide the Picture basic functions. For example: Brightness, contrast, Color,...etc\n- Control Class(MSrv_Control): interface to get all kinds of MSrv objects\n- TTX class: to provide the TTX basic functions.\n\n\n### Msrv class Hierachy\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f62o8212wdj20l70elabp.jpg)\n\n\n### Msrv_Control\n总控类，是父类的**实例对象**。\n继承自`class MSrv_Control_DVB/MSrv_Control_ATSC`，\n再继承自`class MSrv_Control_TV/MSrv_Control_STB`，\n再继承自`class MSrv_Control_common`。\n\n例子：\nChange Input Source: MSrv_Control(MSrv_Control_DVB/MSrv_Control_common) class\n->SetInputSourceCmd(); \n继承关系图如下：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f62o8gmbv6j20qb08lq58.jpg)\n\n### TVOS Call Flow\n主要逻辑关系调用流程如下：\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f62o9qqyk2j21kw1gj1jo.jpg)\n\n\n\n## EventManager\n事件管理器类。基于Vector的消息队列，异步事件池。允许消息发送者`class TvOSEventSender`异步（发送到`class EventManager`内部的Vector消息队列后再一个个调用发送者的发送消息函数）及同步（立即直接调用发送者自己的消息发送函数）消息发送。\n### Dispatcher\n`class EventManager`创建了一个主检测发送线程`threadEventDispatcher()`来启动发送事件；同时初始化一个最大个数为4的线程池数组存储一系列发送事件任务（分别由各自的线程负责，在`StartPostThreadPool()`中创建），事件发送任务经由`class mapi_event`来完成发送任务启动消息，最终由线程池中的各个发送线程收到启动发送的消息后，自己调用发送者的发送消息函数来发送消息（在发送者各自的子类service中完成）。\n### Dispatch process\n当发送者`class TvOSEventSender `发送消息到`class EventManager`时，事件消息将存储在` vector<ST_TVOS_EVENT> tvos_event_queue`中。发送事件的工作线程`threadEventDispatcher()`中将根据`m_bPoolAvaliable`状态来决定是否进行分发工作，并检测`m_PostTaskCount`空闲的发送任务个数，来循环发送已经被填充的`tvos_event_dipatchqueue`事件队列，通过调用赋值的线程池数组`m_postevent_thread[i]`的成员`mapi_event`中的`send()`来发送`**POST_START**`消息给各自的线程发送处理函数`PostTask()`。当各自的线程接收到`**POST_START**`消息后，通过调用发送者`class TvOSEventSender`的成员函数`_PostEventToClient()`实现最终的消息发送。此消息发送即通过调用每个发送者模块自己的子类service中的`PostEventToClient()`函数来实现。如`bool CaManagerService::PostEventToClient(U32 nEvt, U32 wParam, U32 lParam)`。\n```cpp\nclass EventManager //事件管理器\n{\npublic:\n    EventManager();\n    ~EventManager();\n//获取实例对象\n    static EventManager * GetInstance();\n//销毁实例对象\n    static void Destroy();\n//初始化，并创建事件发送线程threadEventDispatcher()。最大4个发送事件线程空间。\n    bool Init(int paralTaskCount = MAX_POST_THREAD);\n    bool Finalize();\n//发送消息到EM。存储到tvos_event_queue中。默认不重复尝试。\n    bool PostEvent(ST_TVOS_EVENT s_Event, bool retry=false);\n//发送优先消息到EM。存储到优先队列tvos_event_tempqueue中。\n    bool PostEventToQueueForBoot(ST_TVOS_EVENT s_Event);\n//注册发送类型/者。枚举type与sender类一一对应。\n    bool RegisterSender(EN_POSTEVENT_SERVICE servicetype, TvOSEventSender* pSender);\n//取消注册发送类型/者\n    bool UnRegisterSender(EN_POSTEVENT_SERVICE servicetype);\n//通过发送消息类型找到发送者\n    TvOSEventSender * GetEventSender(EN_POSTEVENT_SERVICE servicetype);\n//初始化事件发送任务线程池数组，并创建对应的线程。创建m_PostTaskCount个mapi_event实例及各状态参数。\n    bool StartPostThreadPool();\n//关闭所有的事件发送任务及相关数据。关闭线程池，退出m_PostTaskCount mapi_event。\n    bool StopPostThreadPool();\n    bool IsTvListenerReady();\n    void SetTvListenerReady(bool isReady);\n//分发事件函数。\n//循环从tvos_event_dipatchqueue队列中事件通过空闲的m_postevent_thread[i]调用m_postevent_thread[i].NotifyEvt->Send()发送启动消息。\n//实际发送工作由线程池数组元素中的线程通过调用发送者自己的子类service的发送消息函数来完成发送。\n    void DispatchEvent()\n//线程池任务锁\n    pthread_mutex_t m_ThreadPoolLock;\n//线程池是否可用标志\n    bool m_bPoolAvaliable;\n\nprivate:\n//事件发送线程池中线程数据结构体\n    typedef struct {\n            pthread_t postevent_thread_handle;\n            pthread_cond_t postevent_thread_condition;\n            pthread_mutex_t postevent_thread_mutex;\n            ST_TVOS_EVENT a_Event;\n            mapi_event<POST_TASK_NOTIFY_EVENT> *NotifyEvt;\n            bool inited;\n            bool isBusy;\n            EventManager * pEventManager;\n    } postevent_thread_data;\n//发送事件线程数据状态存储数组。存储了MAX_POST_THREAD个mapi_event实例及线程。\n    postevent_thread_data m_postevent_thread[MAX_POST_THREAD];\n//发送事件线程实际计数\n    int m_PostTaskCount;\n//分发事件线程，调用DispatchEvent()函数分发事件。\n    static void* threadEventDispatcher(void *arg);\n//线程池中的线程处理函数。\n    static void* PostTask(void *pdata);\n//判断事件是否需要重发。\n    static bool EventNeedRetry(U32 evt, U32 wPparam);\n//事件管理器EM的实例\n    static EventManager *m_pInstance ;\n    static bool m_bInit;\n//事件注册列表，以<类型，发送者>存储。\n    std::map<int, TvOSEventSender* > m_ServiceMap;\n//普通事件发送队列。\n    vector<ST_TVOS_EVENT> tvos_event_queue;\n//实际事件发送空队列。发送时将tvos_event_tempqueue和tvos_event_queue中的事件加入并发送。\n    vector<ST_TVOS_EVENT> tvos_event_dipatchqueue;\n//存储优先发送的事件队列。\n    vector<ST_TVOS_EVENT> tvos_event_tempqueue;\n    pthread_mutexattr_t m_ServiceMapLockAttr;\n    pthread_mutex_t m_ServiceMapLock;\n    pthread_mutexattr_t m_QueueLockAttr;\n    pthread_mutex_t m_QueueLock;\n    pthread_mutexattr_t m_ThreadPoolAttr;\n    pthread_t m_threadEventDispatcher_id;\n    bool m_bDisPatchEnable;\n    bool m_TvListenerReady;\n};\n\nclass TvOSEventSender //事件发送者\n{\npublic:\n    mutable Mutex m_Lock;\npublic:\n    TvOSEventSender():m_Lock(Mutex::RECURSIVE){ m_ServiceType = E_MANAGER_NULL; m_bRegistered = false; m_bIsPosting = false;}\n    ~TvOSEventSender();\n//将发送者自己注册到事件管理器\n    bool RegisterToEM(EN_POSTEVENT_SERVICE servicetype);\n//取消注册\n    bool UnRegisterToEM();\n//发送消息到事件管理器。syncchronous参数提供同步与异步方式。默认为异步，即发送到EM事件管理器事件队列。\n    bool PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, int flag=EVENT_FLAG_NONE, U32 togglenEvt=NO_TOGGLE_EVT, bool syncchronous=false);\n//直接调用发送者自己的service中发送消息函数将消息立即发送出去。不经过事件管理器EM。即同步发送方式。\n    bool _PostEventToClient(U32 nEvt, U32 wParam, U32 lParam);\n//纯虚函数。要求继承此类的各种Service实现此消息发送函数，供同步发送方式使用。\n    virtual bool PostEventToClient(U32 nEvt, U32 wParam, U32 lParam) = 0;\n    void Clear();\n\nprotected:\n    bool m_bIsPosting;\n\nprivate:\n//把事件消息发送到事件管理器EM。\n    bool _PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, int flag, U32 togglenEvt);\n//发送事件的类型模块枚举定义（见如下枚举）\n    EN_POSTEVENT_SERVICE m_ServiceType;\n//是否注册到事件管理器EM的标志\n    bool m_bRegistered;\n};\n\ntypedef enum //发送事件的类型模块。每个类型都有一个class TvOSEventSender类的sender注册到事件管理器EM上。\n{\n    E_TVMANAGER,\n    E_PLAYERIMPL,\n    E_AUDIOMANAGER,\n    E_PICTUREMANAGER,\n    E_PIPMANAGER,\n    E_3DMANAGER,\n    E_TIMERMANAGER,\n    E_CAMANAGER,\n    E_CIMANAGER,\n    E_CECMANAGER,\n    E_MHLMANAGER,\n    E_THIRDPARTYMANAGER,\n    E_USBMASSSTORAGEMANAGER,\n    E_NETWORKMANAGER,\n    E_FACTORYMANAGER,\n    E_MANAGER_MAX,\n    E_MANAGER_NULL = E_MANAGER_MAX,\n}EN_POSTEVENT_SERVICE;\n\ntypedef struct //消息事件结构体\n{\n    U32 u32Evt;\n    U32 u32ToggleEvt;\n    U32 u32wParam;\n    U32 u32lParam;\n    EN_POSTEVENT_SERVICE enPostSer;//发送者。\n    U16 u16Flag;\n}ST_TVOS_EVENT;\n```\n\n\n\n\n","slug":"mstar6586-supernova-note","published":1,"updated":"2016-09-06T08:44:45.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18f001ifgn9m1f0ysmn","content":"<p>前阵子参与了目标市场为海外的，搭载Google Cast应用的TV项目。基于Mstar6586芯片，Linux做的案子。有很多亮点，感觉不错，特别是Mstar新的Supernova，对比之前Turnkey方案下的Pure Supernova进步很大。把过程中的学习笔记放上来记录一下。</p>\n<p>这个案子对比传统Linux的案子，比较特别的是IPC部分。它把Android的Binder机制裁剪一下引入进来了。这种IPC机制一下子就方便多了。把自己的Supernova中底层TvService进程与客户订制化要求很高的UI进程之间剥离开来，大大简化了底层逻辑的上层UI之间的耦合度。另外，它的APM部分也不错，有空再另说。</p>\n<a id=\"more\"></a>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p><strong>PATH</strong>:<code>\\Supernova\\MStarSDK\\release\\lib.macan_build_Macan_093B_ROM_NAND_DVB_SERVICE.sh</code></p>\n<h3 id=\"Supernova-out-buildenv-env-cfg\"><a href=\"#Supernova-out-buildenv-env-cfg\" class=\"headerlink\" title=\"\\Supernova\\out\\buildenv\\env.cfg\"></a><code>\\Supernova\\out\\buildenv\\env.cfg</code></h3><ul>\n<li>CHIP=macan</li>\n<li>BOARD=093B_DVB</li>\n<li>TARGET_CPU=arm</li>\n<li>TOOLCHAIN=arm-gnueabi</li>\n<li>PROJ_MODE=dvb (support dvb/atsc/isdb)</li>\n<li>LINK_TYPE=dynamic</li>\n<li>TV_SYSTEM=dvbt2</li>\n<li>EXT4=false</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-buildenv-mk\"><a href=\"#Supernova-out-buildenv-config-buildenv-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\buildenv.mk\"></a><code>Supernova\\out\\buildenv\\config\\buildenv.mk</code></h3><ul>\n<li>UI_PATH = ui/jarves/dvbt</li>\n<li>UI_RESOLUTION = _FHD</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-tvsystem-dtv-dvb-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-tvsystem-dtv-dvb-mk\" class=\"headerlink\" title=\"\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk\"></a><code>\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk</code></h3><ul>\n<li>DVB_ENABLE=1 <ul>\n<li>DVBT=1</li>\n<li>DVBC=1</li>\n<li>DVBS=1</li>\n<li>DTMB=0</li>\n<li>ISDB=0</li>\n</ul>\n</li>\n<li>CI_ENABLE=1</li>\n<li>CI_PLUS_ENABLE=1</li>\n<li>HBBTV_ENABLE=1</li>\n<li>MHEG5_ENABLE = 1</li>\n<li>SUBTITLE_ENABLE = 1</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-chips-macan-MST093B-10APY-15445-DVB-pcb-config-mk\"><a href=\"#Supernova-out-buildenv-config-chips-macan-MST093B-10APY-15445-DVB-pcb-config-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk\"></a><code>Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk</code></h3><ul>\n<li>ENABLE_BACKEND = 1</li>\n<li>CHINA_ATV=0</li>\n<li>CHINA_ENABLE=0</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-target-default-setting-mk\"><a href=\"#Supernova-out-buildenv-target-default-setting-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\target\\default_setting.mk\"></a><code>Supernova\\out\\buildenv\\target\\default_setting.mk</code></h3><ul>\n<li>STORAGE_TYPE = nand<ul>\n<li>UBIFS = true</li>\n<li>ext4 = false</li>\n<li>FS_TYPE = ubifs</li>\n</ul>\n</li>\n<li>BOOTLOGO_DELAY = 0</li>\n<li>BOOTLOGO_DFBLAYER = 0</li>\n<li>KERNEL_COMPRESS = 0</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-target-dvb-macan-image-setup-mk\"><a href=\"#Supernova-out-buildenv-target-dvb-macan-image-setup-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk\"></a><code>Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk</code></h3><ul>\n<li>IMG_FOLDER = Supernova\\target\\dvb.macan\\images</li>\n<li>APP_EXE_FILE =tvos</li>\n<li>APP_PADDING_SIZE    = 0x01400000</li>\n<li>CONFIG_PADDING_SIZE = 0x00100000</li>\n<li>KERNEL_PADDING_SIZE = 0x00800000</li>\n<li>MSLIB_PADDING_SIZE  = 0x00C00000</li>\n<li>RFS_PADDING_SIZE = 0x00900000</li>\n<li>CUS_PADDING_SIZE    = 0x00400000</li>\n<li>CUSBK_PADDING_SIZE  = 0x00400000</li>\n<li>ROOTFS_PADDING_SIZE = 0x00400000</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-devices-device-option-mk\"><a href=\"#Supernova-out-buildenv-config-devices-device-option-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\devices\\device_option.mk\"></a><code>Supernova\\out\\buildenv\\config\\devices\\device_option.mk</code></h3><ul>\n<li>TUNER_AV2012 = 1</li>\n<li>TUNER_MXL661 = 1</li>\n<li>DEMOD_macan = 1</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-ext-devices-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-ext-devices-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk</code></h3><ul>\n<li>FLOATING = hardfloat</li>\n<li>WIFI_80211CFG_ENABLE = 1</li>\n<li>WIFI_DONGLE_RALINK_7632_ENABLE = 1</li>\n<li>LIBDIR = lib_ipc.macan</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-platform-platform-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-platform-platform-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk</code></h3><ul>\n<li>MSTAR_IPC = 1<ul>\n<li>MM_IPC_SERVICE_ENABLE = 1</li>\n<li>RVU_IPC_SERVICE_ENABLE = 1</li>\n<li>APP_IPC_SERVICE_ENABLE = 1</li>\n<li>MOUNTNOTIFIER_IPC_SERVICE_ENABLE = 1</li>\n<li>SECURE_IPC_SERVICE_ENABLE = 1</li>\n<li>TV_IPC_SERVICE_ENABLE = 1</li>\n<li>WEBAPPMGR_IPC_SERVICE_ENABLE = 1</li>\n<li>BROWSER_IPC_SERVICE_ENABLE = 1</li>\n<li>COMMUI_IPC_SERVICE_ENABLE = 1</li>\n<li>WIDI_IPC_SERVICE_ENABLE = 1</li>\n</ul>\n</li>\n<li>MSTAR_TVOS = 1<ul>\n<li>SQL_DB_ENABLE = 1</li>\n</ul>\n</li>\n<li>MALI_ENABLE = 0</li>\n<li>MSTAR_WEBUI = 0</li>\n<li>PLATFORM_TYPE = MSTAR_PURESN</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-common-feature-common-feature-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-common-feature-common-feature-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk</code></h3><ul>\n<li>KEYPAD_ENABLE = 1</li>\n<li>ENCRYPTED_NETWORK_UPGRADE_ENABLE = 1</li>\n<li>EPG_ENABLE = 1</li>\n<li>EPG_EED_ENABLE = 1</li>\n<li>PVR_ENABLE = 1</li>\n<li>PIP_ENABLE = 0</li>\n<li>TIMESHIFTSEAMLESS_ENABLE = 0</li>\n<li>BGPVR_ENABLE = 0</li>\n<li>OAD_ENABLE = 1 (DVB OAD Software System Update)</li>\n<li>SAMBA_CLIENT_ENABLE = 0</li>\n<li>PREVIEW_MODE_ENABLE = 0</li>\n<li>WIFI_ENABLE = 1 (Enable to use wifi function)</li>\n<li>BLUETOOTH_ENABLE = 0</li>\n<li>ACTIVE_STANDBY_MODE_ENABLE = 1 (Background recording function, for recording after TV turn off)</li>\n<li>ENABLE_DYNSCALING = 1 (enable dynamic scaling.)</li>\n</ul>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f62o7mbac8j20go0frq6e.jpg\" alt=\"\"></p>\n<h3 id=\"Supernova\"><a href=\"#Supernova\" class=\"headerlink\" title=\"Supernova\"></a>Supernova</h3><ul>\n<li>ATV Player: to provide the ATV basic functions: Display/Signal Monitor/Auto Tuning/Manual Tuning/Channel Up, down/…</li>\n<li>MM Player: to provide the Multi Media basic functions: Play/Stop/…</li>\n<li>DTV Player: to provide the DTV basic functions:Display/Signal Monitor/Scan/Channel Change/EPG/CI/MHEG5/PVR…</li>\n<li>All other Player: to provide the basic functions for various input source: Display/Signal Monitor/…</li>\n<li>Database: to provide the information saved in the EEprom. For example: Program Info and OSD Info</li>\n<li>CIMMI: to provide CIMMI display information for CI card ui</li>\n<li>Timer: to provide all time related functions</li>\n<li>Channel Manager: wrapper for channel manage functions for ATV/DTV</li>\n<li>Factory Mode: to provide factory setting interface to factory ui</li>\n<li>Picture Quality: to provide the Picture basic functions. For example: Brightness, contrast, Color,…etc</li>\n<li>Control Class(MSrv_Control): interface to get all kinds of MSrv objects</li>\n<li>TTX class: to provide the TTX basic functions.</li>\n</ul>\n<h3 id=\"Msrv-class-Hierachy\"><a href=\"#Msrv-class-Hierachy\" class=\"headerlink\" title=\"Msrv class Hierachy\"></a>Msrv class Hierachy</h3><p><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f62o8212wdj20l70elabp.jpg\" alt=\"\"></p>\n<h3 id=\"Msrv-Control\"><a href=\"#Msrv-Control\" class=\"headerlink\" title=\"Msrv_Control\"></a>Msrv_Control</h3><p>总控类，是父类的<strong>实例对象</strong>。<br>继承自<code>class MSrv_Control_DVB/MSrv_Control_ATSC</code>，<br>再继承自<code>class MSrv_Control_TV/MSrv_Control_STB</code>，<br>再继承自<code>class MSrv_Control_common</code>。</p>\n<p>例子：<br>Change Input Source: MSrv_Control(MSrv_Control_DVB/MSrv_Control_common) class<br>-&gt;SetInputSourceCmd();<br>继承关系图如下：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f62o8gmbv6j20qb08lq58.jpg\" alt=\"\"></p>\n<h3 id=\"TVOS-Call-Flow\"><a href=\"#TVOS-Call-Flow\" class=\"headerlink\" title=\"TVOS Call Flow\"></a>TVOS Call Flow</h3><p>主要逻辑关系调用流程如下：<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f62o9qqyk2j21kw1gj1jo.jpg\" alt=\"\"></p>\n<h2 id=\"EventManager\"><a href=\"#EventManager\" class=\"headerlink\" title=\"EventManager\"></a>EventManager</h2><p>事件管理器类。基于Vector的消息队列，异步事件池。允许消息发送者<code>class TvOSEventSender</code>异步（发送到<code>class EventManager</code>内部的Vector消息队列后再一个个调用发送者的发送消息函数）及同步（立即直接调用发送者自己的消息发送函数）消息发送。</p>\n<h3 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h3><p><code>class EventManager</code>创建了一个主检测发送线程<code>threadEventDispatcher()</code>来启动发送事件；同时初始化一个最大个数为4的线程池数组存储一系列发送事件任务（分别由各自的线程负责，在<code>StartPostThreadPool()</code>中创建），事件发送任务经由<code>class mapi_event</code>来完成发送任务启动消息，最终由线程池中的各个发送线程收到启动发送的消息后，自己调用发送者的发送消息函数来发送消息（在发送者各自的子类service中完成）。</p>\n<h3 id=\"Dispatch-process\"><a href=\"#Dispatch-process\" class=\"headerlink\" title=\"Dispatch process\"></a>Dispatch process</h3><p>当发送者<code>class TvOSEventSender</code>发送消息到<code>class EventManager</code>时，事件消息将存储在<code>vector&lt;ST_TVOS_EVENT&gt; tvos_event_queue</code>中。发送事件的工作线程<code>threadEventDispatcher()</code>中将根据<code>m_bPoolAvaliable</code>状态来决定是否进行分发工作，并检测<code>m_PostTaskCount</code>空闲的发送任务个数，来循环发送已经被填充的<code>tvos_event_dipatchqueue</code>事件队列，通过调用赋值的线程池数组<code>m_postevent_thread[i]</code>的成员<code>mapi_event</code>中的<code>send()</code>来发送<code>**POST_START**</code>消息给各自的线程发送处理函数<code>PostTask()</code>。当各自的线程接收到<code>**POST_START**</code>消息后，通过调用发送者<code>class TvOSEventSender</code>的成员函数<code>_PostEventToClient()</code>实现最终的消息发送。此消息发送即通过调用每个发送者模块自己的子类service中的<code>PostEventToClient()</code>函数来实现。如<code>bool CaManagerService::PostEventToClient(U32 nEvt, U32 wParam, U32 lParam)</code>。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventManager <span class=\"comment\">//事件管理器</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    EventManager();</div><div class=\"line\">    ~EventManager();</div><div class=\"line\"><span class=\"comment\">//获取实例对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> EventManager * <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//销毁实例对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//初始化，并创建事件发送线程threadEventDispatcher()。最大4个发送事件线程空间。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"keyword\">int</span> paralTaskCount = MAX_POST_THREAD)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Finalize</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送消息到EM。存储到tvos_event_queue中。默认不重复尝试。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEvent</span><span class=\"params\">(ST_TVOS_EVENT s_Event, <span class=\"keyword\">bool</span> retry=<span class=\"literal\">false</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送优先消息到EM。存储到优先队列tvos_event_tempqueue中。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEventToQueueForBoot</span><span class=\"params\">(ST_TVOS_EVENT s_Event)</span></span>;</div><div class=\"line\"><span class=\"comment\">//注册发送类型/者。枚举type与sender类一一对应。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype, TvOSEventSender* pSender)</span></span>;</div><div class=\"line\"><span class=\"comment\">//取消注册发送类型/者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnRegisterSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//通过发送消息类型找到发送者</span></div><div class=\"line\">    <span class=\"function\">TvOSEventSender * <span class=\"title\">GetEventSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//初始化事件发送任务线程池数组，并创建对应的线程。创建m_PostTaskCount个mapi_event实例及各状态参数。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartPostThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//关闭所有的事件发送任务及相关数据。关闭线程池，退出m_PostTaskCount mapi_event。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopPostThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsTvListenerReady</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetTvListenerReady</span><span class=\"params\">(<span class=\"keyword\">bool</span> isReady)</span></span>;</div><div class=\"line\"><span class=\"comment\">//分发事件函数。</span></div><div class=\"line\"><span class=\"comment\">//循环从tvos_event_dipatchqueue队列中事件通过空闲的m_postevent_thread[i]调用m_postevent_thread[i].NotifyEvt-&gt;Send()发送启动消息。</span></div><div class=\"line\"><span class=\"comment\">//实际发送工作由线程池数组元素中的线程通过调用发送者自己的子类service的发送消息函数来完成发送。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DispatchEvent</span><span class=\"params\">()</span></span></div><div class=\"line\"><span class=\"comment\">//线程池任务锁</span></div><div class=\"line\">    pthread_mutex_t m_ThreadPoolLock;</div><div class=\"line\"><span class=\"comment\">//线程池是否可用标志</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bPoolAvaliable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\"><span class=\"comment\">//事件发送线程池中线程数据结构体</span></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">pthread_t</span> postevent_thread_handle;</div><div class=\"line\">            <span class=\"keyword\">pthread_cond_t</span> postevent_thread_condition;</div><div class=\"line\">            <span class=\"keyword\">pthread_mutex_t</span> postevent_thread_mutex;</div><div class=\"line\">            ST_TVOS_EVENT a_Event;</div><div class=\"line\">            mapi_event&lt;POST_TASK_NOTIFY_EVENT&gt; *NotifyEvt;</div><div class=\"line\">            <span class=\"keyword\">bool</span> inited;</div><div class=\"line\">            <span class=\"keyword\">bool</span> isBusy;</div><div class=\"line\">            EventManager * pEventManager;</div><div class=\"line\">    &#125; postevent_thread_data;</div><div class=\"line\"><span class=\"comment\">//发送事件线程数据状态存储数组。存储了MAX_POST_THREAD个mapi_event实例及线程。</span></div><div class=\"line\">    postevent_thread_data m_postevent_thread[MAX_POST_THREAD];</div><div class=\"line\"><span class=\"comment\">//发送事件线程实际计数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> m_PostTaskCount;</div><div class=\"line\"><span class=\"comment\">//分发事件线程，调用DispatchEvent()函数分发事件。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">threadEventDispatcher</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"><span class=\"comment\">//线程池中的线程处理函数。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">PostTask</span><span class=\"params\">(<span class=\"keyword\">void</span> *pdata)</span></span>;</div><div class=\"line\"><span class=\"comment\">//判断事件是否需要重发。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">EventNeedRetry</span><span class=\"params\">(U32 evt, U32 wPparam)</span></span>;</div><div class=\"line\"><span class=\"comment\">//事件管理器EM的实例</span></div><div class=\"line\">    <span class=\"keyword\">static</span> EventManager *m_pInstance ;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> m_bInit;</div><div class=\"line\"><span class=\"comment\">//事件注册列表，以&lt;类型，发送者&gt;存储。</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, TvOSEventSender* &gt; m_ServiceMap;</div><div class=\"line\"><span class=\"comment\">//普通事件发送队列。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_queue;</div><div class=\"line\"><span class=\"comment\">//实际事件发送空队列。发送时将tvos_event_tempqueue和tvos_event_queue中的事件加入并发送。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_dipatchqueue;</div><div class=\"line\"><span class=\"comment\">//存储优先发送的事件队列。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_tempqueue;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_ServiceMapLockAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> m_ServiceMapLock;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_QueueLockAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> m_QueueLock;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_ThreadPoolAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> m_threadEventDispatcher_id;</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bDisPatchEnable;</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_TvListenerReady;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> TvOSEventSender <span class=\"comment\">//事件发送者</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">mutable</span> Mutex m_Lock;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    TvOSEventSender():m_Lock(Mutex::RECURSIVE)&#123; m_ServiceType = E_MANAGER_NULL; m_bRegistered = <span class=\"literal\">false</span>; m_bIsPosting = <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">    ~TvOSEventSender();</div><div class=\"line\"><span class=\"comment\">//将发送者自己注册到事件管理器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterToEM</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//取消注册</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnRegisterToEM</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送消息到事件管理器。syncchronous参数提供同步与异步方式。默认为异步，即发送到EM事件管理器事件队列。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEventToEM</span><span class=\"params\">(U32 nEvt, U32 wParam, U32 lParam, <span class=\"keyword\">int</span> flag=EVENT_FLAG_NONE, U32 togglenEvt=NO_TOGGLE_EVT, <span class=\"keyword\">bool</span> syncchronous=<span class=\"literal\">false</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//直接调用发送者自己的service中发送消息函数将消息立即发送出去。不经过事件管理器EM。即同步发送方式。</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"number\">_</span>PostEventToClient(U32 nEvt, U32 wParam, U32 lParam);</div><div class=\"line\"><span class=\"comment\">//纯虚函数。要求继承此类的各种Service实现此消息发送函数，供同步发送方式使用。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">PostEventToClient</span><span class=\"params\">(U32 nEvt, U32 wParam, U32 lParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>:</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bIsPosting;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\"><span class=\"comment\">//把事件消息发送到事件管理器EM。</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"number\">_</span>PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, <span class=\"keyword\">int</span> flag, U32 togglenEvt);</div><div class=\"line\"><span class=\"comment\">//发送事件的类型模块枚举定义（见如下枚举）</span></div><div class=\"line\">    EN_POSTEVENT_SERVICE m_ServiceType;</div><div class=\"line\"><span class=\"comment\">//是否注册到事件管理器EM的标志</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bRegistered;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <span class=\"comment\">//发送事件的类型模块。每个类型都有一个class TvOSEventSender类的sender注册到事件管理器EM上。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    E_TVMANAGER,</div><div class=\"line\">    E_PLAYERIMPL,</div><div class=\"line\">    E_AUDIOMANAGER,</div><div class=\"line\">    E_PICTUREMANAGER,</div><div class=\"line\">    E_PIPMANAGER,</div><div class=\"line\">    E_3DMANAGER,</div><div class=\"line\">    E_TIMERMANAGER,</div><div class=\"line\">    E_CAMANAGER,</div><div class=\"line\">    E_CIMANAGER,</div><div class=\"line\">    E_CECMANAGER,</div><div class=\"line\">    E_MHLMANAGER,</div><div class=\"line\">    E_THIRDPARTYMANAGER,</div><div class=\"line\">    E_USBMASSSTORAGEMANAGER,</div><div class=\"line\">    E_NETWORKMANAGER,</div><div class=\"line\">    E_FACTORYMANAGER,</div><div class=\"line\">    E_MANAGER_MAX,</div><div class=\"line\">    E_MANAGER_NULL = E_MANAGER_MAX,</div><div class=\"line\">&#125;EN_POSTEVENT_SERVICE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"comment\">//消息事件结构体</span></div><div class=\"line\">&#123;</div><div class=\"line\">    U32 u32Evt;</div><div class=\"line\">    U32 u32ToggleEvt;</div><div class=\"line\">    U32 u32wParam;</div><div class=\"line\">    U32 u32lParam;</div><div class=\"line\">    EN_POSTEVENT_SERVICE enPostSer;<span class=\"comment\">//发送者。</span></div><div class=\"line\">    U16 u16Flag;</div><div class=\"line\">&#125;ST_TVOS_EVENT;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>前阵子参与了目标市场为海外的，搭载Google Cast应用的TV项目。基于Mstar6586芯片，Linux做的案子。有很多亮点，感觉不错，特别是Mstar新的Supernova，对比之前Turnkey方案下的Pure Supernova进步很大。把过程中的学习笔记放上来记录一下。</p>\n<p>这个案子对比传统Linux的案子，比较特别的是IPC部分。它把Android的Binder机制裁剪一下引入进来了。这种IPC机制一下子就方便多了。把自己的Supernova中底层TvService进程与客户订制化要求很高的UI进程之间剥离开来，大大简化了底层逻辑的上层UI之间的耦合度。另外，它的APM部分也不错，有空再另说。</p>","more":"<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p><strong>PATH</strong>:<code>\\Supernova\\MStarSDK\\release\\lib.macan_build_Macan_093B_ROM_NAND_DVB_SERVICE.sh</code></p>\n<h3 id=\"Supernova-out-buildenv-env-cfg\"><a href=\"#Supernova-out-buildenv-env-cfg\" class=\"headerlink\" title=\"\\Supernova\\out\\buildenv\\env.cfg\"></a><code>\\Supernova\\out\\buildenv\\env.cfg</code></h3><ul>\n<li>CHIP=macan</li>\n<li>BOARD=093B_DVB</li>\n<li>TARGET_CPU=arm</li>\n<li>TOOLCHAIN=arm-gnueabi</li>\n<li>PROJ_MODE=dvb (support dvb/atsc/isdb)</li>\n<li>LINK_TYPE=dynamic</li>\n<li>TV_SYSTEM=dvbt2</li>\n<li>EXT4=false</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-buildenv-mk\"><a href=\"#Supernova-out-buildenv-config-buildenv-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\buildenv.mk\"></a><code>Supernova\\out\\buildenv\\config\\buildenv.mk</code></h3><ul>\n<li>UI_PATH = ui/jarves/dvbt</li>\n<li>UI_RESOLUTION = _FHD</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-tvsystem-dtv-dvb-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-tvsystem-dtv-dvb-mk\" class=\"headerlink\" title=\"\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk\"></a><code>\\Supernova\\out\\buildenv\\config\\sw_cfg\\tvsystem\\dtv\\dvb.mk</code></h3><ul>\n<li>DVB_ENABLE=1 <ul>\n<li>DVBT=1</li>\n<li>DVBC=1</li>\n<li>DVBS=1</li>\n<li>DTMB=0</li>\n<li>ISDB=0</li>\n</ul>\n</li>\n<li>CI_ENABLE=1</li>\n<li>CI_PLUS_ENABLE=1</li>\n<li>HBBTV_ENABLE=1</li>\n<li>MHEG5_ENABLE = 1</li>\n<li>SUBTITLE_ENABLE = 1</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-chips-macan-MST093B-10APY-15445-DVB-pcb-config-mk\"><a href=\"#Supernova-out-buildenv-config-chips-macan-MST093B-10APY-15445-DVB-pcb-config-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk\"></a><code>Supernova\\out\\buildenv\\config\\chips\\macan\\MST093B_10APY_15445_DVB\\pcb_config.mk</code></h3><ul>\n<li>ENABLE_BACKEND = 1</li>\n<li>CHINA_ATV=0</li>\n<li>CHINA_ENABLE=0</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-target-default-setting-mk\"><a href=\"#Supernova-out-buildenv-target-default-setting-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\target\\default_setting.mk\"></a><code>Supernova\\out\\buildenv\\target\\default_setting.mk</code></h3><ul>\n<li>STORAGE_TYPE = nand<ul>\n<li>UBIFS = true</li>\n<li>ext4 = false</li>\n<li>FS_TYPE = ubifs</li>\n</ul>\n</li>\n<li>BOOTLOGO_DELAY = 0</li>\n<li>BOOTLOGO_DFBLAYER = 0</li>\n<li>KERNEL_COMPRESS = 0</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-target-dvb-macan-image-setup-mk\"><a href=\"#Supernova-out-buildenv-target-dvb-macan-image-setup-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk\"></a><code>Supernova\\out\\buildenv\\target\\dvb.macan\\image_setup.mk</code></h3><ul>\n<li>IMG_FOLDER = Supernova\\target\\dvb.macan\\images</li>\n<li>APP_EXE_FILE =tvos</li>\n<li>APP_PADDING_SIZE    = 0x01400000</li>\n<li>CONFIG_PADDING_SIZE = 0x00100000</li>\n<li>KERNEL_PADDING_SIZE = 0x00800000</li>\n<li>MSLIB_PADDING_SIZE  = 0x00C00000</li>\n<li>RFS_PADDING_SIZE = 0x00900000</li>\n<li>CUS_PADDING_SIZE    = 0x00400000</li>\n<li>CUSBK_PADDING_SIZE  = 0x00400000</li>\n<li>ROOTFS_PADDING_SIZE = 0x00400000</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-devices-device-option-mk\"><a href=\"#Supernova-out-buildenv-config-devices-device-option-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\devices\\device_option.mk\"></a><code>Supernova\\out\\buildenv\\config\\devices\\device_option.mk</code></h3><ul>\n<li>TUNER_AV2012 = 1</li>\n<li>TUNER_MXL661 = 1</li>\n<li>DEMOD_macan = 1</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-ext-devices-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-ext-devices-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\ext_devices.mk</code></h3><ul>\n<li>FLOATING = hardfloat</li>\n<li>WIFI_80211CFG_ENABLE = 1</li>\n<li>WIFI_DONGLE_RALINK_7632_ENABLE = 1</li>\n<li>LIBDIR = lib_ipc.macan</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-platform-platform-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-platform-platform-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\platform\\platform.mk</code></h3><ul>\n<li>MSTAR_IPC = 1<ul>\n<li>MM_IPC_SERVICE_ENABLE = 1</li>\n<li>RVU_IPC_SERVICE_ENABLE = 1</li>\n<li>APP_IPC_SERVICE_ENABLE = 1</li>\n<li>MOUNTNOTIFIER_IPC_SERVICE_ENABLE = 1</li>\n<li>SECURE_IPC_SERVICE_ENABLE = 1</li>\n<li>TV_IPC_SERVICE_ENABLE = 1</li>\n<li>WEBAPPMGR_IPC_SERVICE_ENABLE = 1</li>\n<li>BROWSER_IPC_SERVICE_ENABLE = 1</li>\n<li>COMMUI_IPC_SERVICE_ENABLE = 1</li>\n<li>WIDI_IPC_SERVICE_ENABLE = 1</li>\n</ul>\n</li>\n<li>MSTAR_TVOS = 1<ul>\n<li>SQL_DB_ENABLE = 1</li>\n</ul>\n</li>\n<li>MALI_ENABLE = 0</li>\n<li>MSTAR_WEBUI = 0</li>\n<li>PLATFORM_TYPE = MSTAR_PURESN</li>\n</ul>\n<h3 id=\"Supernova-out-buildenv-config-sw-cfg-common-feature-common-feature-mk\"><a href=\"#Supernova-out-buildenv-config-sw-cfg-common-feature-common-feature-mk\" class=\"headerlink\" title=\"Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk\"></a><code>Supernova\\out\\buildenv\\config\\sw_cfg\\common_feature\\common_feature.mk</code></h3><ul>\n<li>KEYPAD_ENABLE = 1</li>\n<li>ENCRYPTED_NETWORK_UPGRADE_ENABLE = 1</li>\n<li>EPG_ENABLE = 1</li>\n<li>EPG_EED_ENABLE = 1</li>\n<li>PVR_ENABLE = 1</li>\n<li>PIP_ENABLE = 0</li>\n<li>TIMESHIFTSEAMLESS_ENABLE = 0</li>\n<li>BGPVR_ENABLE = 0</li>\n<li>OAD_ENABLE = 1 (DVB OAD Software System Update)</li>\n<li>SAMBA_CLIENT_ENABLE = 0</li>\n<li>PREVIEW_MODE_ENABLE = 0</li>\n<li>WIFI_ENABLE = 1 (Enable to use wifi function)</li>\n<li>BLUETOOTH_ENABLE = 0</li>\n<li>ACTIVE_STANDBY_MODE_ENABLE = 1 (Background recording function, for recording after TV turn off)</li>\n<li>ENABLE_DYNSCALING = 1 (enable dynamic scaling.)</li>\n</ul>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f62o7mbac8j20go0frq6e.jpg\" alt=\"\"></p>\n<h3 id=\"Supernova\"><a href=\"#Supernova\" class=\"headerlink\" title=\"Supernova\"></a>Supernova</h3><ul>\n<li>ATV Player: to provide the ATV basic functions: Display/Signal Monitor/Auto Tuning/Manual Tuning/Channel Up, down/…</li>\n<li>MM Player: to provide the Multi Media basic functions: Play/Stop/…</li>\n<li>DTV Player: to provide the DTV basic functions:Display/Signal Monitor/Scan/Channel Change/EPG/CI/MHEG5/PVR…</li>\n<li>All other Player: to provide the basic functions for various input source: Display/Signal Monitor/…</li>\n<li>Database: to provide the information saved in the EEprom. For example: Program Info and OSD Info</li>\n<li>CIMMI: to provide CIMMI display information for CI card ui</li>\n<li>Timer: to provide all time related functions</li>\n<li>Channel Manager: wrapper for channel manage functions for ATV/DTV</li>\n<li>Factory Mode: to provide factory setting interface to factory ui</li>\n<li>Picture Quality: to provide the Picture basic functions. For example: Brightness, contrast, Color,…etc</li>\n<li>Control Class(MSrv_Control): interface to get all kinds of MSrv objects</li>\n<li>TTX class: to provide the TTX basic functions.</li>\n</ul>\n<h3 id=\"Msrv-class-Hierachy\"><a href=\"#Msrv-class-Hierachy\" class=\"headerlink\" title=\"Msrv class Hierachy\"></a>Msrv class Hierachy</h3><p><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f62o8212wdj20l70elabp.jpg\" alt=\"\"></p>\n<h3 id=\"Msrv-Control\"><a href=\"#Msrv-Control\" class=\"headerlink\" title=\"Msrv_Control\"></a>Msrv_Control</h3><p>总控类，是父类的<strong>实例对象</strong>。<br>继承自<code>class MSrv_Control_DVB/MSrv_Control_ATSC</code>，<br>再继承自<code>class MSrv_Control_TV/MSrv_Control_STB</code>，<br>再继承自<code>class MSrv_Control_common</code>。</p>\n<p>例子：<br>Change Input Source: MSrv_Control(MSrv_Control_DVB/MSrv_Control_common) class<br>-&gt;SetInputSourceCmd();<br>继承关系图如下：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f62o8gmbv6j20qb08lq58.jpg\" alt=\"\"></p>\n<h3 id=\"TVOS-Call-Flow\"><a href=\"#TVOS-Call-Flow\" class=\"headerlink\" title=\"TVOS Call Flow\"></a>TVOS Call Flow</h3><p>主要逻辑关系调用流程如下：<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f62o9qqyk2j21kw1gj1jo.jpg\" alt=\"\"></p>\n<h2 id=\"EventManager\"><a href=\"#EventManager\" class=\"headerlink\" title=\"EventManager\"></a>EventManager</h2><p>事件管理器类。基于Vector的消息队列，异步事件池。允许消息发送者<code>class TvOSEventSender</code>异步（发送到<code>class EventManager</code>内部的Vector消息队列后再一个个调用发送者的发送消息函数）及同步（立即直接调用发送者自己的消息发送函数）消息发送。</p>\n<h3 id=\"Dispatcher\"><a href=\"#Dispatcher\" class=\"headerlink\" title=\"Dispatcher\"></a>Dispatcher</h3><p><code>class EventManager</code>创建了一个主检测发送线程<code>threadEventDispatcher()</code>来启动发送事件；同时初始化一个最大个数为4的线程池数组存储一系列发送事件任务（分别由各自的线程负责，在<code>StartPostThreadPool()</code>中创建），事件发送任务经由<code>class mapi_event</code>来完成发送任务启动消息，最终由线程池中的各个发送线程收到启动发送的消息后，自己调用发送者的发送消息函数来发送消息（在发送者各自的子类service中完成）。</p>\n<h3 id=\"Dispatch-process\"><a href=\"#Dispatch-process\" class=\"headerlink\" title=\"Dispatch process\"></a>Dispatch process</h3><p>当发送者<code>class TvOSEventSender</code>发送消息到<code>class EventManager</code>时，事件消息将存储在<code>vector&lt;ST_TVOS_EVENT&gt; tvos_event_queue</code>中。发送事件的工作线程<code>threadEventDispatcher()</code>中将根据<code>m_bPoolAvaliable</code>状态来决定是否进行分发工作，并检测<code>m_PostTaskCount</code>空闲的发送任务个数，来循环发送已经被填充的<code>tvos_event_dipatchqueue</code>事件队列，通过调用赋值的线程池数组<code>m_postevent_thread[i]</code>的成员<code>mapi_event</code>中的<code>send()</code>来发送<code>**POST_START**</code>消息给各自的线程发送处理函数<code>PostTask()</code>。当各自的线程接收到<code>**POST_START**</code>消息后，通过调用发送者<code>class TvOSEventSender</code>的成员函数<code>_PostEventToClient()</code>实现最终的消息发送。此消息发送即通过调用每个发送者模块自己的子类service中的<code>PostEventToClient()</code>函数来实现。如<code>bool CaManagerService::PostEventToClient(U32 nEvt, U32 wParam, U32 lParam)</code>。<br><figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> EventManager <span class=\"comment\">//事件管理器</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    EventManager();</div><div class=\"line\">    ~EventManager();</div><div class=\"line\"><span class=\"comment\">//获取实例对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> EventManager * <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//销毁实例对象</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">Destroy</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//初始化，并创建事件发送线程threadEventDispatcher()。最大4个发送事件线程空间。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Init</span><span class=\"params\">(<span class=\"keyword\">int</span> paralTaskCount = MAX_POST_THREAD)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Finalize</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送消息到EM。存储到tvos_event_queue中。默认不重复尝试。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEvent</span><span class=\"params\">(ST_TVOS_EVENT s_Event, <span class=\"keyword\">bool</span> retry=<span class=\"literal\">false</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送优先消息到EM。存储到优先队列tvos_event_tempqueue中。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEventToQueueForBoot</span><span class=\"params\">(ST_TVOS_EVENT s_Event)</span></span>;</div><div class=\"line\"><span class=\"comment\">//注册发送类型/者。枚举type与sender类一一对应。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype, TvOSEventSender* pSender)</span></span>;</div><div class=\"line\"><span class=\"comment\">//取消注册发送类型/者</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnRegisterSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//通过发送消息类型找到发送者</span></div><div class=\"line\">    <span class=\"function\">TvOSEventSender * <span class=\"title\">GetEventSender</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//初始化事件发送任务线程池数组，并创建对应的线程。创建m_PostTaskCount个mapi_event实例及各状态参数。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartPostThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//关闭所有的事件发送任务及相关数据。关闭线程池，退出m_PostTaskCount mapi_event。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopPostThreadPool</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsTvListenerReady</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">SetTvListenerReady</span><span class=\"params\">(<span class=\"keyword\">bool</span> isReady)</span></span>;</div><div class=\"line\"><span class=\"comment\">//分发事件函数。</span></div><div class=\"line\"><span class=\"comment\">//循环从tvos_event_dipatchqueue队列中事件通过空闲的m_postevent_thread[i]调用m_postevent_thread[i].NotifyEvt-&gt;Send()发送启动消息。</span></div><div class=\"line\"><span class=\"comment\">//实际发送工作由线程池数组元素中的线程通过调用发送者自己的子类service的发送消息函数来完成发送。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">DispatchEvent</span><span class=\"params\">()</span></div><div class=\"line\"><span class=\"comment\">//线程池任务锁</span></div><div class=\"line\">    pthread_mutex_t m_ThreadPoolLock</span>;</div><div class=\"line\"><span class=\"comment\">//线程池是否可用标志</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bPoolAvaliable;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\"><span class=\"comment\">//事件发送线程池中线程数据结构体</span></div><div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">pthread_t</span> postevent_thread_handle;</div><div class=\"line\">            <span class=\"keyword\">pthread_cond_t</span> postevent_thread_condition;</div><div class=\"line\">            <span class=\"keyword\">pthread_mutex_t</span> postevent_thread_mutex;</div><div class=\"line\">            ST_TVOS_EVENT a_Event;</div><div class=\"line\">            mapi_event&lt;POST_TASK_NOTIFY_EVENT&gt; *NotifyEvt;</div><div class=\"line\">            <span class=\"keyword\">bool</span> inited;</div><div class=\"line\">            <span class=\"keyword\">bool</span> isBusy;</div><div class=\"line\">            EventManager * pEventManager;</div><div class=\"line\">    &#125; postevent_thread_data;</div><div class=\"line\"><span class=\"comment\">//发送事件线程数据状态存储数组。存储了MAX_POST_THREAD个mapi_event实例及线程。</span></div><div class=\"line\">    postevent_thread_data m_postevent_thread[MAX_POST_THREAD];</div><div class=\"line\"><span class=\"comment\">//发送事件线程实际计数</span></div><div class=\"line\">    <span class=\"keyword\">int</span> m_PostTaskCount;</div><div class=\"line\"><span class=\"comment\">//分发事件线程，调用DispatchEvent()函数分发事件。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">threadEventDispatcher</span><span class=\"params\">(<span class=\"keyword\">void</span> *arg)</span></span>;</div><div class=\"line\"><span class=\"comment\">//线程池中的线程处理函数。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span>* <span class=\"title\">PostTask</span><span class=\"params\">(<span class=\"keyword\">void</span> *pdata)</span></span>;</div><div class=\"line\"><span class=\"comment\">//判断事件是否需要重发。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> <span class=\"title\">EventNeedRetry</span><span class=\"params\">(U32 evt, U32 wPparam)</span></span>;</div><div class=\"line\"><span class=\"comment\">//事件管理器EM的实例</span></div><div class=\"line\">    <span class=\"keyword\">static</span> EventManager *m_pInstance ;</div><div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">bool</span> m_bInit;</div><div class=\"line\"><span class=\"comment\">//事件注册列表，以&lt;类型，发送者&gt;存储。</span></div><div class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">map</span>&lt;<span class=\"keyword\">int</span>, TvOSEventSender* &gt; m_ServiceMap;</div><div class=\"line\"><span class=\"comment\">//普通事件发送队列。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_queue;</div><div class=\"line\"><span class=\"comment\">//实际事件发送空队列。发送时将tvos_event_tempqueue和tvos_event_queue中的事件加入并发送。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_dipatchqueue;</div><div class=\"line\"><span class=\"comment\">//存储优先发送的事件队列。</span></div><div class=\"line\">    <span class=\"built_in\">vector</span>&lt;ST_TVOS_EVENT&gt; tvos_event_tempqueue;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_ServiceMapLockAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> m_ServiceMapLock;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_QueueLockAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutex_t</span> m_QueueLock;</div><div class=\"line\">    <span class=\"keyword\">pthread_mutexattr_t</span> m_ThreadPoolAttr;</div><div class=\"line\">    <span class=\"keyword\">pthread_t</span> m_threadEventDispatcher_id;</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bDisPatchEnable;</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_TvListenerReady;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">class</span> TvOSEventSender <span class=\"comment\">//事件发送者</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">mutable</span> Mutex m_Lock;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    TvOSEventSender():m_Lock(Mutex::RECURSIVE)&#123; m_ServiceType = E_MANAGER_NULL; m_bRegistered = <span class=\"literal\">false</span>; m_bIsPosting = <span class=\"literal\">false</span>;&#125;</div><div class=\"line\">    ~TvOSEventSender();</div><div class=\"line\"><span class=\"comment\">//将发送者自己注册到事件管理器</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterToEM</span><span class=\"params\">(EN_POSTEVENT_SERVICE servicetype)</span></span>;</div><div class=\"line\"><span class=\"comment\">//取消注册</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnRegisterToEM</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"comment\">//发送消息到事件管理器。syncchronous参数提供同步与异步方式。默认为异步，即发送到EM事件管理器事件队列。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">PostEventToEM</span><span class=\"params\">(U32 nEvt, U32 wParam, U32 lParam, <span class=\"keyword\">int</span> flag=EVENT_FLAG_NONE, U32 togglenEvt=NO_TOGGLE_EVT, <span class=\"keyword\">bool</span> syncchronous=<span class=\"literal\">false</span>)</span></span>;</div><div class=\"line\"><span class=\"comment\">//直接调用发送者自己的service中发送消息函数将消息立即发送出去。不经过事件管理器EM。即同步发送方式。</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"number\">_</span>PostEventToClient(U32 nEvt, U32 wParam, U32 lParam);</div><div class=\"line\"><span class=\"comment\">//纯虚函数。要求继承此类的各种Service实现此消息发送函数，供同步发送方式使用。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">PostEventToClient</span><span class=\"params\">(U32 nEvt, U32 wParam, U32 lParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Clear</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>:</div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bIsPosting;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\"><span class=\"comment\">//把事件消息发送到事件管理器EM。</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"number\">_</span>PostEventToEM(U32 nEvt, U32 wParam, U32 lParam, <span class=\"keyword\">int</span> flag, U32 togglenEvt);</div><div class=\"line\"><span class=\"comment\">//发送事件的类型模块枚举定义（见如下枚举）</span></div><div class=\"line\">    EN_POSTEVENT_SERVICE m_ServiceType;</div><div class=\"line\"><span class=\"comment\">//是否注册到事件管理器EM的标志</span></div><div class=\"line\">    <span class=\"keyword\">bool</span> m_bRegistered;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> <span class=\"comment\">//发送事件的类型模块。每个类型都有一个class TvOSEventSender类的sender注册到事件管理器EM上。</span></div><div class=\"line\">&#123;</div><div class=\"line\">    E_TVMANAGER,</div><div class=\"line\">    E_PLAYERIMPL,</div><div class=\"line\">    E_AUDIOMANAGER,</div><div class=\"line\">    E_PICTUREMANAGER,</div><div class=\"line\">    E_PIPMANAGER,</div><div class=\"line\">    E_3DMANAGER,</div><div class=\"line\">    E_TIMERMANAGER,</div><div class=\"line\">    E_CAMANAGER,</div><div class=\"line\">    E_CIMANAGER,</div><div class=\"line\">    E_CECMANAGER,</div><div class=\"line\">    E_MHLMANAGER,</div><div class=\"line\">    E_THIRDPARTYMANAGER,</div><div class=\"line\">    E_USBMASSSTORAGEMANAGER,</div><div class=\"line\">    E_NETWORKMANAGER,</div><div class=\"line\">    E_FACTORYMANAGER,</div><div class=\"line\">    E_MANAGER_MAX,</div><div class=\"line\">    E_MANAGER_NULL = E_MANAGER_MAX,</div><div class=\"line\">&#125;EN_POSTEVENT_SERVICE;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> <span class=\"comment\">//消息事件结构体</span></div><div class=\"line\">&#123;</div><div class=\"line\">    U32 u32Evt;</div><div class=\"line\">    U32 u32ToggleEvt;</div><div class=\"line\">    U32 u32wParam;</div><div class=\"line\">    U32 u32lParam;</div><div class=\"line\">    EN_POSTEVENT_SERVICE enPostSer;<span class=\"comment\">//发送者。</span></div><div class=\"line\">    U16 u16Flag;</div><div class=\"line\">&#125;ST_TVOS_EVENT;</div></pre></td></tr></table></figure></p>"},{"title":"podcast","date":"2016-07-26T02:35:14.000Z","_content":"说说自己目前订阅的podcast吧。如图\n![](http://ww4.sinaimg.cn/large/772d7a33jw1f67482m28zj20u01hctfp.jpg)\n\n首先，就IPN旗下的节目。太医来了，IT公论，内核恐慌，选美，博物志，流行通信。\n还有字谈字畅，吴晓波频道，袁腾飞谈历史，晓松奇谈。\n\n晓松奇谈是之前一直没有找到可订阅的方法，毕竟现在的podcast网站都要下自家的软件，烦得一米，还是泛用型客户端好用（都是被李如一安利的~）。这里安利下pocket cast这款软件，真好用。\n某天无意中从v2ex的[某个页面](https://www.v2ex.com/t/239246)评论中搜索到，有个哥们做了这件好事，他的解决方案**[在这里](https://zhi.miao.li/p/listen_miao_li/)**。于赶紧把晓松奇谈给订阅上了，解决了我好大的困扰。通勤路上又可以愉快地听矮大紧吹了。\n","source":"_posts/podcast.md","raw":"---\ntitle: podcast\ndate: 2016-07-26 10:35:14\ncategories:\n - life\ntags:\n - podcast\n---\n说说自己目前订阅的podcast吧。如图\n![](http://ww4.sinaimg.cn/large/772d7a33jw1f67482m28zj20u01hctfp.jpg)\n\n首先，就IPN旗下的节目。太医来了，IT公论，内核恐慌，选美，博物志，流行通信。\n还有字谈字畅，吴晓波频道，袁腾飞谈历史，晓松奇谈。\n\n晓松奇谈是之前一直没有找到可订阅的方法，毕竟现在的podcast网站都要下自家的软件，烦得一米，还是泛用型客户端好用（都是被李如一安利的~）。这里安利下pocket cast这款软件，真好用。\n某天无意中从v2ex的[某个页面](https://www.v2ex.com/t/239246)评论中搜索到，有个哥们做了这件好事，他的解决方案**[在这里](https://zhi.miao.li/p/listen_miao_li/)**。于赶紧把晓松奇谈给订阅上了，解决了我好大的困扰。通勤路上又可以愉快地听矮大紧吹了。\n","slug":"podcast","published":1,"updated":"2016-09-06T08:44:45.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18k001lfgn99wpdodmn","content":"<p>说说自己目前订阅的podcast吧。如图<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33jw1f67482m28zj20u01hctfp.jpg\" alt=\"\"></p>\n<p>首先，就IPN旗下的节目。太医来了，IT公论，内核恐慌，选美，博物志，流行通信。<br>还有字谈字畅，吴晓波频道，袁腾飞谈历史，晓松奇谈。</p>\n<p>晓松奇谈是之前一直没有找到可订阅的方法，毕竟现在的podcast网站都要下自家的软件，烦得一米，还是泛用型客户端好用（都是被李如一安利的~）。这里安利下pocket cast这款软件，真好用。<br>某天无意中从v2ex的<a href=\"https://www.v2ex.com/t/239246\" target=\"_blank\" rel=\"external\">某个页面</a>评论中搜索到，有个哥们做了这件好事，他的解决方案<strong><a href=\"https://zhi.miao.li/p/listen_miao_li/\" target=\"_blank\" rel=\"external\">在这里</a></strong>。于赶紧把晓松奇谈给订阅上了，解决了我好大的困扰。通勤路上又可以愉快地听矮大紧吹了。</p>\n","excerpt":"","more":"<p>说说自己目前订阅的podcast吧。如图<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33jw1f67482m28zj20u01hctfp.jpg\" alt=\"\"></p>\n<p>首先，就IPN旗下的节目。太医来了，IT公论，内核恐慌，选美，博物志，流行通信。<br>还有字谈字畅，吴晓波频道，袁腾飞谈历史，晓松奇谈。</p>\n<p>晓松奇谈是之前一直没有找到可订阅的方法，毕竟现在的podcast网站都要下自家的软件，烦得一米，还是泛用型客户端好用（都是被李如一安利的~）。这里安利下pocket cast这款软件，真好用。<br>某天无意中从v2ex的<a href=\"https://www.v2ex.com/t/239246\">某个页面</a>评论中搜索到，有个哥们做了这件好事，他的解决方案<strong><a href=\"https://zhi.miao.li/p/listen_miao_li/\">在这里</a></strong>。于赶紧把晓松奇谈给订阅上了，解决了我好大的困扰。通勤路上又可以愉快地听矮大紧吹了。</p>\n"},{"title":"perfect proxifier+UWP","date":"2016-09-09T01:06:59.000Z","_content":"前面的一篇文章{% post_link shadowsock-proxifier shadowsock+proxifier %}简单说了下如何把shadowsocks利用到系统全局代理的方法。\n但是这个方法有个bug是，装完proxifier之后，所有的windows 10的metro应用都不能用了。比如UMP神软`Hello,TV`。那怎么办呢？Google一下，原理是metro应用和系统其它应用不一样，不走本地代理，所以当proxifier安装后，流量都走127.0.0.1，但是metro不走。所以，只要安装了proxifier软件，不管你有没有打开使用它，metro应用都不能联网。\n找了好长时间，google出来都是利用Fiddler软件里的一个叫AppContainer LoopBack的组件，使metro应用能够走本地127.0.0.1的代理来实现。\n昨天突然灵光一现，想到了一个方法。既然不安装proxifier就是正常的，那我不安装不就行了嘛。不过不安装proxifier，那就不能做全局代理了啊。嘿嘿，别忘了[proxifier官网](https://www.proxifier.com/download.htm)可是提供portable版本的下载，这个版本不用安装也能使用。于是下载了proxifier portable版本来试了一下，果然可行！配置文件把要代理的应用加上就行了。要用的时候打开proxifier，不用的时候关掉。\n完美！\n\nPS：提供个可用的proxifier portable版本注册码`L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C`\n","source":"_posts/perfect-proxifier-UWP.md","raw":"---\ntitle: perfect proxifier+UWP\ndate: 2016-09-09 09:06:59\ncategories:\n - life\ntags:\n - vpn\n - shadowsocks\n---\n前面的一篇文章{% post_link shadowsock-proxifier shadowsock+proxifier %}简单说了下如何把shadowsocks利用到系统全局代理的方法。\n但是这个方法有个bug是，装完proxifier之后，所有的windows 10的metro应用都不能用了。比如UMP神软`Hello,TV`。那怎么办呢？Google一下，原理是metro应用和系统其它应用不一样，不走本地代理，所以当proxifier安装后，流量都走127.0.0.1，但是metro不走。所以，只要安装了proxifier软件，不管你有没有打开使用它，metro应用都不能联网。\n找了好长时间，google出来都是利用Fiddler软件里的一个叫AppContainer LoopBack的组件，使metro应用能够走本地127.0.0.1的代理来实现。\n昨天突然灵光一现，想到了一个方法。既然不安装proxifier就是正常的，那我不安装不就行了嘛。不过不安装proxifier，那就不能做全局代理了啊。嘿嘿，别忘了[proxifier官网](https://www.proxifier.com/download.htm)可是提供portable版本的下载，这个版本不用安装也能使用。于是下载了proxifier portable版本来试了一下，果然可行！配置文件把要代理的应用加上就行了。要用的时候打开proxifier，不用的时候关掉。\n完美！\n\nPS：提供个可用的proxifier portable版本注册码`L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C`\n","slug":"perfect-proxifier-UWP","published":1,"updated":"2016-09-09T01:22:41.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18o001ofgn93j9ysa07","content":"<p>前面的一篇文章<a href=\"/2016/09/08/shadowsock-proxifier/\" title=\"shadowsock+proxifier\">shadowsock+proxifier</a>简单说了下如何把shadowsocks利用到系统全局代理的方法。<br>但是这个方法有个bug是，装完proxifier之后，所有的windows 10的metro应用都不能用了。比如UMP神软<code>Hello,TV</code>。那怎么办呢？Google一下，原理是metro应用和系统其它应用不一样，不走本地代理，所以当proxifier安装后，流量都走127.0.0.1，但是metro不走。所以，只要安装了proxifier软件，不管你有没有打开使用它，metro应用都不能联网。<br>找了好长时间，google出来都是利用Fiddler软件里的一个叫AppContainer LoopBack的组件，使metro应用能够走本地127.0.0.1的代理来实现。<br>昨天突然灵光一现，想到了一个方法。既然不安装proxifier就是正常的，那我不安装不就行了嘛。不过不安装proxifier，那就不能做全局代理了啊。嘿嘿，别忘了<a href=\"https://www.proxifier.com/download.htm\" target=\"_blank\" rel=\"external\">proxifier官网</a>可是提供portable版本的下载，这个版本不用安装也能使用。于是下载了proxifier portable版本来试了一下，果然可行！配置文件把要代理的应用加上就行了。要用的时候打开proxifier，不用的时候关掉。<br>完美！</p>\n<p>PS：提供个可用的proxifier portable版本注册码<code>L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C</code></p>\n","excerpt":"","more":"<p>前面的一篇文章<a href=\"/2016/09/08/shadowsock-proxifier/\" title=\"shadowsock+proxifier\">shadowsock+proxifier</a>简单说了下如何把shadowsocks利用到系统全局代理的方法。<br>但是这个方法有个bug是，装完proxifier之后，所有的windows 10的metro应用都不能用了。比如UMP神软<code>Hello,TV</code>。那怎么办呢？Google一下，原理是metro应用和系统其它应用不一样，不走本地代理，所以当proxifier安装后，流量都走127.0.0.1，但是metro不走。所以，只要安装了proxifier软件，不管你有没有打开使用它，metro应用都不能联网。<br>找了好长时间，google出来都是利用Fiddler软件里的一个叫AppContainer LoopBack的组件，使metro应用能够走本地127.0.0.1的代理来实现。<br>昨天突然灵光一现，想到了一个方法。既然不安装proxifier就是正常的，那我不安装不就行了嘛。不过不安装proxifier，那就不能做全局代理了啊。嘿嘿，别忘了<a href=\"https://www.proxifier.com/download.htm\">proxifier官网</a>可是提供portable版本的下载，这个版本不用安装也能使用。于是下载了proxifier portable版本来试了一下，果然可行！配置文件把要代理的应用加上就行了。要用的时候打开proxifier，不用的时候关掉。<br>完美！</p>\n<p>PS：提供个可用的proxifier portable版本注册码<code>L6Z8A-XY2J4-BTZ3P-ZZ7DF-A2Q9C</code></p>\n"},{"title":"realtek TV RPC","date":"2016-07-15T06:50:37.000Z","_content":"## 接口\n\n1. RPC 客户端基类。\n```cpp\nclass RpcClient\n```\n\n2. RPC类的实体。每个实体代表一个函数调用。其成员`m_StrFuncName`是原始调用函数的函数名。`m_CallCtxMap`为其map组合。\n```cpp\nstruct RpcClient::CallContext\n```\n\n3. RPC回调类。\n```cpp\nclass RpcClient::CallbackHandler\n```\n\n<!-- more -->\n\n4. 数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给`IpcStreamer`传输。参见`RpcCommandType`结构体。\n```cpp\nclass RpcCommandMuxer* m_pCmdMuxer\n```\n\n5. 数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。\n```cpp\nclass RpcCommandDemuxer* m_pCmdDemuxer\n```\n\n6. 数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给`RpcCommandMuxer`及`RpcCommandDemuxer`序列化/反序列化数据。\n```cpp\nclass rtk::ipc::IpcStreamer* m_pStreamer\n```\n\n7. callback的map集合。\n```cpp\nclass CallbackMap m_CallbackMap\n```\n\n8. callback类。继承实现了一个`CommandProcessor`。其实类为`CallbackContext`。\n```cpp\nclass RpcClient::CallbackHandler* m_pCallbackHandler\n```\n\n9. 回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中`struct CallbackContext`结构即为当前的`class CommandProcessor`实类。\n```cpp\nclass CommandQueue<CallbackContext> m_CallbackCmdQue\n```\n\n10. 回调函数序列化的数据流结构体。其中`pData`指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过`RpcCommandDemuxer`反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。\n```cpp\nstruct CallbackContext\n```\n\n11. RPC客户端实例。\n```cpp\nclass RpcClient& m_RpcClient\n```\n\n---\n\n## 类体\n\n1. 指令流头部数据结构体。内结构顺序为：\n`RpcCommandHeader`+`RpcParamHeader1`+`data1`+`...`+`RpcParamHeaderN`+`dataN`。\n```cpp\nstruct RpcCommandHeader\n{\n    unsigned int iRpcCommandType; //RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)\n    unsigned int iId; //唯一ID，用于指示哪个命令。\n    unsigned int iTotalLen; //序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。\n    unsigned int iParamCounts; //数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。\n}\n```\n\n2. 数据流单元结构体。函数名及参数均用此结构体序列化。\n```cpp\nstruct RpcParamHeader\n{\n    unsigned int iRpcParamType; //RPC单元数据类型。参见 enum RpcParamType枚举类型。\n    unsigned int iRpcParamLen; //RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。\n};\n```\n\n3. RpcServer接口虚基类。\n```cpp\nclass IpcServer\n{\npublic: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。\n    virtual bool Start(const char* pStrServerName, void* pParam) = 0;\n    virtual bool Stop() = 0;\n    virtual bool RegisterObserver(IpcServerObserver* pObs) = 0;\n    virtual void UnregisterObserver(IpcServerObserver* pObs) = 0;\n    virtual const char* GetServerName() = 0;\n    virtual void* GetParameter() = 0;\n\npublic:\n    virtual ~IpcServer() { ; };\n};\n```\n\n4. 继承自`IpcServer`，RpcServer基础实现类。\n```cpp\nclass IpcServerBase: public IpcServer\n{\npublic: // 接口定义在IpcServer类中，这里是具体实现。\n    bool Start(const char* pStrServerName, void* pParam);\n    bool Stop();\n    bool RegisterObserver(IpcServerObserver* pObs);\n    void UnregisterObserver(IpcServerObserver* pObs);\n    const char* GetServerName();\n    void* GetParameter();\n\npublic:\n    IpcServerBase();\n    ~IpcServerBase();\n    IpcServerBase (const IpcServerBase &) {}\n    IpcServerBase &operator= (const IpcServerBase&) { return *this; }\n\nprotected: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。\n    virtual bool DoStart(const char* pStrServerName, void* pParam) = 0;\n    virtual bool DoStop() = 0;\n    virtual IpcStreamer* DoAccept() = 0;\n    virtual void FreeIpcStreamer(IpcStreamer* pStreamer) = 0;\n    virtual bool IsShutdownServer() = 0;\n\nprivate: // Used to notify observers\n    void NotifyOpened(const char* pStrServerName);\n    bool NotifyAccepted(IpcStreamer* pStreamer);\n    void NotifyClosed();\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n5. 继承自`IpcServerBase`，FIFO类型RpcServer主实现类。\n```cpp\nclass IpcServerPipeImpl: public IpcServerBase\n{\npublic:\n    IpcServerPipeImpl();\n    ~IpcServerPipeImpl();\n    IpcServerPipeImpl(const IpcServerPipeImpl &param) {}\n    IpcServerPipeImpl &operator = (const IpcServerPipeImpl&) { return *this; }\n\nprivate: //接口定义在 IpcServerBase 类中，这里是具体实现。\n    bool DoStart(const char* pStrServerName, void* pParam);\n    bool DoStop();\n    IpcStreamer* DoAccept();\n    void FreeIpcStreamer(IpcStreamer* pStreamer);\n    bool IsShutdownServer();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n6. IPC服务器端接口类。管理 RpcServer集合等map。\n```cpp\nclass IpcServerManager\n{\npublic:\n    enum\n    {\n        TIME_OUT_INFINITY = -1 //Time out infinity\n    };\n\npublic:\n    static IpcServerManager& GetInstance();\n    bool StartServer(const char* pStrServerName, int iIpcImplMode, void* pParam);\n    bool StopServer(const char* pStrServerName);\n    void StopAllServers();\n    void WaitForAllServerStop(int iTimeout);\n    bool RegisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n    void UnregisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n\nprivate:\n    IpcServerManager();\n    IpcServerManager(const IpcServerManager&);\n    IpcServerManager& operator=(const IpcServerManager&);\n    ~IpcServerManager();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n7. RPC服务端接口类。实际调用IpcServerManager类方法。\n```cpp\nclass RpcServer\n{\npublic:\n    RpcServer();\n    ~RpcServer();\n    bool StartServer(const char* pStrServerName, void* pParam);\n    bool StopServer();\n    const char* GetServerName() const;\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcServer(const RpcServer &);\n    RpcServer &operator=(const RpcServer &);\n};\n```\n\n8. RPC调用执行管理类。\n```cpp\nclass RpcExecutorManager\n{\npublic:\n    enum ErrCode\n    {\n        ERR_FAILED = -1,\n    };\npublic:\n    static RpcExecutorManager& GetInstance();\n    bool RegisterExecutor(RpcExecutor* pExecutor);\n    bool UnregisterExecutor(RpcExecutor* pExecutor);\n    int Execute(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  char* pBuffer, int iBufSize);\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcExecutorManager();\n    ~RpcExecutorManager();\n    RpcExecutorManager(const RpcExecutorManager&);\n    RpcExecutorManager& operator=(const RpcExecutorManager&);\n};\n```\n\n---\n\n## 原理及过程分析\n\n- ### RPC机制原理\n\n　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。\n　　\n　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的`IpcPipeImplHeader`数据，并根据`IpcPipeImplHeader`数据中的参数`iID`来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。\n　　\n　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的`iID`，此参数`iID`保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在`IpcPipeImplHeader`结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。\n　　\n　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入`IpcPipeImplHeader`数据来实现沟通。\n\n- ### RpcServer启动过程 \n\n　　构造RpcServer时，通过调用`IpcServerManager`接口类初始化来创建实例，并`StartServer`。而在`StartServer`方法中调用了`IpcServerPipeImpl`类构造函数来实例化 **IPC_PIPE** 型RpcServer对象，并`Start`服务。`IpcServerPipeImpl`接口类继承自`IpcServerBase`接口类，`Start`方法在`IpcServerBase`接口类中，而`Start`方法又通过虚接口调用了子类`IpcServerPipeImpl`类中的`DoStart`方法来创建FIFO，然后调用`IpcServerBase`接口类中的`StartAccetpClient`方法来启动接收RpcClient数据的服务。`IpcServerBase`接口类中的`PrivateImpl`成员类是继承自`CommandProcessor`类的对象，用于开始接收并通知streamer的接收数据。在`StartAccetpClient`方法中创建了一个`CommandQueue`类，通过调用此类的`AddCommand`方法并用 **ACCEPT_COMMAND** 参数（此参数目前不起任何作用）来创建一个等待指令的线程`Policy1Proc`。如果监测到有事件发生，此线程调用`IpcServerBase::PrivateImpl`这个 `CommandProcessor`对象中的`Execute`方法来执行。而`Execute`方法里又调用了`IpcServerPipeImpl`接口类中的`DoAccept`方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输`IpcPipeImplHeader`结构的数据。\n　　\n　　RpcServer接收到`IpcPipeImplHeader`结构的数据后，调用`CreateStreamerByCommand`方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并放到streamer类map中存储。其中，因为接收到的数据中有`iID`这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。\n\n- ### RpcClient启动过程\n\n　　与RpcServer类似，不赘述。\n\n- ### RpcClient与RpcServer交互过程\n\n　　RpcServer先启动，创建好监听RpcClient的FIFO。\n　　\n　　调用`IpcClientFactory`类创建实例对像，实际调用`IpcClientPipeImpl`类来构造RpcClient。并加入到`ClientList`vctor容器中。\n　　\n　　RpcClient构造后开始连接RpcServer(`IpcClientPipeImpl::Connect`)。先`open`打开RpcServer创建好的FIFO，并向FIFO`write`一个`IpcPipeImplHeader`结构体的数据后关闭FIFO。然后调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并`open`打开(`IpcStreamerPipeImpl::DoOpen`)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。\n\n- ### INVOKE远程调用执行过程\n\n　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序`push`，最后`push`函数名，最后`finish`。然后调用`RpcCommandMuxer`类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用`RpcCommandDemuxer`类反序列化数据。并调用`RpcExecutorManager`类里的方法来执行相关动作。\n　　\n　　其中`RpcExecutorManager`是一个专用于管理`RpcExecutor`类对象的管理器。同样的还有`IpcServerManager`。\n　　\n　　而`RpcExecutor`是真正执行函数调用的类。它被用于模块初始化时调用，通过`RegisterExecutor`/`UnregisterExecutor`方法注册/反注册到`RpcExecutorManager`类中的list中。它的`Execute`方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以`RpcCommandMuxer`类表示的数据。\n　　　　\n　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用`RpcCommandMuxer`序列化数据时，头部`RpcCommandHeader`结构体数据里面填充的`iRpcCommandType`参数数据不同。\n　　\n　　TvService模块初始化时调用`RpcExecutor`类来注册供RpcClient远程调用invoke的native函数集合，其成员`m_FuncMap`是一个`RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);`类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成`RpcCommandMuxer`流数据返回。\n　　\n> **例如:** `TvChannelApiExecutor`类。\n> \n```cpp\nclass PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),\n                   m_bFirstPlay(false)\n    {\n        m_FuncMap[\"TvAutoScanStart\"] = &PrivateImpl::TvAutoScanStart;\n        m_FuncMap[\"TvAutoScanStop\"] = &PrivateImpl::TvAutoScanStop;\n        m_FuncMap[\"TvAutoScanComplete\"] = &PrivateImpl::TvAutoScanComplete; \n        m_FuncMap[\"TvAutoScanStartWithRange\"] = &PrivateImpl::TvAutoScanStartWithRange;\n        m_FuncMap[\"TvAutoScanStopWithRange\"] = &PrivateImpl::TvAutoScanStopWithRange;\n        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &PrivateImpl::TvAutoScanCompleteWithRange;  \n        m_FuncMap[\"TvSeekScanStart\"] = &PrivateImpl::TvSeekScanStart;\n        m_FuncMap[\"TvSeekScanStop\"] = &PrivateImpl::TvSeekScanStop;\n        m_FuncMap[\"TvScanManualStart\"] = &PrivateImpl::TvScanManualStart;\n        m_FuncMap[\"TvScanManualStop\"] = &PrivateImpl::TvScanManualStop;\n        m_FuncMap[\"TvScanManualComplete\"] = &PrivateImpl::TvScanManualComplete;\n        m_FuncMap[\"TvScanInfo\"] = &PrivateImpl::TvScanInfo;\n        m_FuncMap[\"IsTvScanning\"] = &PrivateImpl::IsTvScanning;\n        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &PrivateImpl::GetAtvSeqScanStartFreq;\n        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &PrivateImpl::GetAtvSeqScanEndFreq;\n        m_FuncMap[\"SetDtvScanType\"] = &PrivateImpl::SetDtvScanType;\n        m_FuncMap[\"GetDtvScanType\"] = &PrivateImpl::GetDtvScanType;\n        m_FuncMap[\"PlayNextChannel\"] = &PrivateImpl::PlayNextChannel;\n        m_FuncMap[\"PlayPrevChannel\"] = &PrivateImpl::PlayPrevChannel;\n        m_FuncMap[\"PlayFirstChannel\"] = &PrivateImpl::PlayFirstChannel;\n        m_FuncMap[\"PlayHistoryChannel\"] = &PrivateImpl::PlayHistoryChannel;\n        m_FuncMap[\"DumpTvChannelList\"] = &PrivateImpl::DumpTvChannelList;\n        m_FuncMap[\"SetDefaultFilter\"] = &PrivateImpl::SetDefaultFilter;\n        m_FuncMap[\"GetDefaultFilter\"] = &PrivateImpl::GetDefaultFilter;\n        m_FuncMap[\"GetCurChannel\"] = &PrivateImpl::GetCurChannel;\n        m_FuncMap[\"GetChannelInfoByIndex\"] = &PrivateImpl::GetChannelInfoByIndex;\n        m_FuncMap[\"GetChInfoArray\"] = &PrivateImpl::GetChInfoArray;\n        m_FuncMap[\"GetChannelBandwidth\"] = &PrivateImpl::GetChannelBandwidth;\n        m_FuncMap[\"GetChannelName\"] = &PrivateImpl::GetChannelName;\n        m_FuncMap[\"GetChannelCount\"] = &PrivateImpl::GetChannelCount;\n        m_FuncMap[\"SortChannel\"] = &PrivateImpl::SortChannel;\n        m_FuncMap[\"SaveChannel\"] = &PrivateImpl::SaveChannel;\n        m_FuncMap[\"PlayChannelByIndex\"] = &PrivateImpl::PlayChannelByIndex;\n        m_FuncMap[\"PlayChannelByNum\"] = &PrivateImpl::PlayChannelByNum;\n        m_FuncMap[\"PlayChannel\"] = &PrivateImpl::PlayChannel;       \n        m_FuncMap[\"PlayChannelByLCN\"] = &PrivateImpl::PlayChannelByLCN;\n        m_FuncMap[\"PlayFirstChannelInFreq\"] = &PrivateImpl::PlayFirstChannelInFreq;\n        m_FuncMap[\"PlayChannelByChnumFreq\"] = &PrivateImpl::PlayChannelByChnumFreq;\n        m_FuncMap[\"SwapChannelByIdxEx\"] = &PrivateImpl::SwapChannelByIdxEx;\n        m_FuncMap[\"SwapChannelByNumEx\"] = &PrivateImpl::SwapChannelByNumEx;\n        m_FuncMap[\"ReloadLastPlayedSource\"] = &PrivateImpl::ReloadLastPlayedSource;\n        m_FuncMap[\"SetCurChannelSkipped\"] = &PrivateImpl::SetCurChannelSkipped;\n        m_FuncMap[\"SetCurAtvSoundStd\"] = &PrivateImpl::SetCurAtvSoundStd;\n        m_FuncMap[\"FineTuneCurFrequency\"] = &PrivateImpl::FineTuneCurFrequency;\n        m_FuncMap[\"SetCurChAudioCompensation\"] = &PrivateImpl::SetCurChAudioCompensation;\n        m_FuncMap[\"SetSource\"] = &PrivateImpl::SetSource;\n        m_FuncMap[\"SetBootSource\"] = &PrivateImpl::SetBootSource;\n        m_FuncMap[\"GetCurChannelSkipped\"] = &PrivateImpl::GetCurChannelSkipped;\n        m_FuncMap[\"GetCurAtvSoundStd\"] = &PrivateImpl::GetCurAtvSoundStd;\n        m_FuncMap[\"GetCurChAudioCompensation\"] = &PrivateImpl::GetCurChAudioCompensation;\n        m_FuncMap[\"GetSourceList\"] = &PrivateImpl::GetSourceList;\n        m_FuncMap[\"GetSourceListCnt\"] = &PrivateImpl::GetSourceListCnt;\n        m_FuncMap[\"GetCurSourceType\"] = &PrivateImpl::GetCurSourceType;\n        m_FuncMap[\"GetBootSource\"] = &PrivateImpl::GetBootSource;\n#if defined (TVSERVER_IDTV)\n        m_FuncMap[\"GetIDTVSubSource\"] = &PrivateImpl::GetIDTVSubSource;\n#endif\n        m_FuncMap[\"GetCurTvType\"] = &PrivateImpl::GetCurTvType; \n        m_FuncMap[\"GetChannelNameList\"] = &PrivateImpl::GetChannelNameList;    \n        m_FuncMap[\"GetCurrentProgramInfo\"] = &PrivateImpl::GetCurrentProgramInfo;                   \n        m_FuncMap[\"GetCurrentProgramDescription\"] = &PrivateImpl::GetCurrentProgramDescription;                         \n        m_FuncMap[\"GetCurrentProgramRating\"] = &PrivateImpl::GetCurrentProgramRating;   \n        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &PrivateImpl::HasCurrentProgramWithSubtitle;           \n        m_FuncMap[\"GetCurAtvSoundSelect\"] = &PrivateImpl::GetCurAtvSoundSelect;\n        m_FuncMap[\"GetCurDtvAudioPID\"]=&PrivateImpl::GetCurDtvAudioPID;\n        m_FuncMap[\"GetCurDtvVideoPID\"]=&PrivateImpl::GetCurDtvVideoPID;\n        m_FuncMap[\"GetCurDtvTSID\"]=&PrivateImpl::GetCurDtvTSID;\n        m_FuncMap[\"GetCurDtvServiceID\"]=&PrivateImpl::GetCurDtvServiceID;\n        m_FuncMap[\"GetCurDtvPCR\"]=&PrivateImpl::GetCurDtvPCR;\n        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &PrivateImpl::SetCurDtvSoundSelectByIndex;\n        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&PrivateImpl::GetCurDtvSoundSelectIndex;     \n        m_FuncMap[\"GetCurrentAudioLang\"] = &PrivateImpl::GetCurrentAudioLang;\n        m_FuncMap[\"GetCurInputInfo\"] = &PrivateImpl::GetCurInputInfo;\n        m_FuncMap[\"GetCurrentSetting_tv\"] = &PrivateImpl::GetCurrentSetting_tv;\n        m_FuncMap[\"GetChannelFreqCount\"] = &PrivateImpl::GetChannelFreqCount;\n        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &PrivateImpl::GetChannelFreqByTableIndex;   \n        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &PrivateImpl::GetChannelchannelNumByTableIndex;      \n        m_FuncMap[\"GetChannelCountByFreq\"] = &PrivateImpl::GetChannelCountByFreq;     \n        m_FuncMap[\"GetCurChannelIndex\"] = &PrivateImpl::GetCurChannelIndex;\n        m_FuncMap[\"PlayNumberChannel\"] = &PrivateImpl::PlayNumberChannel;\n        m_FuncMap[\"GetChannelListChannelCount\"] = &PrivateImpl::GetChannelListChannelCount;\n        m_FuncMap[\"GetChannelDataList\"] = &PrivateImpl::GetChannelDataList;\n        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &PrivateImpl::GetCurDtvSoundSelectList;\n        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &PrivateImpl::GetCurDtvSoundSelectCount;\n        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &PrivateImpl::GetCurAtvSoundSelectList;\n        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &PrivateImpl::GetCurAtvSoundSelectCount;\n        m_FuncMap[\"SetCaptionMode\"] = &PrivateImpl::SetCaptionMode;\n        m_FuncMap[\"GetCaptionMode\"] = &PrivateImpl::GetCaptionMode;\n        m_FuncMap[\"SetAnalogCaption\"] = &PrivateImpl::SetAnalogCaption;\n        m_FuncMap[\"GetAnalogCaption\"] = &PrivateImpl::GetAnalogCaption;\n        m_FuncMap[\"SetDigitalCaption\"] = &PrivateImpl::SetDigitalCaption;\n        m_FuncMap[\"SetChannelFav\"] = &PrivateImpl::SetChannelFav;\n        m_FuncMap[\"SetChannelSkip\"] = &PrivateImpl::SetChannelSkip;\n        m_FuncMap[\"SetChannelBlock\"] = &PrivateImpl::SetChannelBlock;       \n        m_FuncMap[\"SetChannelDel\"] = &PrivateImpl::SetChannelDel;\n        m_FuncMap[\"GetChannelFav\"] = &PrivateImpl::GetChannelFav;\n        m_FuncMap[\"GetChannelSkip\"] = &PrivateImpl::GetChannelSkip;     \n        m_FuncMap[\"GetChannelBlock\"] = &PrivateImpl::GetChannelBlock;\n        m_FuncMap[\"QueryTvStatus\"] = &PrivateImpl::QueryTvStatus;\n        m_FuncMap[\"StartRecordTs\"] = &PrivateImpl::StartRecordTs;\n        m_FuncMap[\"StopRecordTs\"] = &PrivateImpl::StopRecordTs;\n        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &PrivateImpl::GetEpgDailyListCountByChIdx;   \n#ifdef DVB_T                                \n        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &PrivateImpl::GetEpgDailyListByChIdx;\n#endif\n#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN\n        m_FuncMap[\"StartDetection\"] = &PrivateImpl::StartDetection; \n        m_FuncMap[\"StopDetection\"] = &PrivateImpl::StopDetection;   \n#endif\n#ifdef QAM_MODE_SETTING\n        m_FuncMap[\"GetTvQamConst\"] = &PrivateImpl::GetTvQamConst;\n        m_FuncMap[\"SetTvQamConst\"] = &PrivateImpl::SetTvQamConst;\n#endif\n#ifdef SYMBOL_RATE_SETTING_BY_VAL\n        m_FuncMap[\"GetTvSymbolRateValue\"] = &PrivateImpl::GetTvSymbolRateValue;\n        m_FuncMap[\"SetTvSymbolRateValue\"] = &PrivateImpl::SetTvSymbolRateValue;\n#endif\n        m_FuncMap[\"SetSubtitleEnable\"] = &PrivateImpl::SetSubtitleEnable;\n        m_FuncMap[\"GetSubtitleEnable\"] = &PrivateImpl::GetSubtitleEnable;\n        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &PrivateImpl::SetDtvSubtitleByIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &PrivateImpl::GetDtvSubtitleIndexList;\n        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &PrivateImpl::GetCurDtvSubtitleIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &PrivateImpl::GetDtvSubtitleIndexListCount;\n        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &PrivateImpl::GetDtvSubtitleIndexListCountByCategory;\n        m_FuncMap[\"SetDTVAudioType\"] = &PrivateImpl::SetDTVAudioType;\n        m_FuncMap[\"GetDTVAudioType\"] = &PrivateImpl::GetDTVAudioType;\n        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &PrivateImpl::SetDTVAudioPrimaryLang;\n        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &PrivateImpl::GetDTVAudioPrimaryLang;\n        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &PrivateImpl::SetDTVAudioSecondaryLang;\n        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &PrivateImpl::GetDTVAudioSecondaryLang;\n#ifdef ENABLE_NEW_DVB_2\n        m_FuncMap[\"SetDTVSubtitleType\"] = &PrivateImpl::SetDTVSubtitleType;\n        m_FuncMap[\"GetDTVSubtitleType\"] = &PrivateImpl::GetDTVSubtitleType;\n#endif\n#if defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &PrivateImpl::SetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &PrivateImpl::GetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &PrivateImpl::SetDTVSubtitleSecondaryLang;\n        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &PrivateImpl::GetDTVSubtitleSecondaryLang;\n#endif //defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetATVTableScan\"] = &PrivateImpl::SetATVTableScan;\n        m_FuncMap[\"GetATVTableScan\"] = &PrivateImpl::GetATVTableScan;\n        m_FuncMap[\"GetIsNoSignal\"] = &PrivateImpl::GetIsNoSignal;\n        m_FuncMap[\"GetEpgData\"] = &PrivateImpl::GetEpgData;\n        m_FuncMap[\"GetEpgDataByLCN\"] = &PrivateImpl::GetEpgDataByLCN;\n        m_FuncMap[\"GetEpgListEpgCount\"] = &PrivateImpl::GetEpgListEpgCount; \n        m_FuncMap[\"GetAllLCNByCurFreq\"] = &PrivateImpl::GetAllLCNByCurFreq;\n        m_FuncMap[\"GetEpgDataList\"] = &PrivateImpl::GetEpgDataList;\n        m_FuncMap[\"SetTVStopMode\"] = &PrivateImpl::SetTVStopMode;\n        m_FuncMap[\"GetTVStopMode\"] = &PrivateImpl::GetTVStopMode;\n    }\n```\n\n\n- ### 传输数据的序列/流化\n\n　　类`RpcCommandMuxer`和类`RpcCommandDemuxer`是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。\n　　\n　　类`IpcStreamerPipeImpl`是用于数据的流化处理。\n\n---\n\n## 示例\n\n参见 **`RpcTestJni.cpp`** 源文件。\n\n---\n","source":"_posts/realtek-TV-RPC.md","raw":"---\ntitle: realtek TV RPC\ndate: 2016-07-15 14:50:37\ncategories:\n - work\ntags:\n - realtek\n - linux\n---\n## 接口\n\n1. RPC 客户端基类。\n```cpp\nclass RpcClient\n```\n\n2. RPC类的实体。每个实体代表一个函数调用。其成员`m_StrFuncName`是原始调用函数的函数名。`m_CallCtxMap`为其map组合。\n```cpp\nstruct RpcClient::CallContext\n```\n\n3. RPC回调类。\n```cpp\nclass RpcClient::CallbackHandler\n```\n\n<!-- more -->\n\n4. 数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给`IpcStreamer`传输。参见`RpcCommandType`结构体。\n```cpp\nclass RpcCommandMuxer* m_pCmdMuxer\n```\n\n5. 数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。\n```cpp\nclass RpcCommandDemuxer* m_pCmdDemuxer\n```\n\n6. 数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给`RpcCommandMuxer`及`RpcCommandDemuxer`序列化/反序列化数据。\n```cpp\nclass rtk::ipc::IpcStreamer* m_pStreamer\n```\n\n7. callback的map集合。\n```cpp\nclass CallbackMap m_CallbackMap\n```\n\n8. callback类。继承实现了一个`CommandProcessor`。其实类为`CallbackContext`。\n```cpp\nclass RpcClient::CallbackHandler* m_pCallbackHandler\n```\n\n9. 回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中`struct CallbackContext`结构即为当前的`class CommandProcessor`实类。\n```cpp\nclass CommandQueue<CallbackContext> m_CallbackCmdQue\n```\n\n10. 回调函数序列化的数据流结构体。其中`pData`指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过`RpcCommandDemuxer`反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。\n```cpp\nstruct CallbackContext\n```\n\n11. RPC客户端实例。\n```cpp\nclass RpcClient& m_RpcClient\n```\n\n---\n\n## 类体\n\n1. 指令流头部数据结构体。内结构顺序为：\n`RpcCommandHeader`+`RpcParamHeader1`+`data1`+`...`+`RpcParamHeaderN`+`dataN`。\n```cpp\nstruct RpcCommandHeader\n{\n    unsigned int iRpcCommandType; //RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)\n    unsigned int iId; //唯一ID，用于指示哪个命令。\n    unsigned int iTotalLen; //序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。\n    unsigned int iParamCounts; //数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。\n}\n```\n\n2. 数据流单元结构体。函数名及参数均用此结构体序列化。\n```cpp\nstruct RpcParamHeader\n{\n    unsigned int iRpcParamType; //RPC单元数据类型。参见 enum RpcParamType枚举类型。\n    unsigned int iRpcParamLen; //RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。\n};\n```\n\n3. RpcServer接口虚基类。\n```cpp\nclass IpcServer\n{\npublic: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。\n    virtual bool Start(const char* pStrServerName, void* pParam) = 0;\n    virtual bool Stop() = 0;\n    virtual bool RegisterObserver(IpcServerObserver* pObs) = 0;\n    virtual void UnregisterObserver(IpcServerObserver* pObs) = 0;\n    virtual const char* GetServerName() = 0;\n    virtual void* GetParameter() = 0;\n\npublic:\n    virtual ~IpcServer() { ; };\n};\n```\n\n4. 继承自`IpcServer`，RpcServer基础实现类。\n```cpp\nclass IpcServerBase: public IpcServer\n{\npublic: // 接口定义在IpcServer类中，这里是具体实现。\n    bool Start(const char* pStrServerName, void* pParam);\n    bool Stop();\n    bool RegisterObserver(IpcServerObserver* pObs);\n    void UnregisterObserver(IpcServerObserver* pObs);\n    const char* GetServerName();\n    void* GetParameter();\n\npublic:\n    IpcServerBase();\n    ~IpcServerBase();\n    IpcServerBase (const IpcServerBase &) {}\n    IpcServerBase &operator= (const IpcServerBase&) { return *this; }\n\nprotected: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。\n    virtual bool DoStart(const char* pStrServerName, void* pParam) = 0;\n    virtual bool DoStop() = 0;\n    virtual IpcStreamer* DoAccept() = 0;\n    virtual void FreeIpcStreamer(IpcStreamer* pStreamer) = 0;\n    virtual bool IsShutdownServer() = 0;\n\nprivate: // Used to notify observers\n    void NotifyOpened(const char* pStrServerName);\n    bool NotifyAccepted(IpcStreamer* pStreamer);\n    void NotifyClosed();\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n5. 继承自`IpcServerBase`，FIFO类型RpcServer主实现类。\n```cpp\nclass IpcServerPipeImpl: public IpcServerBase\n{\npublic:\n    IpcServerPipeImpl();\n    ~IpcServerPipeImpl();\n    IpcServerPipeImpl(const IpcServerPipeImpl &param) {}\n    IpcServerPipeImpl &operator = (const IpcServerPipeImpl&) { return *this; }\n\nprivate: //接口定义在 IpcServerBase 类中，这里是具体实现。\n    bool DoStart(const char* pStrServerName, void* pParam);\n    bool DoStop();\n    IpcStreamer* DoAccept();\n    void FreeIpcStreamer(IpcStreamer* pStreamer);\n    bool IsShutdownServer();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n6. IPC服务器端接口类。管理 RpcServer集合等map。\n```cpp\nclass IpcServerManager\n{\npublic:\n    enum\n    {\n        TIME_OUT_INFINITY = -1 //Time out infinity\n    };\n\npublic:\n    static IpcServerManager& GetInstance();\n    bool StartServer(const char* pStrServerName, int iIpcImplMode, void* pParam);\n    bool StopServer(const char* pStrServerName);\n    void StopAllServers();\n    void WaitForAllServerStop(int iTimeout);\n    bool RegisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n    void UnregisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n\nprivate:\n    IpcServerManager();\n    IpcServerManager(const IpcServerManager&);\n    IpcServerManager& operator=(const IpcServerManager&);\n    ~IpcServerManager();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n7. RPC服务端接口类。实际调用IpcServerManager类方法。\n```cpp\nclass RpcServer\n{\npublic:\n    RpcServer();\n    ~RpcServer();\n    bool StartServer(const char* pStrServerName, void* pParam);\n    bool StopServer();\n    const char* GetServerName() const;\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcServer(const RpcServer &);\n    RpcServer &operator=(const RpcServer &);\n};\n```\n\n8. RPC调用执行管理类。\n```cpp\nclass RpcExecutorManager\n{\npublic:\n    enum ErrCode\n    {\n        ERR_FAILED = -1,\n    };\npublic:\n    static RpcExecutorManager& GetInstance();\n    bool RegisterExecutor(RpcExecutor* pExecutor);\n    bool UnregisterExecutor(RpcExecutor* pExecutor);\n    int Execute(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  char* pBuffer, int iBufSize);\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcExecutorManager();\n    ~RpcExecutorManager();\n    RpcExecutorManager(const RpcExecutorManager&);\n    RpcExecutorManager& operator=(const RpcExecutorManager&);\n};\n```\n\n---\n\n## 原理及过程分析\n\n- ### RPC机制原理\n\n　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。\n　　\n　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的`IpcPipeImplHeader`数据，并根据`IpcPipeImplHeader`数据中的参数`iID`来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。\n　　\n　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的`iID`，此参数`iID`保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在`IpcPipeImplHeader`结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。\n　　\n　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入`IpcPipeImplHeader`数据来实现沟通。\n\n- ### RpcServer启动过程 \n\n　　构造RpcServer时，通过调用`IpcServerManager`接口类初始化来创建实例，并`StartServer`。而在`StartServer`方法中调用了`IpcServerPipeImpl`类构造函数来实例化 **IPC_PIPE** 型RpcServer对象，并`Start`服务。`IpcServerPipeImpl`接口类继承自`IpcServerBase`接口类，`Start`方法在`IpcServerBase`接口类中，而`Start`方法又通过虚接口调用了子类`IpcServerPipeImpl`类中的`DoStart`方法来创建FIFO，然后调用`IpcServerBase`接口类中的`StartAccetpClient`方法来启动接收RpcClient数据的服务。`IpcServerBase`接口类中的`PrivateImpl`成员类是继承自`CommandProcessor`类的对象，用于开始接收并通知streamer的接收数据。在`StartAccetpClient`方法中创建了一个`CommandQueue`类，通过调用此类的`AddCommand`方法并用 **ACCEPT_COMMAND** 参数（此参数目前不起任何作用）来创建一个等待指令的线程`Policy1Proc`。如果监测到有事件发生，此线程调用`IpcServerBase::PrivateImpl`这个 `CommandProcessor`对象中的`Execute`方法来执行。而`Execute`方法里又调用了`IpcServerPipeImpl`接口类中的`DoAccept`方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输`IpcPipeImplHeader`结构的数据。\n　　\n　　RpcServer接收到`IpcPipeImplHeader`结构的数据后，调用`CreateStreamerByCommand`方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并放到streamer类map中存储。其中，因为接收到的数据中有`iID`这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。\n\n- ### RpcClient启动过程\n\n　　与RpcServer类似，不赘述。\n\n- ### RpcClient与RpcServer交互过程\n\n　　RpcServer先启动，创建好监听RpcClient的FIFO。\n　　\n　　调用`IpcClientFactory`类创建实例对像，实际调用`IpcClientPipeImpl`类来构造RpcClient。并加入到`ClientList`vctor容器中。\n　　\n　　RpcClient构造后开始连接RpcServer(`IpcClientPipeImpl::Connect`)。先`open`打开RpcServer创建好的FIFO，并向FIFO`write`一个`IpcPipeImplHeader`结构体的数据后关闭FIFO。然后调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并`open`打开(`IpcStreamerPipeImpl::DoOpen`)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。\n\n- ### INVOKE远程调用执行过程\n\n　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序`push`，最后`push`函数名，最后`finish`。然后调用`RpcCommandMuxer`类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用`RpcCommandDemuxer`类反序列化数据。并调用`RpcExecutorManager`类里的方法来执行相关动作。\n　　\n　　其中`RpcExecutorManager`是一个专用于管理`RpcExecutor`类对象的管理器。同样的还有`IpcServerManager`。\n　　\n　　而`RpcExecutor`是真正执行函数调用的类。它被用于模块初始化时调用，通过`RegisterExecutor`/`UnregisterExecutor`方法注册/反注册到`RpcExecutorManager`类中的list中。它的`Execute`方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以`RpcCommandMuxer`类表示的数据。\n　　　　\n　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用`RpcCommandMuxer`序列化数据时，头部`RpcCommandHeader`结构体数据里面填充的`iRpcCommandType`参数数据不同。\n　　\n　　TvService模块初始化时调用`RpcExecutor`类来注册供RpcClient远程调用invoke的native函数集合，其成员`m_FuncMap`是一个`RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);`类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成`RpcCommandMuxer`流数据返回。\n　　\n> **例如:** `TvChannelApiExecutor`类。\n> \n```cpp\nclass PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),\n                   m_bFirstPlay(false)\n    {\n        m_FuncMap[\"TvAutoScanStart\"] = &PrivateImpl::TvAutoScanStart;\n        m_FuncMap[\"TvAutoScanStop\"] = &PrivateImpl::TvAutoScanStop;\n        m_FuncMap[\"TvAutoScanComplete\"] = &PrivateImpl::TvAutoScanComplete; \n        m_FuncMap[\"TvAutoScanStartWithRange\"] = &PrivateImpl::TvAutoScanStartWithRange;\n        m_FuncMap[\"TvAutoScanStopWithRange\"] = &PrivateImpl::TvAutoScanStopWithRange;\n        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &PrivateImpl::TvAutoScanCompleteWithRange;  \n        m_FuncMap[\"TvSeekScanStart\"] = &PrivateImpl::TvSeekScanStart;\n        m_FuncMap[\"TvSeekScanStop\"] = &PrivateImpl::TvSeekScanStop;\n        m_FuncMap[\"TvScanManualStart\"] = &PrivateImpl::TvScanManualStart;\n        m_FuncMap[\"TvScanManualStop\"] = &PrivateImpl::TvScanManualStop;\n        m_FuncMap[\"TvScanManualComplete\"] = &PrivateImpl::TvScanManualComplete;\n        m_FuncMap[\"TvScanInfo\"] = &PrivateImpl::TvScanInfo;\n        m_FuncMap[\"IsTvScanning\"] = &PrivateImpl::IsTvScanning;\n        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &PrivateImpl::GetAtvSeqScanStartFreq;\n        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &PrivateImpl::GetAtvSeqScanEndFreq;\n        m_FuncMap[\"SetDtvScanType\"] = &PrivateImpl::SetDtvScanType;\n        m_FuncMap[\"GetDtvScanType\"] = &PrivateImpl::GetDtvScanType;\n        m_FuncMap[\"PlayNextChannel\"] = &PrivateImpl::PlayNextChannel;\n        m_FuncMap[\"PlayPrevChannel\"] = &PrivateImpl::PlayPrevChannel;\n        m_FuncMap[\"PlayFirstChannel\"] = &PrivateImpl::PlayFirstChannel;\n        m_FuncMap[\"PlayHistoryChannel\"] = &PrivateImpl::PlayHistoryChannel;\n        m_FuncMap[\"DumpTvChannelList\"] = &PrivateImpl::DumpTvChannelList;\n        m_FuncMap[\"SetDefaultFilter\"] = &PrivateImpl::SetDefaultFilter;\n        m_FuncMap[\"GetDefaultFilter\"] = &PrivateImpl::GetDefaultFilter;\n        m_FuncMap[\"GetCurChannel\"] = &PrivateImpl::GetCurChannel;\n        m_FuncMap[\"GetChannelInfoByIndex\"] = &PrivateImpl::GetChannelInfoByIndex;\n        m_FuncMap[\"GetChInfoArray\"] = &PrivateImpl::GetChInfoArray;\n        m_FuncMap[\"GetChannelBandwidth\"] = &PrivateImpl::GetChannelBandwidth;\n        m_FuncMap[\"GetChannelName\"] = &PrivateImpl::GetChannelName;\n        m_FuncMap[\"GetChannelCount\"] = &PrivateImpl::GetChannelCount;\n        m_FuncMap[\"SortChannel\"] = &PrivateImpl::SortChannel;\n        m_FuncMap[\"SaveChannel\"] = &PrivateImpl::SaveChannel;\n        m_FuncMap[\"PlayChannelByIndex\"] = &PrivateImpl::PlayChannelByIndex;\n        m_FuncMap[\"PlayChannelByNum\"] = &PrivateImpl::PlayChannelByNum;\n        m_FuncMap[\"PlayChannel\"] = &PrivateImpl::PlayChannel;       \n        m_FuncMap[\"PlayChannelByLCN\"] = &PrivateImpl::PlayChannelByLCN;\n        m_FuncMap[\"PlayFirstChannelInFreq\"] = &PrivateImpl::PlayFirstChannelInFreq;\n        m_FuncMap[\"PlayChannelByChnumFreq\"] = &PrivateImpl::PlayChannelByChnumFreq;\n        m_FuncMap[\"SwapChannelByIdxEx\"] = &PrivateImpl::SwapChannelByIdxEx;\n        m_FuncMap[\"SwapChannelByNumEx\"] = &PrivateImpl::SwapChannelByNumEx;\n        m_FuncMap[\"ReloadLastPlayedSource\"] = &PrivateImpl::ReloadLastPlayedSource;\n        m_FuncMap[\"SetCurChannelSkipped\"] = &PrivateImpl::SetCurChannelSkipped;\n        m_FuncMap[\"SetCurAtvSoundStd\"] = &PrivateImpl::SetCurAtvSoundStd;\n        m_FuncMap[\"FineTuneCurFrequency\"] = &PrivateImpl::FineTuneCurFrequency;\n        m_FuncMap[\"SetCurChAudioCompensation\"] = &PrivateImpl::SetCurChAudioCompensation;\n        m_FuncMap[\"SetSource\"] = &PrivateImpl::SetSource;\n        m_FuncMap[\"SetBootSource\"] = &PrivateImpl::SetBootSource;\n        m_FuncMap[\"GetCurChannelSkipped\"] = &PrivateImpl::GetCurChannelSkipped;\n        m_FuncMap[\"GetCurAtvSoundStd\"] = &PrivateImpl::GetCurAtvSoundStd;\n        m_FuncMap[\"GetCurChAudioCompensation\"] = &PrivateImpl::GetCurChAudioCompensation;\n        m_FuncMap[\"GetSourceList\"] = &PrivateImpl::GetSourceList;\n        m_FuncMap[\"GetSourceListCnt\"] = &PrivateImpl::GetSourceListCnt;\n        m_FuncMap[\"GetCurSourceType\"] = &PrivateImpl::GetCurSourceType;\n        m_FuncMap[\"GetBootSource\"] = &PrivateImpl::GetBootSource;\n#if defined (TVSERVER_IDTV)\n        m_FuncMap[\"GetIDTVSubSource\"] = &PrivateImpl::GetIDTVSubSource;\n#endif\n        m_FuncMap[\"GetCurTvType\"] = &PrivateImpl::GetCurTvType; \n        m_FuncMap[\"GetChannelNameList\"] = &PrivateImpl::GetChannelNameList;    \n        m_FuncMap[\"GetCurrentProgramInfo\"] = &PrivateImpl::GetCurrentProgramInfo;                   \n        m_FuncMap[\"GetCurrentProgramDescription\"] = &PrivateImpl::GetCurrentProgramDescription;                         \n        m_FuncMap[\"GetCurrentProgramRating\"] = &PrivateImpl::GetCurrentProgramRating;   \n        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &PrivateImpl::HasCurrentProgramWithSubtitle;           \n        m_FuncMap[\"GetCurAtvSoundSelect\"] = &PrivateImpl::GetCurAtvSoundSelect;\n        m_FuncMap[\"GetCurDtvAudioPID\"]=&PrivateImpl::GetCurDtvAudioPID;\n        m_FuncMap[\"GetCurDtvVideoPID\"]=&PrivateImpl::GetCurDtvVideoPID;\n        m_FuncMap[\"GetCurDtvTSID\"]=&PrivateImpl::GetCurDtvTSID;\n        m_FuncMap[\"GetCurDtvServiceID\"]=&PrivateImpl::GetCurDtvServiceID;\n        m_FuncMap[\"GetCurDtvPCR\"]=&PrivateImpl::GetCurDtvPCR;\n        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &PrivateImpl::SetCurDtvSoundSelectByIndex;\n        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&PrivateImpl::GetCurDtvSoundSelectIndex;     \n        m_FuncMap[\"GetCurrentAudioLang\"] = &PrivateImpl::GetCurrentAudioLang;\n        m_FuncMap[\"GetCurInputInfo\"] = &PrivateImpl::GetCurInputInfo;\n        m_FuncMap[\"GetCurrentSetting_tv\"] = &PrivateImpl::GetCurrentSetting_tv;\n        m_FuncMap[\"GetChannelFreqCount\"] = &PrivateImpl::GetChannelFreqCount;\n        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &PrivateImpl::GetChannelFreqByTableIndex;   \n        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &PrivateImpl::GetChannelchannelNumByTableIndex;      \n        m_FuncMap[\"GetChannelCountByFreq\"] = &PrivateImpl::GetChannelCountByFreq;     \n        m_FuncMap[\"GetCurChannelIndex\"] = &PrivateImpl::GetCurChannelIndex;\n        m_FuncMap[\"PlayNumberChannel\"] = &PrivateImpl::PlayNumberChannel;\n        m_FuncMap[\"GetChannelListChannelCount\"] = &PrivateImpl::GetChannelListChannelCount;\n        m_FuncMap[\"GetChannelDataList\"] = &PrivateImpl::GetChannelDataList;\n        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &PrivateImpl::GetCurDtvSoundSelectList;\n        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &PrivateImpl::GetCurDtvSoundSelectCount;\n        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &PrivateImpl::GetCurAtvSoundSelectList;\n        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &PrivateImpl::GetCurAtvSoundSelectCount;\n        m_FuncMap[\"SetCaptionMode\"] = &PrivateImpl::SetCaptionMode;\n        m_FuncMap[\"GetCaptionMode\"] = &PrivateImpl::GetCaptionMode;\n        m_FuncMap[\"SetAnalogCaption\"] = &PrivateImpl::SetAnalogCaption;\n        m_FuncMap[\"GetAnalogCaption\"] = &PrivateImpl::GetAnalogCaption;\n        m_FuncMap[\"SetDigitalCaption\"] = &PrivateImpl::SetDigitalCaption;\n        m_FuncMap[\"SetChannelFav\"] = &PrivateImpl::SetChannelFav;\n        m_FuncMap[\"SetChannelSkip\"] = &PrivateImpl::SetChannelSkip;\n        m_FuncMap[\"SetChannelBlock\"] = &PrivateImpl::SetChannelBlock;       \n        m_FuncMap[\"SetChannelDel\"] = &PrivateImpl::SetChannelDel;\n        m_FuncMap[\"GetChannelFav\"] = &PrivateImpl::GetChannelFav;\n        m_FuncMap[\"GetChannelSkip\"] = &PrivateImpl::GetChannelSkip;     \n        m_FuncMap[\"GetChannelBlock\"] = &PrivateImpl::GetChannelBlock;\n        m_FuncMap[\"QueryTvStatus\"] = &PrivateImpl::QueryTvStatus;\n        m_FuncMap[\"StartRecordTs\"] = &PrivateImpl::StartRecordTs;\n        m_FuncMap[\"StopRecordTs\"] = &PrivateImpl::StopRecordTs;\n        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &PrivateImpl::GetEpgDailyListCountByChIdx;   \n#ifdef DVB_T                                \n        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &PrivateImpl::GetEpgDailyListByChIdx;\n#endif\n#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN\n        m_FuncMap[\"StartDetection\"] = &PrivateImpl::StartDetection; \n        m_FuncMap[\"StopDetection\"] = &PrivateImpl::StopDetection;   \n#endif\n#ifdef QAM_MODE_SETTING\n        m_FuncMap[\"GetTvQamConst\"] = &PrivateImpl::GetTvQamConst;\n        m_FuncMap[\"SetTvQamConst\"] = &PrivateImpl::SetTvQamConst;\n#endif\n#ifdef SYMBOL_RATE_SETTING_BY_VAL\n        m_FuncMap[\"GetTvSymbolRateValue\"] = &PrivateImpl::GetTvSymbolRateValue;\n        m_FuncMap[\"SetTvSymbolRateValue\"] = &PrivateImpl::SetTvSymbolRateValue;\n#endif\n        m_FuncMap[\"SetSubtitleEnable\"] = &PrivateImpl::SetSubtitleEnable;\n        m_FuncMap[\"GetSubtitleEnable\"] = &PrivateImpl::GetSubtitleEnable;\n        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &PrivateImpl::SetDtvSubtitleByIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &PrivateImpl::GetDtvSubtitleIndexList;\n        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &PrivateImpl::GetCurDtvSubtitleIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &PrivateImpl::GetDtvSubtitleIndexListCount;\n        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &PrivateImpl::GetDtvSubtitleIndexListCountByCategory;\n        m_FuncMap[\"SetDTVAudioType\"] = &PrivateImpl::SetDTVAudioType;\n        m_FuncMap[\"GetDTVAudioType\"] = &PrivateImpl::GetDTVAudioType;\n        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &PrivateImpl::SetDTVAudioPrimaryLang;\n        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &PrivateImpl::GetDTVAudioPrimaryLang;\n        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &PrivateImpl::SetDTVAudioSecondaryLang;\n        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &PrivateImpl::GetDTVAudioSecondaryLang;\n#ifdef ENABLE_NEW_DVB_2\n        m_FuncMap[\"SetDTVSubtitleType\"] = &PrivateImpl::SetDTVSubtitleType;\n        m_FuncMap[\"GetDTVSubtitleType\"] = &PrivateImpl::GetDTVSubtitleType;\n#endif\n#if defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &PrivateImpl::SetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &PrivateImpl::GetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &PrivateImpl::SetDTVSubtitleSecondaryLang;\n        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &PrivateImpl::GetDTVSubtitleSecondaryLang;\n#endif //defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetATVTableScan\"] = &PrivateImpl::SetATVTableScan;\n        m_FuncMap[\"GetATVTableScan\"] = &PrivateImpl::GetATVTableScan;\n        m_FuncMap[\"GetIsNoSignal\"] = &PrivateImpl::GetIsNoSignal;\n        m_FuncMap[\"GetEpgData\"] = &PrivateImpl::GetEpgData;\n        m_FuncMap[\"GetEpgDataByLCN\"] = &PrivateImpl::GetEpgDataByLCN;\n        m_FuncMap[\"GetEpgListEpgCount\"] = &PrivateImpl::GetEpgListEpgCount; \n        m_FuncMap[\"GetAllLCNByCurFreq\"] = &PrivateImpl::GetAllLCNByCurFreq;\n        m_FuncMap[\"GetEpgDataList\"] = &PrivateImpl::GetEpgDataList;\n        m_FuncMap[\"SetTVStopMode\"] = &PrivateImpl::SetTVStopMode;\n        m_FuncMap[\"GetTVStopMode\"] = &PrivateImpl::GetTVStopMode;\n    }\n```\n\n\n- ### 传输数据的序列/流化\n\n　　类`RpcCommandMuxer`和类`RpcCommandDemuxer`是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。\n　　\n　　类`IpcStreamerPipeImpl`是用于数据的流化处理。\n\n---\n\n## 示例\n\n参见 **`RpcTestJni.cpp`** 源文件。\n\n---\n","slug":"realtek-TV-RPC","published":1,"updated":"2016-09-06T08:44:45.040Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18r001rfgn9d9ytzgh4","content":"<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ol>\n<li><p>RPC 客户端基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC类的实体。每个实体代表一个函数调用。其成员<code>m_StrFuncName</code>是原始调用函数的函数名。<code>m_CallCtxMap</code>为其map组合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcClient::CallContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC回调类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给<code>IpcStreamer</code>传输。参见<code>RpcCommandType</code>结构体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandMuxer* m_pCmdMuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandDemuxer* m_pCmdDemuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给<code>RpcCommandMuxer</code>及<code>RpcCommandDemuxer</code>序列化/反序列化数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> rtk::ipc::IpcStreamer* m_pStreamer</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback的map集合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CallbackMap m_CallbackMap</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback类。继承实现了一个<code>CommandProcessor</code>。其实类为<code>CallbackContext</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler* m_pCallbackHandler</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中<code>struct CallbackContext</code>结构即为当前的<code>class CommandProcessor</code>实类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CommandQueue&lt;CallbackContext&gt; m_CallbackCmdQue</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数序列化的数据流结构体。其中<code>pData</code>指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过<code>RpcCommandDemuxer</code>反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> CallbackContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC客户端实例。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient&amp; m_RpcClient</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"类体\"><a href=\"#类体\" class=\"headerlink\" title=\"类体\"></a>类体</h2><ol>\n<li><p>指令流头部数据结构体。内结构顺序为：<br><code>RpcCommandHeader</code>+<code>RpcParamHeader1</code>+<code>data1</code>+<code>...</code>+<code>RpcParamHeaderN</code>+<code>dataN</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcCommandHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcCommandType; <span class=\"comment\">//RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iId; <span class=\"comment\">//唯一ID，用于指示哪个命令。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iTotalLen; <span class=\"comment\">//序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iParamCounts; <span class=\"comment\">//数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流单元结构体。函数名及参数均用此结构体序列化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcParamHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamType; <span class=\"comment\">//RPC单元数据类型。参见 enum RpcParamType枚举类型。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamLen; <span class=\"comment\">//RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RpcServer接口虚基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">virtual</span> ~IpcServer() &#123; ; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServer</code>，RpcServer基础实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerBase: <span class=\"keyword\">public</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">// 接口定义在IpcServer类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerBase();</div><div class=\"line\">    ~IpcServerBase();</div><div class=\"line\">    IpcServerBase (<span class=\"keyword\">const</span> IpcServerBase &amp;) &#123;&#125;</div><div class=\"line\">    IpcServerBase &amp;<span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> IpcServerBase&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// Used to notify observers</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyOpened</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">NotifyAccepted</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyClosed</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServerBase</code>，FIFO类型RpcServer主实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerPipeImpl: <span class=\"keyword\">public</span> IpcServerBase</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerPipeImpl();</div><div class=\"line\">    ~IpcServerPipeImpl();</div><div class=\"line\">    IpcServerPipeImpl(<span class=\"keyword\">const</span> IpcServerPipeImpl &amp;param) &#123;&#125;</div><div class=\"line\">    IpcServerPipeImpl &amp;<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> IpcServerPipeImpl&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//接口定义在 IpcServerBase 类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>IPC服务器端接口类。管理 RpcServer集合等map。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        TIME_OUT_INFINITY = <span class=\"number\">-1</span> <span class=\"comment\">//Time out infinity</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> IpcServerManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">int</span> iIpcImplMode, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAllServers</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WaitForAllServerStop</span><span class=\"params\">(<span class=\"keyword\">int</span> iTimeout)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    IpcServerManager();</div><div class=\"line\">    IpcServerManager(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    IpcServerManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    ~IpcServerManager();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC服务端接口类。实际调用IpcServerManager类方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    RpcServer();</div><div class=\"line\">    ~RpcServer();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcServer(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">    RpcServer &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC调用执行管理类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcExecutorManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> ErrCode</div><div class=\"line\">    &#123;</div><div class=\"line\">        ERR_FAILED = <span class=\"number\">-1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> RpcExecutorManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnregisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Execute</span><span class=\"params\">(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  <span class=\"keyword\">char</span>* pBuffer, <span class=\"keyword\">int</span> iBufSize)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcExecutorManager();</div><div class=\"line\">    ~RpcExecutorManager();</div><div class=\"line\">    RpcExecutorManager(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">    RpcExecutorManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"原理及过程分析\"><a href=\"#原理及过程分析\" class=\"headerlink\" title=\"原理及过程分析\"></a>原理及过程分析</h2><ul>\n<li><h3 id=\"RPC机制原理\"><a href=\"#RPC机制原理\" class=\"headerlink\" title=\"RPC机制原理\"></a>RPC机制原理</h3></li>\n</ul>\n<p>　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。<br>　　<br>　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的<code>IpcPipeImplHeader</code>数据，并根据<code>IpcPipeImplHeader</code>数据中的参数<code>iID</code>来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。<br>　　<br>　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的<code>iID</code>，此参数<code>iID</code>保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在<code>IpcPipeImplHeader</code>结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。<br>　　<br>　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入<code>IpcPipeImplHeader</code>数据来实现沟通。</p>\n<ul>\n<li><h3 id=\"RpcServer启动过程\"><a href=\"#RpcServer启动过程\" class=\"headerlink\" title=\"RpcServer启动过程\"></a>RpcServer启动过程</h3></li>\n</ul>\n<p>　　构造RpcServer时，通过调用<code>IpcServerManager</code>接口类初始化来创建实例，并<code>StartServer</code>。而在<code>StartServer</code>方法中调用了<code>IpcServerPipeImpl</code>类构造函数来实例化 <strong>IPC_PIPE</strong> 型RpcServer对象，并<code>Start</code>服务。<code>IpcServerPipeImpl</code>接口类继承自<code>IpcServerBase</code>接口类，<code>Start</code>方法在<code>IpcServerBase</code>接口类中，而<code>Start</code>方法又通过虚接口调用了子类<code>IpcServerPipeImpl</code>类中的<code>DoStart</code>方法来创建FIFO，然后调用<code>IpcServerBase</code>接口类中的<code>StartAccetpClient</code>方法来启动接收RpcClient数据的服务。<code>IpcServerBase</code>接口类中的<code>PrivateImpl</code>成员类是继承自<code>CommandProcessor</code>类的对象，用于开始接收并通知streamer的接收数据。在<code>StartAccetpClient</code>方法中创建了一个<code>CommandQueue</code>类，通过调用此类的<code>AddCommand</code>方法并用 <strong>ACCEPT_COMMAND</strong> 参数（此参数目前不起任何作用）来创建一个等待指令的线程<code>Policy1Proc</code>。如果监测到有事件发生，此线程调用<code>IpcServerBase::PrivateImpl</code>这个 <code>CommandProcessor</code>对象中的<code>Execute</code>方法来执行。而<code>Execute</code>方法里又调用了<code>IpcServerPipeImpl</code>接口类中的<code>DoAccept</code>方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输<code>IpcPipeImplHeader</code>结构的数据。<br>　　<br>　　RpcServer接收到<code>IpcPipeImplHeader</code>结构的数据后，调用<code>CreateStreamerByCommand</code>方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并放到streamer类map中存储。其中，因为接收到的数据中有<code>iID</code>这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。</p>\n<ul>\n<li><h3 id=\"RpcClient启动过程\"><a href=\"#RpcClient启动过程\" class=\"headerlink\" title=\"RpcClient启动过程\"></a>RpcClient启动过程</h3></li>\n</ul>\n<p>　　与RpcServer类似，不赘述。</p>\n<ul>\n<li><h3 id=\"RpcClient与RpcServer交互过程\"><a href=\"#RpcClient与RpcServer交互过程\" class=\"headerlink\" title=\"RpcClient与RpcServer交互过程\"></a>RpcClient与RpcServer交互过程</h3></li>\n</ul>\n<p>　　RpcServer先启动，创建好监听RpcClient的FIFO。<br>　　<br>　　调用<code>IpcClientFactory</code>类创建实例对像，实际调用<code>IpcClientPipeImpl</code>类来构造RpcClient。并加入到<code>ClientList</code>vctor容器中。<br>　　<br>　　RpcClient构造后开始连接RpcServer(<code>IpcClientPipeImpl::Connect</code>)。先<code>open</code>打开RpcServer创建好的FIFO，并向FIFO<code>write</code>一个<code>IpcPipeImplHeader</code>结构体的数据后关闭FIFO。然后调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并<code>open</code>打开(<code>IpcStreamerPipeImpl::DoOpen</code>)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。</p>\n<ul>\n<li><h3 id=\"INVOKE远程调用执行过程\"><a href=\"#INVOKE远程调用执行过程\" class=\"headerlink\" title=\"INVOKE远程调用执行过程\"></a>INVOKE远程调用执行过程</h3></li>\n</ul>\n<p>　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序<code>push</code>，最后<code>push</code>函数名，最后<code>finish</code>。然后调用<code>RpcCommandMuxer</code>类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用<code>RpcCommandDemuxer</code>类反序列化数据。并调用<code>RpcExecutorManager</code>类里的方法来执行相关动作。<br>　　<br>　　其中<code>RpcExecutorManager</code>是一个专用于管理<code>RpcExecutor</code>类对象的管理器。同样的还有<code>IpcServerManager</code>。<br>　　<br>　　而<code>RpcExecutor</code>是真正执行函数调用的类。它被用于模块初始化时调用，通过<code>RegisterExecutor</code>/<code>UnregisterExecutor</code>方法注册/反注册到<code>RpcExecutorManager</code>类中的list中。它的<code>Execute</code>方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以<code>RpcCommandMuxer</code>类表示的数据。<br>　　　　<br>　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用<code>RpcCommandMuxer</code>序列化数据时，头部<code>RpcCommandHeader</code>结构体数据里面填充的<code>iRpcCommandType</code>参数数据不同。<br>　　<br>　　TvService模块初始化时调用<code>RpcExecutor</code>类来注册供RpcClient远程调用invoke的native函数集合，其成员<code>m_FuncMap</code>是一个<code>RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);</code>类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成<code>RpcCommandMuxer</code>流数据返回。\n　　</p>\n<blockquote>\n<p><strong>例如:</strong> <code>TvChannelApiExecutor</code>类。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">class PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),</div><div class=\"line\">                   m_bFirstPlay(false)</div><div class=\"line\">    &#123;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStart\"] = &amp;PrivateImpl::TvAutoScanStart;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStop\"] = &amp;PrivateImpl::TvAutoScanStop;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanComplete\"] = &amp;PrivateImpl::TvAutoScanComplete; </div><div class=\"line\">        m_FuncMap[\"TvAutoScanStartWithRange\"] = &amp;PrivateImpl::TvAutoScanStartWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStopWithRange\"] = &amp;PrivateImpl::TvAutoScanStopWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &amp;PrivateImpl::TvAutoScanCompleteWithRange;  </div><div class=\"line\">        m_FuncMap[\"TvSeekScanStart\"] = &amp;PrivateImpl::TvSeekScanStart;</div><div class=\"line\">        m_FuncMap[\"TvSeekScanStop\"] = &amp;PrivateImpl::TvSeekScanStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStart\"] = &amp;PrivateImpl::TvScanManualStart;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStop\"] = &amp;PrivateImpl::TvScanManualStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualComplete\"] = &amp;PrivateImpl::TvScanManualComplete;</div><div class=\"line\">        m_FuncMap[\"TvScanInfo\"] = &amp;PrivateImpl::TvScanInfo;</div><div class=\"line\">        m_FuncMap[\"IsTvScanning\"] = &amp;PrivateImpl::IsTvScanning;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &amp;PrivateImpl::GetAtvSeqScanStartFreq;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &amp;PrivateImpl::GetAtvSeqScanEndFreq;</div><div class=\"line\">        m_FuncMap[\"SetDtvScanType\"] = &amp;PrivateImpl::SetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"GetDtvScanType\"] = &amp;PrivateImpl::GetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"PlayNextChannel\"] = &amp;PrivateImpl::PlayNextChannel;</div><div class=\"line\">        m_FuncMap[\"PlayPrevChannel\"] = &amp;PrivateImpl::PlayPrevChannel;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannel\"] = &amp;PrivateImpl::PlayFirstChannel;</div><div class=\"line\">        m_FuncMap[\"PlayHistoryChannel\"] = &amp;PrivateImpl::PlayHistoryChannel;</div><div class=\"line\">        m_FuncMap[\"DumpTvChannelList\"] = &amp;PrivateImpl::DumpTvChannelList;</div><div class=\"line\">        m_FuncMap[\"SetDefaultFilter\"] = &amp;PrivateImpl::SetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetDefaultFilter\"] = &amp;PrivateImpl::GetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetCurChannel\"] = &amp;PrivateImpl::GetCurChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelInfoByIndex\"] = &amp;PrivateImpl::GetChannelInfoByIndex;</div><div class=\"line\">        m_FuncMap[\"GetChInfoArray\"] = &amp;PrivateImpl::GetChInfoArray;</div><div class=\"line\">        m_FuncMap[\"GetChannelBandwidth\"] = &amp;PrivateImpl::GetChannelBandwidth;</div><div class=\"line\">        m_FuncMap[\"GetChannelName\"] = &amp;PrivateImpl::GetChannelName;</div><div class=\"line\">        m_FuncMap[\"GetChannelCount\"] = &amp;PrivateImpl::GetChannelCount;</div><div class=\"line\">        m_FuncMap[\"SortChannel\"] = &amp;PrivateImpl::SortChannel;</div><div class=\"line\">        m_FuncMap[\"SaveChannel\"] = &amp;PrivateImpl::SaveChannel;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByIndex\"] = &amp;PrivateImpl::PlayChannelByIndex;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByNum\"] = &amp;PrivateImpl::PlayChannelByNum;</div><div class=\"line\">        m_FuncMap[\"PlayChannel\"] = &amp;PrivateImpl::PlayChannel;       </div><div class=\"line\">        m_FuncMap[\"PlayChannelByLCN\"] = &amp;PrivateImpl::PlayChannelByLCN;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannelInFreq\"] = &amp;PrivateImpl::PlayFirstChannelInFreq;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByChnumFreq\"] = &amp;PrivateImpl::PlayChannelByChnumFreq;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByIdxEx\"] = &amp;PrivateImpl::SwapChannelByIdxEx;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByNumEx\"] = &amp;PrivateImpl::SwapChannelByNumEx;</div><div class=\"line\">        m_FuncMap[\"ReloadLastPlayedSource\"] = &amp;PrivateImpl::ReloadLastPlayedSource;</div><div class=\"line\">        m_FuncMap[\"SetCurChannelSkipped\"] = &amp;PrivateImpl::SetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"SetCurAtvSoundStd\"] = &amp;PrivateImpl::SetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"FineTuneCurFrequency\"] = &amp;PrivateImpl::FineTuneCurFrequency;</div><div class=\"line\">        m_FuncMap[\"SetCurChAudioCompensation\"] = &amp;PrivateImpl::SetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"SetSource\"] = &amp;PrivateImpl::SetSource;</div><div class=\"line\">        m_FuncMap[\"SetBootSource\"] = &amp;PrivateImpl::SetBootSource;</div><div class=\"line\">        m_FuncMap[\"GetCurChannelSkipped\"] = &amp;PrivateImpl::GetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundStd\"] = &amp;PrivateImpl::GetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"GetCurChAudioCompensation\"] = &amp;PrivateImpl::GetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"GetSourceList\"] = &amp;PrivateImpl::GetSourceList;</div><div class=\"line\">        m_FuncMap[\"GetSourceListCnt\"] = &amp;PrivateImpl::GetSourceListCnt;</div><div class=\"line\">        m_FuncMap[\"GetCurSourceType\"] = &amp;PrivateImpl::GetCurSourceType;</div><div class=\"line\">        m_FuncMap[\"GetBootSource\"] = &amp;PrivateImpl::GetBootSource;</div><div class=\"line\">#if defined (TVSERVER_IDTV)</div><div class=\"line\">        m_FuncMap[\"GetIDTVSubSource\"] = &amp;PrivateImpl::GetIDTVSubSource;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"GetCurTvType\"] = &amp;PrivateImpl::GetCurTvType; </div><div class=\"line\">        m_FuncMap[\"GetChannelNameList\"] = &amp;PrivateImpl::GetChannelNameList;    </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramInfo\"] = &amp;PrivateImpl::GetCurrentProgramInfo;                   </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramDescription\"] = &amp;PrivateImpl::GetCurrentProgramDescription;                         </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramRating\"] = &amp;PrivateImpl::GetCurrentProgramRating;   </div><div class=\"line\">        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &amp;PrivateImpl::HasCurrentProgramWithSubtitle;           </div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelect\"] = &amp;PrivateImpl::GetCurAtvSoundSelect;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvAudioPID\"]=&amp;PrivateImpl::GetCurDtvAudioPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvVideoPID\"]=&amp;PrivateImpl::GetCurDtvVideoPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvTSID\"]=&amp;PrivateImpl::GetCurDtvTSID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvServiceID\"]=&amp;PrivateImpl::GetCurDtvServiceID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvPCR\"]=&amp;PrivateImpl::GetCurDtvPCR;</div><div class=\"line\">        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &amp;PrivateImpl::SetCurDtvSoundSelectByIndex;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&amp;PrivateImpl::GetCurDtvSoundSelectIndex;     </div><div class=\"line\">        m_FuncMap[\"GetCurrentAudioLang\"] = &amp;PrivateImpl::GetCurrentAudioLang;</div><div class=\"line\">        m_FuncMap[\"GetCurInputInfo\"] = &amp;PrivateImpl::GetCurInputInfo;</div><div class=\"line\">        m_FuncMap[\"GetCurrentSetting_tv\"] = &amp;PrivateImpl::GetCurrentSetting_tv;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqCount\"] = &amp;PrivateImpl::GetChannelFreqCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &amp;PrivateImpl::GetChannelFreqByTableIndex;   </div><div class=\"line\">        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &amp;PrivateImpl::GetChannelchannelNumByTableIndex;      </div><div class=\"line\">        m_FuncMap[\"GetChannelCountByFreq\"] = &amp;PrivateImpl::GetChannelCountByFreq;     </div><div class=\"line\">        m_FuncMap[\"GetCurChannelIndex\"] = &amp;PrivateImpl::GetCurChannelIndex;</div><div class=\"line\">        m_FuncMap[\"PlayNumberChannel\"] = &amp;PrivateImpl::PlayNumberChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelListChannelCount\"] = &amp;PrivateImpl::GetChannelListChannelCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelDataList\"] = &amp;PrivateImpl::GetChannelDataList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &amp;PrivateImpl::GetCurDtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurDtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &amp;PrivateImpl::GetCurAtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurAtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"SetCaptionMode\"] = &amp;PrivateImpl::SetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"GetCaptionMode\"] = &amp;PrivateImpl::GetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"SetAnalogCaption\"] = &amp;PrivateImpl::SetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"GetAnalogCaption\"] = &amp;PrivateImpl::GetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"SetDigitalCaption\"] = &amp;PrivateImpl::SetDigitalCaption;</div><div class=\"line\">        m_FuncMap[\"SetChannelFav\"] = &amp;PrivateImpl::SetChannelFav;</div><div class=\"line\">        m_FuncMap[\"SetChannelSkip\"] = &amp;PrivateImpl::SetChannelSkip;</div><div class=\"line\">        m_FuncMap[\"SetChannelBlock\"] = &amp;PrivateImpl::SetChannelBlock;       </div><div class=\"line\">        m_FuncMap[\"SetChannelDel\"] = &amp;PrivateImpl::SetChannelDel;</div><div class=\"line\">        m_FuncMap[\"GetChannelFav\"] = &amp;PrivateImpl::GetChannelFav;</div><div class=\"line\">        m_FuncMap[\"GetChannelSkip\"] = &amp;PrivateImpl::GetChannelSkip;     </div><div class=\"line\">        m_FuncMap[\"GetChannelBlock\"] = &amp;PrivateImpl::GetChannelBlock;</div><div class=\"line\">        m_FuncMap[\"QueryTvStatus\"] = &amp;PrivateImpl::QueryTvStatus;</div><div class=\"line\">        m_FuncMap[\"StartRecordTs\"] = &amp;PrivateImpl::StartRecordTs;</div><div class=\"line\">        m_FuncMap[\"StopRecordTs\"] = &amp;PrivateImpl::StopRecordTs;</div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListCountByChIdx;   </div><div class=\"line\">#ifdef DVB_T                                </div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListByChIdx;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN</div><div class=\"line\">        m_FuncMap[\"StartDetection\"] = &amp;PrivateImpl::StartDetection; </div><div class=\"line\">        m_FuncMap[\"StopDetection\"] = &amp;PrivateImpl::StopDetection;   </div><div class=\"line\">#endif</div><div class=\"line\">#ifdef QAM_MODE_SETTING</div><div class=\"line\">        m_FuncMap[\"GetTvQamConst\"] = &amp;PrivateImpl::GetTvQamConst;</div><div class=\"line\">        m_FuncMap[\"SetTvQamConst\"] = &amp;PrivateImpl::SetTvQamConst;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef SYMBOL_RATE_SETTING_BY_VAL</div><div class=\"line\">        m_FuncMap[\"GetTvSymbolRateValue\"] = &amp;PrivateImpl::GetTvSymbolRateValue;</div><div class=\"line\">        m_FuncMap[\"SetTvSymbolRateValue\"] = &amp;PrivateImpl::SetTvSymbolRateValue;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"SetSubtitleEnable\"] = &amp;PrivateImpl::SetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"GetSubtitleEnable\"] = &amp;PrivateImpl::GetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &amp;PrivateImpl::SetDtvSubtitleByIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &amp;PrivateImpl::GetDtvSubtitleIndexList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &amp;PrivateImpl::GetCurDtvSubtitleIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCount;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCountByCategory;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioType\"] = &amp;PrivateImpl::SetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioType\"] = &amp;PrivateImpl::GetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::SetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::GetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::SetDTVAudioSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::GetDTVAudioSecondaryLang;</div><div class=\"line\">#ifdef ENABLE_NEW_DVB_2</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleType\"] = &amp;PrivateImpl::SetDTVSubtitleType;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleType\"] = &amp;PrivateImpl::GetDTVSubtitleType;</div><div class=\"line\">#endif</div><div class=\"line\">#if defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::SetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::GetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::SetDTVSubtitleSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::GetDTVSubtitleSecondaryLang;</div><div class=\"line\">#endif //defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetATVTableScan\"] = &amp;PrivateImpl::SetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetATVTableScan\"] = &amp;PrivateImpl::GetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetIsNoSignal\"] = &amp;PrivateImpl::GetIsNoSignal;</div><div class=\"line\">        m_FuncMap[\"GetEpgData\"] = &amp;PrivateImpl::GetEpgData;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataByLCN\"] = &amp;PrivateImpl::GetEpgDataByLCN;</div><div class=\"line\">        m_FuncMap[\"GetEpgListEpgCount\"] = &amp;PrivateImpl::GetEpgListEpgCount; </div><div class=\"line\">        m_FuncMap[\"GetAllLCNByCurFreq\"] = &amp;PrivateImpl::GetAllLCNByCurFreq;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataList\"] = &amp;PrivateImpl::GetEpgDataList;</div><div class=\"line\">        m_FuncMap[\"SetTVStopMode\"] = &amp;PrivateImpl::SetTVStopMode;</div><div class=\"line\">        m_FuncMap[\"GetTVStopMode\"] = &amp;PrivateImpl::GetTVStopMode;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><h3 id=\"传输数据的序列-流化\"><a href=\"#传输数据的序列-流化\" class=\"headerlink\" title=\"传输数据的序列/流化\"></a>传输数据的序列/流化</h3></li>\n</ul>\n<p>　　类<code>RpcCommandMuxer</code>和类<code>RpcCommandDemuxer</code>是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。<br>　　<br>　　类<code>IpcStreamerPipeImpl</code>是用于数据的流化处理。</p>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>参见 <strong><code>RpcTestJni.cpp</code></strong> 源文件。</p>\n<hr>\n","excerpt":"<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ol>\n<li><p>RPC 客户端基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC类的实体。每个实体代表一个函数调用。其成员<code>m_StrFuncName</code>是原始调用函数的函数名。<code>m_CallCtxMap</code>为其map组合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcClient::CallContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC回调类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p>数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给<code>IpcStreamer</code>传输。参见<code>RpcCommandType</code>结构体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandMuxer* m_pCmdMuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandDemuxer* m_pCmdDemuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给<code>RpcCommandMuxer</code>及<code>RpcCommandDemuxer</code>序列化/反序列化数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> rtk::ipc::IpcStreamer* m_pStreamer</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback的map集合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CallbackMap m_CallbackMap</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback类。继承实现了一个<code>CommandProcessor</code>。其实类为<code>CallbackContext</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler* m_pCallbackHandler</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中<code>struct CallbackContext</code>结构即为当前的<code>class CommandProcessor</code>实类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CommandQueue&lt;CallbackContext&gt; m_CallbackCmdQue</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数序列化的数据流结构体。其中<code>pData</code>指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过<code>RpcCommandDemuxer</code>反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> CallbackContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC客户端实例。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient&amp; m_RpcClient</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"类体\"><a href=\"#类体\" class=\"headerlink\" title=\"类体\"></a>类体</h2><ol>\n<li><p>指令流头部数据结构体。内结构顺序为：<br><code>RpcCommandHeader</code>+<code>RpcParamHeader1</code>+<code>data1</code>+<code>...</code>+<code>RpcParamHeaderN</code>+<code>dataN</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcCommandHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcCommandType; <span class=\"comment\">//RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iId; <span class=\"comment\">//唯一ID，用于指示哪个命令。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iTotalLen; <span class=\"comment\">//序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iParamCounts; <span class=\"comment\">//数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流单元结构体。函数名及参数均用此结构体序列化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcParamHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamType; <span class=\"comment\">//RPC单元数据类型。参见 enum RpcParamType枚举类型。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamLen; <span class=\"comment\">//RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RpcServer接口虚基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">virtual</span> ~IpcServer() &#123; ; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServer</code>，RpcServer基础实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerBase: <span class=\"keyword\">public</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">// 接口定义在IpcServer类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerBase();</div><div class=\"line\">    ~IpcServerBase();</div><div class=\"line\">    IpcServerBase (<span class=\"keyword\">const</span> IpcServerBase &amp;) &#123;&#125;</div><div class=\"line\">    IpcServerBase &amp;<span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> IpcServerBase&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// Used to notify observers</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyOpened</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">NotifyAccepted</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyClosed</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServerBase</code>，FIFO类型RpcServer主实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerPipeImpl: <span class=\"keyword\">public</span> IpcServerBase</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerPipeImpl();</div><div class=\"line\">    ~IpcServerPipeImpl();</div><div class=\"line\">    IpcServerPipeImpl(<span class=\"keyword\">const</span> IpcServerPipeImpl &amp;param) &#123;&#125;</div><div class=\"line\">    IpcServerPipeImpl &amp;<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> IpcServerPipeImpl&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//接口定义在 IpcServerBase 类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>IPC服务器端接口类。管理 RpcServer集合等map。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        TIME_OUT_INFINITY = <span class=\"number\">-1</span> <span class=\"comment\">//Time out infinity</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> IpcServerManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">int</span> iIpcImplMode, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAllServers</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WaitForAllServerStop</span><span class=\"params\">(<span class=\"keyword\">int</span> iTimeout)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    IpcServerManager();</div><div class=\"line\">    IpcServerManager(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    IpcServerManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    ~IpcServerManager();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC服务端接口类。实际调用IpcServerManager类方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    RpcServer();</div><div class=\"line\">    ~RpcServer();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcServer(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">    RpcServer &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC调用执行管理类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcExecutorManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> ErrCode</div><div class=\"line\">    &#123;</div><div class=\"line\">        ERR_FAILED = <span class=\"number\">-1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> RpcExecutorManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnregisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Execute</span><span class=\"params\">(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  <span class=\"keyword\">char</span>* pBuffer, <span class=\"keyword\">int</span> iBufSize)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcExecutorManager();</div><div class=\"line\">    ~RpcExecutorManager();</div><div class=\"line\">    RpcExecutorManager(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">    RpcExecutorManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"原理及过程分析\"><a href=\"#原理及过程分析\" class=\"headerlink\" title=\"原理及过程分析\"></a>原理及过程分析</h2><ul>\n<li><h3 id=\"RPC机制原理\"><a href=\"#RPC机制原理\" class=\"headerlink\" title=\"RPC机制原理\"></a>RPC机制原理</h3></li>\n</ul>\n<p>　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。<br>　　<br>　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的<code>IpcPipeImplHeader</code>数据，并根据<code>IpcPipeImplHeader</code>数据中的参数<code>iID</code>来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。<br>　　<br>　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的<code>iID</code>，此参数<code>iID</code>保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在<code>IpcPipeImplHeader</code>结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。<br>　　<br>　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入<code>IpcPipeImplHeader</code>数据来实现沟通。</p>\n<ul>\n<li><h3 id=\"RpcServer启动过程\"><a href=\"#RpcServer启动过程\" class=\"headerlink\" title=\"RpcServer启动过程\"></a>RpcServer启动过程</h3></li>\n</ul>\n<p>　　构造RpcServer时，通过调用<code>IpcServerManager</code>接口类初始化来创建实例，并<code>StartServer</code>。而在<code>StartServer</code>方法中调用了<code>IpcServerPipeImpl</code>类构造函数来实例化 <strong>IPC_PIPE</strong> 型RpcServer对象，并<code>Start</code>服务。<code>IpcServerPipeImpl</code>接口类继承自<code>IpcServerBase</code>接口类，<code>Start</code>方法在<code>IpcServerBase</code>接口类中，而<code>Start</code>方法又通过虚接口调用了子类<code>IpcServerPipeImpl</code>类中的<code>DoStart</code>方法来创建FIFO，然后调用<code>IpcServerBase</code>接口类中的<code>StartAccetpClient</code>方法来启动接收RpcClient数据的服务。<code>IpcServerBase</code>接口类中的<code>PrivateImpl</code>成员类是继承自<code>CommandProcessor</code>类的对象，用于开始接收并通知streamer的接收数据。在<code>StartAccetpClient</code>方法中创建了一个<code>CommandQueue</code>类，通过调用此类的<code>AddCommand</code>方法并用 <strong>ACCEPT_COMMAND</strong> 参数（此参数目前不起任何作用）来创建一个等待指令的线程<code>Policy1Proc</code>。如果监测到有事件发生，此线程调用<code>IpcServerBase::PrivateImpl</code>这个 <code>CommandProcessor</code>对象中的<code>Execute</code>方法来执行。而<code>Execute</code>方法里又调用了<code>IpcServerPipeImpl</code>接口类中的<code>DoAccept</code>方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输<code>IpcPipeImplHeader</code>结构的数据。<br>　　<br>　　RpcServer接收到<code>IpcPipeImplHeader</code>结构的数据后，调用<code>CreateStreamerByCommand</code>方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并放到streamer类map中存储。其中，因为接收到的数据中有<code>iID</code>这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。</p>\n<ul>\n<li><h3 id=\"RpcClient启动过程\"><a href=\"#RpcClient启动过程\" class=\"headerlink\" title=\"RpcClient启动过程\"></a>RpcClient启动过程</h3></li>\n</ul>\n<p>　　与RpcServer类似，不赘述。</p>\n<ul>\n<li><h3 id=\"RpcClient与RpcServer交互过程\"><a href=\"#RpcClient与RpcServer交互过程\" class=\"headerlink\" title=\"RpcClient与RpcServer交互过程\"></a>RpcClient与RpcServer交互过程</h3></li>\n</ul>\n<p>　　RpcServer先启动，创建好监听RpcClient的FIFO。<br>　　<br>　　调用<code>IpcClientFactory</code>类创建实例对像，实际调用<code>IpcClientPipeImpl</code>类来构造RpcClient。并加入到<code>ClientList</code>vctor容器中。<br>　　<br>　　RpcClient构造后开始连接RpcServer(<code>IpcClientPipeImpl::Connect</code>)。先<code>open</code>打开RpcServer创建好的FIFO，并向FIFO<code>write</code>一个<code>IpcPipeImplHeader</code>结构体的数据后关闭FIFO。然后调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并<code>open</code>打开(<code>IpcStreamerPipeImpl::DoOpen</code>)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。</p>\n<ul>\n<li><h3 id=\"INVOKE远程调用执行过程\"><a href=\"#INVOKE远程调用执行过程\" class=\"headerlink\" title=\"INVOKE远程调用执行过程\"></a>INVOKE远程调用执行过程</h3></li>\n</ul>\n<p>　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序<code>push</code>，最后<code>push</code>函数名，最后<code>finish</code>。然后调用<code>RpcCommandMuxer</code>类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用<code>RpcCommandDemuxer</code>类反序列化数据。并调用<code>RpcExecutorManager</code>类里的方法来执行相关动作。<br>　　<br>　　其中<code>RpcExecutorManager</code>是一个专用于管理<code>RpcExecutor</code>类对象的管理器。同样的还有<code>IpcServerManager</code>。<br>　　<br>　　而<code>RpcExecutor</code>是真正执行函数调用的类。它被用于模块初始化时调用，通过<code>RegisterExecutor</code>/<code>UnregisterExecutor</code>方法注册/反注册到<code>RpcExecutorManager</code>类中的list中。它的<code>Execute</code>方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以<code>RpcCommandMuxer</code>类表示的数据。<br>　　　　<br>　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用<code>RpcCommandMuxer</code>序列化数据时，头部<code>RpcCommandHeader</code>结构体数据里面填充的<code>iRpcCommandType</code>参数数据不同。<br>　　<br>　　TvService模块初始化时调用<code>RpcExecutor</code>类来注册供RpcClient远程调用invoke的native函数集合，其成员<code>m_FuncMap</code>是一个<code>RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);</code>类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成<code>RpcCommandMuxer</code>流数据返回。\n　　</p>\n<blockquote>\n<p><strong>例如:</strong> <code>TvChannelApiExecutor</code>类。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">class PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),</div><div class=\"line\">                   m_bFirstPlay(false)</div><div class=\"line\">    &#123;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStart\"] = &amp;PrivateImpl::TvAutoScanStart;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStop\"] = &amp;PrivateImpl::TvAutoScanStop;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanComplete\"] = &amp;PrivateImpl::TvAutoScanComplete; </div><div class=\"line\">        m_FuncMap[\"TvAutoScanStartWithRange\"] = &amp;PrivateImpl::TvAutoScanStartWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStopWithRange\"] = &amp;PrivateImpl::TvAutoScanStopWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &amp;PrivateImpl::TvAutoScanCompleteWithRange;  </div><div class=\"line\">        m_FuncMap[\"TvSeekScanStart\"] = &amp;PrivateImpl::TvSeekScanStart;</div><div class=\"line\">        m_FuncMap[\"TvSeekScanStop\"] = &amp;PrivateImpl::TvSeekScanStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStart\"] = &amp;PrivateImpl::TvScanManualStart;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStop\"] = &amp;PrivateImpl::TvScanManualStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualComplete\"] = &amp;PrivateImpl::TvScanManualComplete;</div><div class=\"line\">        m_FuncMap[\"TvScanInfo\"] = &amp;PrivateImpl::TvScanInfo;</div><div class=\"line\">        m_FuncMap[\"IsTvScanning\"] = &amp;PrivateImpl::IsTvScanning;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &amp;PrivateImpl::GetAtvSeqScanStartFreq;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &amp;PrivateImpl::GetAtvSeqScanEndFreq;</div><div class=\"line\">        m_FuncMap[\"SetDtvScanType\"] = &amp;PrivateImpl::SetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"GetDtvScanType\"] = &amp;PrivateImpl::GetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"PlayNextChannel\"] = &amp;PrivateImpl::PlayNextChannel;</div><div class=\"line\">        m_FuncMap[\"PlayPrevChannel\"] = &amp;PrivateImpl::PlayPrevChannel;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannel\"] = &amp;PrivateImpl::PlayFirstChannel;</div><div class=\"line\">        m_FuncMap[\"PlayHistoryChannel\"] = &amp;PrivateImpl::PlayHistoryChannel;</div><div class=\"line\">        m_FuncMap[\"DumpTvChannelList\"] = &amp;PrivateImpl::DumpTvChannelList;</div><div class=\"line\">        m_FuncMap[\"SetDefaultFilter\"] = &amp;PrivateImpl::SetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetDefaultFilter\"] = &amp;PrivateImpl::GetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetCurChannel\"] = &amp;PrivateImpl::GetCurChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelInfoByIndex\"] = &amp;PrivateImpl::GetChannelInfoByIndex;</div><div class=\"line\">        m_FuncMap[\"GetChInfoArray\"] = &amp;PrivateImpl::GetChInfoArray;</div><div class=\"line\">        m_FuncMap[\"GetChannelBandwidth\"] = &amp;PrivateImpl::GetChannelBandwidth;</div><div class=\"line\">        m_FuncMap[\"GetChannelName\"] = &amp;PrivateImpl::GetChannelName;</div><div class=\"line\">        m_FuncMap[\"GetChannelCount\"] = &amp;PrivateImpl::GetChannelCount;</div><div class=\"line\">        m_FuncMap[\"SortChannel\"] = &amp;PrivateImpl::SortChannel;</div><div class=\"line\">        m_FuncMap[\"SaveChannel\"] = &amp;PrivateImpl::SaveChannel;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByIndex\"] = &amp;PrivateImpl::PlayChannelByIndex;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByNum\"] = &amp;PrivateImpl::PlayChannelByNum;</div><div class=\"line\">        m_FuncMap[\"PlayChannel\"] = &amp;PrivateImpl::PlayChannel;       </div><div class=\"line\">        m_FuncMap[\"PlayChannelByLCN\"] = &amp;PrivateImpl::PlayChannelByLCN;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannelInFreq\"] = &amp;PrivateImpl::PlayFirstChannelInFreq;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByChnumFreq\"] = &amp;PrivateImpl::PlayChannelByChnumFreq;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByIdxEx\"] = &amp;PrivateImpl::SwapChannelByIdxEx;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByNumEx\"] = &amp;PrivateImpl::SwapChannelByNumEx;</div><div class=\"line\">        m_FuncMap[\"ReloadLastPlayedSource\"] = &amp;PrivateImpl::ReloadLastPlayedSource;</div><div class=\"line\">        m_FuncMap[\"SetCurChannelSkipped\"] = &amp;PrivateImpl::SetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"SetCurAtvSoundStd\"] = &amp;PrivateImpl::SetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"FineTuneCurFrequency\"] = &amp;PrivateImpl::FineTuneCurFrequency;</div><div class=\"line\">        m_FuncMap[\"SetCurChAudioCompensation\"] = &amp;PrivateImpl::SetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"SetSource\"] = &amp;PrivateImpl::SetSource;</div><div class=\"line\">        m_FuncMap[\"SetBootSource\"] = &amp;PrivateImpl::SetBootSource;</div><div class=\"line\">        m_FuncMap[\"GetCurChannelSkipped\"] = &amp;PrivateImpl::GetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundStd\"] = &amp;PrivateImpl::GetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"GetCurChAudioCompensation\"] = &amp;PrivateImpl::GetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"GetSourceList\"] = &amp;PrivateImpl::GetSourceList;</div><div class=\"line\">        m_FuncMap[\"GetSourceListCnt\"] = &amp;PrivateImpl::GetSourceListCnt;</div><div class=\"line\">        m_FuncMap[\"GetCurSourceType\"] = &amp;PrivateImpl::GetCurSourceType;</div><div class=\"line\">        m_FuncMap[\"GetBootSource\"] = &amp;PrivateImpl::GetBootSource;</div><div class=\"line\">#if defined (TVSERVER_IDTV)</div><div class=\"line\">        m_FuncMap[\"GetIDTVSubSource\"] = &amp;PrivateImpl::GetIDTVSubSource;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"GetCurTvType\"] = &amp;PrivateImpl::GetCurTvType; </div><div class=\"line\">        m_FuncMap[\"GetChannelNameList\"] = &amp;PrivateImpl::GetChannelNameList;    </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramInfo\"] = &amp;PrivateImpl::GetCurrentProgramInfo;                   </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramDescription\"] = &amp;PrivateImpl::GetCurrentProgramDescription;                         </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramRating\"] = &amp;PrivateImpl::GetCurrentProgramRating;   </div><div class=\"line\">        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &amp;PrivateImpl::HasCurrentProgramWithSubtitle;           </div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelect\"] = &amp;PrivateImpl::GetCurAtvSoundSelect;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvAudioPID\"]=&amp;PrivateImpl::GetCurDtvAudioPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvVideoPID\"]=&amp;PrivateImpl::GetCurDtvVideoPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvTSID\"]=&amp;PrivateImpl::GetCurDtvTSID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvServiceID\"]=&amp;PrivateImpl::GetCurDtvServiceID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvPCR\"]=&amp;PrivateImpl::GetCurDtvPCR;</div><div class=\"line\">        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &amp;PrivateImpl::SetCurDtvSoundSelectByIndex;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&amp;PrivateImpl::GetCurDtvSoundSelectIndex;     </div><div class=\"line\">        m_FuncMap[\"GetCurrentAudioLang\"] = &amp;PrivateImpl::GetCurrentAudioLang;</div><div class=\"line\">        m_FuncMap[\"GetCurInputInfo\"] = &amp;PrivateImpl::GetCurInputInfo;</div><div class=\"line\">        m_FuncMap[\"GetCurrentSetting_tv\"] = &amp;PrivateImpl::GetCurrentSetting_tv;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqCount\"] = &amp;PrivateImpl::GetChannelFreqCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &amp;PrivateImpl::GetChannelFreqByTableIndex;   </div><div class=\"line\">        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &amp;PrivateImpl::GetChannelchannelNumByTableIndex;      </div><div class=\"line\">        m_FuncMap[\"GetChannelCountByFreq\"] = &amp;PrivateImpl::GetChannelCountByFreq;     </div><div class=\"line\">        m_FuncMap[\"GetCurChannelIndex\"] = &amp;PrivateImpl::GetCurChannelIndex;</div><div class=\"line\">        m_FuncMap[\"PlayNumberChannel\"] = &amp;PrivateImpl::PlayNumberChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelListChannelCount\"] = &amp;PrivateImpl::GetChannelListChannelCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelDataList\"] = &amp;PrivateImpl::GetChannelDataList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &amp;PrivateImpl::GetCurDtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurDtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &amp;PrivateImpl::GetCurAtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurAtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"SetCaptionMode\"] = &amp;PrivateImpl::SetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"GetCaptionMode\"] = &amp;PrivateImpl::GetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"SetAnalogCaption\"] = &amp;PrivateImpl::SetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"GetAnalogCaption\"] = &amp;PrivateImpl::GetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"SetDigitalCaption\"] = &amp;PrivateImpl::SetDigitalCaption;</div><div class=\"line\">        m_FuncMap[\"SetChannelFav\"] = &amp;PrivateImpl::SetChannelFav;</div><div class=\"line\">        m_FuncMap[\"SetChannelSkip\"] = &amp;PrivateImpl::SetChannelSkip;</div><div class=\"line\">        m_FuncMap[\"SetChannelBlock\"] = &amp;PrivateImpl::SetChannelBlock;       </div><div class=\"line\">        m_FuncMap[\"SetChannelDel\"] = &amp;PrivateImpl::SetChannelDel;</div><div class=\"line\">        m_FuncMap[\"GetChannelFav\"] = &amp;PrivateImpl::GetChannelFav;</div><div class=\"line\">        m_FuncMap[\"GetChannelSkip\"] = &amp;PrivateImpl::GetChannelSkip;     </div><div class=\"line\">        m_FuncMap[\"GetChannelBlock\"] = &amp;PrivateImpl::GetChannelBlock;</div><div class=\"line\">        m_FuncMap[\"QueryTvStatus\"] = &amp;PrivateImpl::QueryTvStatus;</div><div class=\"line\">        m_FuncMap[\"StartRecordTs\"] = &amp;PrivateImpl::StartRecordTs;</div><div class=\"line\">        m_FuncMap[\"StopRecordTs\"] = &amp;PrivateImpl::StopRecordTs;</div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListCountByChIdx;   </div><div class=\"line\">#ifdef DVB_T                                </div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListByChIdx;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN</div><div class=\"line\">        m_FuncMap[\"StartDetection\"] = &amp;PrivateImpl::StartDetection; </div><div class=\"line\">        m_FuncMap[\"StopDetection\"] = &amp;PrivateImpl::StopDetection;   </div><div class=\"line\">#endif</div><div class=\"line\">#ifdef QAM_MODE_SETTING</div><div class=\"line\">        m_FuncMap[\"GetTvQamConst\"] = &amp;PrivateImpl::GetTvQamConst;</div><div class=\"line\">        m_FuncMap[\"SetTvQamConst\"] = &amp;PrivateImpl::SetTvQamConst;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef SYMBOL_RATE_SETTING_BY_VAL</div><div class=\"line\">        m_FuncMap[\"GetTvSymbolRateValue\"] = &amp;PrivateImpl::GetTvSymbolRateValue;</div><div class=\"line\">        m_FuncMap[\"SetTvSymbolRateValue\"] = &amp;PrivateImpl::SetTvSymbolRateValue;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"SetSubtitleEnable\"] = &amp;PrivateImpl::SetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"GetSubtitleEnable\"] = &amp;PrivateImpl::GetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &amp;PrivateImpl::SetDtvSubtitleByIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &amp;PrivateImpl::GetDtvSubtitleIndexList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &amp;PrivateImpl::GetCurDtvSubtitleIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCount;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCountByCategory;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioType\"] = &amp;PrivateImpl::SetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioType\"] = &amp;PrivateImpl::GetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::SetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::GetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::SetDTVAudioSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::GetDTVAudioSecondaryLang;</div><div class=\"line\">#ifdef ENABLE_NEW_DVB_2</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleType\"] = &amp;PrivateImpl::SetDTVSubtitleType;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleType\"] = &amp;PrivateImpl::GetDTVSubtitleType;</div><div class=\"line\">#endif</div><div class=\"line\">#if defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::SetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::GetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::SetDTVSubtitleSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::GetDTVSubtitleSecondaryLang;</div><div class=\"line\">#endif //defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetATVTableScan\"] = &amp;PrivateImpl::SetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetATVTableScan\"] = &amp;PrivateImpl::GetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetIsNoSignal\"] = &amp;PrivateImpl::GetIsNoSignal;</div><div class=\"line\">        m_FuncMap[\"GetEpgData\"] = &amp;PrivateImpl::GetEpgData;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataByLCN\"] = &amp;PrivateImpl::GetEpgDataByLCN;</div><div class=\"line\">        m_FuncMap[\"GetEpgListEpgCount\"] = &amp;PrivateImpl::GetEpgListEpgCount; </div><div class=\"line\">        m_FuncMap[\"GetAllLCNByCurFreq\"] = &amp;PrivateImpl::GetAllLCNByCurFreq;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataList\"] = &amp;PrivateImpl::GetEpgDataList;</div><div class=\"line\">        m_FuncMap[\"SetTVStopMode\"] = &amp;PrivateImpl::SetTVStopMode;</div><div class=\"line\">        m_FuncMap[\"GetTVStopMode\"] = &amp;PrivateImpl::GetTVStopMode;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><h3 id=\"传输数据的序列-流化\"><a href=\"#传输数据的序列-流化\" class=\"headerlink\" title=\"传输数据的序列/流化\"></a>传输数据的序列/流化</h3></li>\n</ul>\n<p>　　类<code>RpcCommandMuxer</code>和类<code>RpcCommandDemuxer</code>是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。<br>　　<br>　　类<code>IpcStreamerPipeImpl</code>是用于数据的流化处理。</p>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>参见 <strong><code>RpcTestJni.cpp</code></strong> 源文件。</p>\n<hr>"},{"title":"shadowsock+proxifier","date":"2016-09-08T06:33:49.000Z","_content":"[shadowsocks](https://github.com/shadowsocks)这个科学上网神器不用多说，这个小飞机图标，程序员都应该知道吧？（不知道你还好意思写代码？）\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m7ip2iw1j205k05kmx8.jpg)\n但是这家伙只能代理浏览器，并不能代理本地应用。比如你要下个Android Studio的sdk，那就呵呵了。所以，这个时候就需要系统全局性cross the wall。\n怎么办？这时候就要另外一个老家伙神器[proxifier](https://www.proxifier.com/)了。\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7l4aefdj207306bjrx.jpg)\n> 这家伙好老了，记得2003年还在用SIEMENS C55手机加上移动wap无限流量卡出差报连接GPRS拔号上网时，就用到了它来做代理。基本原理就是通过把http请求转发代理到中国移动的10.0.0.172的80端口去，以实现所有的连接都是通过移动的wap网（这货绝对是时代的怪胎）上去。这个移动wap无限流量的手机卡我至今仍然在当主力号码用，伴我度过青春年代的SIEMENS虽然没了，那个C55,还有后来的M65,S65都仍然还在抽屉的角落里躺着。。。\n到了现在这个4G的时代，不得不再次祭出proxifier这个神器，全然因为GFW的存在。不知道GFW在多年之后会不会成为像wap/tdscdma之类的技术怪胎一样“流芳万世”。\n\n<!-- more -->\n\n下载proxifier，地址[*来自汉化新世纪*](http://www.hanzify.org/software/13717.html)。\n## 添加代理地址\n打开proxifier程序，选择菜单栏的`配置文件`->`代理服务器`，添加一个新的代理：\n+ 地址：127.0.0.1 (shadowsocks应用的地址)\n+ 端口：1080 (shadowsocks应用的本地端口)\n+ 类型：socks5\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f7m7ej013bj20cb071wf6.jpg)\n\n## 添加代理规则\n选择菜单栏的`配置文件`->`代理规则`来设置自己想要走代理的应用程序。如图所示，添加了一个代理\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m7saephgj20db0dljsk.jpg)\n最后代理规则可能如下图\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7ppusejj20jy047gme.jpg)\n\n## 设置DNS\n这个时候其实就可以让代理规则中的应用走shadowsocks代理了。但是GFW内可是有很严重的DNS污染的。所以我们还要把DNS设置一下，以防止被各种污染劫持。\n选择菜单栏的`配置文件`->`名称解析`，选择`通过代理解析主机名称`项\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7vfvsu2j20az0c5jse.jpg)\n\n这时候就OK了，其它的功能项可以等用得着的时候再google一下吧。\n\n\n## 参考文献 \n[使用Proxifier把shadowsocks代理转为真·全局](http://www.dou-bi.com/ss-jc7/)\n","source":"_posts/shadowsock-proxifier.md","raw":"---\ntitle: shadowsock+proxifier\ndate: 2016-09-08 14:33:49\ncategories:\n - life\ntags:\n - vpn\n - shadowsocks\n---\n[shadowsocks](https://github.com/shadowsocks)这个科学上网神器不用多说，这个小飞机图标，程序员都应该知道吧？（不知道你还好意思写代码？）\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m7ip2iw1j205k05kmx8.jpg)\n但是这家伙只能代理浏览器，并不能代理本地应用。比如你要下个Android Studio的sdk，那就呵呵了。所以，这个时候就需要系统全局性cross the wall。\n怎么办？这时候就要另外一个老家伙神器[proxifier](https://www.proxifier.com/)了。\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7l4aefdj207306bjrx.jpg)\n> 这家伙好老了，记得2003年还在用SIEMENS C55手机加上移动wap无限流量卡出差报连接GPRS拔号上网时，就用到了它来做代理。基本原理就是通过把http请求转发代理到中国移动的10.0.0.172的80端口去，以实现所有的连接都是通过移动的wap网（这货绝对是时代的怪胎）上去。这个移动wap无限流量的手机卡我至今仍然在当主力号码用，伴我度过青春年代的SIEMENS虽然没了，那个C55,还有后来的M65,S65都仍然还在抽屉的角落里躺着。。。\n到了现在这个4G的时代，不得不再次祭出proxifier这个神器，全然因为GFW的存在。不知道GFW在多年之后会不会成为像wap/tdscdma之类的技术怪胎一样“流芳万世”。\n\n<!-- more -->\n\n下载proxifier，地址[*来自汉化新世纪*](http://www.hanzify.org/software/13717.html)。\n## 添加代理地址\n打开proxifier程序，选择菜单栏的`配置文件`->`代理服务器`，添加一个新的代理：\n+ 地址：127.0.0.1 (shadowsocks应用的地址)\n+ 端口：1080 (shadowsocks应用的本地端口)\n+ 类型：socks5\n![](http://ww4.sinaimg.cn/large/772d7a33gw1f7m7ej013bj20cb071wf6.jpg)\n\n## 添加代理规则\n选择菜单栏的`配置文件`->`代理规则`来设置自己想要走代理的应用程序。如图所示，添加了一个代理\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m7saephgj20db0dljsk.jpg)\n最后代理规则可能如下图\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7ppusejj20jy047gme.jpg)\n\n## 设置DNS\n这个时候其实就可以让代理规则中的应用走shadowsocks代理了。但是GFW内可是有很严重的DNS污染的。所以我们还要把DNS设置一下，以防止被各种污染劫持。\n选择菜单栏的`配置文件`->`名称解析`，选择`通过代理解析主机名称`项\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f7m7vfvsu2j20az0c5jse.jpg)\n\n这时候就OK了，其它的功能项可以等用得着的时候再google一下吧。\n\n\n## 参考文献 \n[使用Proxifier把shadowsocks代理转为真·全局](http://www.dou-bi.com/ss-jc7/)\n","slug":"shadowsock-proxifier","published":1,"updated":"2016-09-08T07:43:42.582Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z18x001vfgn9l5mzfvll","content":"<p><a href=\"https://github.com/shadowsocks\" target=\"_blank\" rel=\"external\">shadowsocks</a>这个科学上网神器不用多说，这个小飞机图标，程序员都应该知道吧？（不知道你还好意思写代码？）<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m7ip2iw1j205k05kmx8.jpg\" alt=\"\"><br>但是这家伙只能代理浏览器，并不能代理本地应用。比如你要下个Android Studio的sdk，那就呵呵了。所以，这个时候就需要系统全局性cross the wall。<br>怎么办？这时候就要另外一个老家伙神器<a href=\"https://www.proxifier.com/\" target=\"_blank\" rel=\"external\">proxifier</a>了。<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7l4aefdj207306bjrx.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这家伙好老了，记得2003年还在用SIEMENS C55手机加上移动wap无限流量卡出差报连接GPRS拔号上网时，就用到了它来做代理。基本原理就是通过把http请求转发代理到中国移动的10.0.0.172的80端口去，以实现所有的连接都是通过移动的wap网（这货绝对是时代的怪胎）上去。这个移动wap无限流量的手机卡我至今仍然在当主力号码用，伴我度过青春年代的SIEMENS虽然没了，那个C55,还有后来的M65,S65都仍然还在抽屉的角落里躺着。。。<br>到了现在这个4G的时代，不得不再次祭出proxifier这个神器，全然因为GFW的存在。不知道GFW在多年之后会不会成为像wap/tdscdma之类的技术怪胎一样“流芳万世”。</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>下载proxifier，地址<a href=\"http://www.hanzify.org/software/13717.html\" target=\"_blank\" rel=\"external\"><em>来自汉化新世纪</em></a>。</p>\n<h2 id=\"添加代理地址\"><a href=\"#添加代理地址\" class=\"headerlink\" title=\"添加代理地址\"></a>添加代理地址</h2><p>打开proxifier程序，选择菜单栏的<code>配置文件</code>-&gt;<code>代理服务器</code>，添加一个新的代理：</p>\n<ul>\n<li>地址：127.0.0.1 (shadowsocks应用的地址)</li>\n<li>端口：1080 (shadowsocks应用的本地端口)</li>\n<li>类型：socks5<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f7m7ej013bj20cb071wf6.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"添加代理规则\"><a href=\"#添加代理规则\" class=\"headerlink\" title=\"添加代理规则\"></a>添加代理规则</h2><p>选择菜单栏的<code>配置文件</code>-&gt;<code>代理规则</code>来设置自己想要走代理的应用程序。如图所示，添加了一个代理<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m7saephgj20db0dljsk.jpg\" alt=\"\"><br>最后代理规则可能如下图<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7ppusejj20jy047gme.jpg\" alt=\"\"></p>\n<h2 id=\"设置DNS\"><a href=\"#设置DNS\" class=\"headerlink\" title=\"设置DNS\"></a>设置DNS</h2><p>这个时候其实就可以让代理规则中的应用走shadowsocks代理了。但是GFW内可是有很严重的DNS污染的。所以我们还要把DNS设置一下，以防止被各种污染劫持。<br>选择菜单栏的<code>配置文件</code>-&gt;<code>名称解析</code>，选择<code>通过代理解析主机名称</code>项<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7vfvsu2j20az0c5jse.jpg\" alt=\"\"></p>\n<p>这时候就OK了，其它的功能项可以等用得着的时候再google一下吧。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.dou-bi.com/ss-jc7/\" target=\"_blank\" rel=\"external\">使用Proxifier把shadowsocks代理转为真·全局</a></p>\n","excerpt":"<p><a href=\"https://github.com/shadowsocks\">shadowsocks</a>这个科学上网神器不用多说，这个小飞机图标，程序员都应该知道吧？（不知道你还好意思写代码？）<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m7ip2iw1j205k05kmx8.jpg\" alt=\"\"><br>但是这家伙只能代理浏览器，并不能代理本地应用。比如你要下个Android Studio的sdk，那就呵呵了。所以，这个时候就需要系统全局性cross the wall。<br>怎么办？这时候就要另外一个老家伙神器<a href=\"https://www.proxifier.com/\">proxifier</a>了。<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7l4aefdj207306bjrx.jpg\" alt=\"\"></p>\n<blockquote>\n<p>这家伙好老了，记得2003年还在用SIEMENS C55手机加上移动wap无限流量卡出差报连接GPRS拔号上网时，就用到了它来做代理。基本原理就是通过把http请求转发代理到中国移动的10.0.0.172的80端口去，以实现所有的连接都是通过移动的wap网（这货绝对是时代的怪胎）上去。这个移动wap无限流量的手机卡我至今仍然在当主力号码用，伴我度过青春年代的SIEMENS虽然没了，那个C55,还有后来的M65,S65都仍然还在抽屉的角落里躺着。。。<br>到了现在这个4G的时代，不得不再次祭出proxifier这个神器，全然因为GFW的存在。不知道GFW在多年之后会不会成为像wap/tdscdma之类的技术怪胎一样“流芳万世”。</p>\n</blockquote>","more":"<p>下载proxifier，地址<a href=\"http://www.hanzify.org/software/13717.html\"><em>来自汉化新世纪</em></a>。</p>\n<h2 id=\"添加代理地址\"><a href=\"#添加代理地址\" class=\"headerlink\" title=\"添加代理地址\"></a>添加代理地址</h2><p>打开proxifier程序，选择菜单栏的<code>配置文件</code>-&gt;<code>代理服务器</code>，添加一个新的代理：</p>\n<ul>\n<li>地址：127.0.0.1 (shadowsocks应用的地址)</li>\n<li>端口：1080 (shadowsocks应用的本地端口)</li>\n<li>类型：socks5<br><img src=\"http://ww4.sinaimg.cn/large/772d7a33gw1f7m7ej013bj20cb071wf6.jpg\" alt=\"\"></li>\n</ul>\n<h2 id=\"添加代理规则\"><a href=\"#添加代理规则\" class=\"headerlink\" title=\"添加代理规则\"></a>添加代理规则</h2><p>选择菜单栏的<code>配置文件</code>-&gt;<code>代理规则</code>来设置自己想要走代理的应用程序。如图所示，添加了一个代理<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m7saephgj20db0dljsk.jpg\" alt=\"\"><br>最后代理规则可能如下图<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7ppusejj20jy047gme.jpg\" alt=\"\"></p>\n<h2 id=\"设置DNS\"><a href=\"#设置DNS\" class=\"headerlink\" title=\"设置DNS\"></a>设置DNS</h2><p>这个时候其实就可以让代理规则中的应用走shadowsocks代理了。但是GFW内可是有很严重的DNS污染的。所以我们还要把DNS设置一下，以防止被各种污染劫持。<br>选择菜单栏的<code>配置文件</code>-&gt;<code>名称解析</code>，选择<code>通过代理解析主机名称</code>项<br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f7m7vfvsu2j20az0c5jse.jpg\" alt=\"\"></p>\n<p>这时候就OK了，其它的功能项可以等用得着的时候再google一下吧。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p><a href=\"http://www.dou-bi.com/ss-jc7/\">使用Proxifier把shadowsocks代理转为真·全局</a></p>"},{"layout":"tv","title":"tv scan flow","date":"2016-07-22T05:58:45.000Z","_content":"翻出来以前随手写的一个文档，DTV搜索模块的简单抽象设计，原目的是为了设计一套中间层的，种种原因没能立项，这个半成品都不算的文档就丢尘埃里了。\n\n### 1. 流程\n分析频道搜索流程，大概分几个步骤。（以DTV为例）\n1. 获取频率表；\n2. 设置并锁定单个频率；\n3. 获取单个频率上的数据（DTV为SI/PSI）；\n4. 分析获取到的SI/PSI信息；\n5. 保存SI/PSI中的信息到每个单独的分类数据库中；\n6. 跳到第2步，循环，直至频率表中的频率全部扫完。\n\n<!-- more -->\n\n> `流程图如下：`\n\n```flow\nst=>start: 搜索开始\ne=>end: 搜索结束\nopGetFreqTable=>operation: 获取频率表\nopGetNextFreq=>operation: 获取下一个频率\nconGetFreqEnd=>condition: 频率表有数据？\nopSetFreq=>operation: 设置频率\nconLockTuner=>condition: 锁频成功？\nopGetTable=>operation: 获取SI/PSI\nconGetTable=>condition: 获取成功？\nopParseTable=>operation: 分析SI/PSI\nconPareTable=>condition: 分析成功？\nopSaveData=>operation: 存储channel数据\n\nst->opGetFreqTable->conGetFreqEnd->\nconGetFreqEnd(no)->e\nconGetFreqEnd(yes)->opGetNextFreq->opSetFreq->conLockTuner->\nconLockTuner(yes)->opGetTable->conGetTable->\nconLockTuner(no)->conGetFreqEnd->\nconGetTable(yes)->opParseTable->conPareTable->\nconGetTable(no)->conGetFreqEnd->\nconPareTable(yes)->opSaveData(left)->conGetFreqEnd->\nconPareTable(no)->conGetFreqEnd->\n```\n\n\n### 2. 抽象 \n\n电视信号根据信号传输类型分类，有DTV和ATV；而其中DTV又可分为DVB/ATSC/ISDB等；而其中DVB根据协议不同传输标准又可分为常见的DVBC/DVBT/DVBS/DVBH以及国内的变种DTMB/CMMB等。\n电视信号在搜索频道时，由Tuner/Demod/Demux等几个模块组合完成，但是所有的都可以抽象出几个通用的动作。例如设置频率参数，搜索方式等。其中：\n\n* 与FE物理硬件相关的动作和数据可以抽象出`class IFrontEnd`，包含Tuner和Demod的相关方法；\n* 与频率相关的动作和数据可以抽象出`class IFreqTable`，包含频率表相关的方法与数据；\n* 与Demux和Filter相关的动作和数据可以抽象出`class iDemux`，包含TSD/Demux/Filter的相关方法和数据；\n* 与用户逻辑直接关联的动作可以抽象出`class IChannelScan`，包含搜索操作相关的方法。\n* 搜索模块的输出数据可以抽象出`class IChannelData`，包含与频道数据相关的方法及数据。\n\n> `class IFrontEnd` Tuner/Demod相关\n\n```cpp\nclass IFrontEnd:\n{\n    virtual int tv_frontEnd_init(unsigned char u8TunerId) = 0; //init\n    virtual int tv_frontEnd_deInit(unsigned char u8TunerId) = 0; // deinit\n    virtual int tv_frontEnd_setBandwidth(unsigned char u8TunerId, unsigned int u32Bandwidth) = 0; //设置频率带宽\n    virtual int tv_frontEnd_setFreq(unsigned char u8TunerId, unsigned int u32freq) = 0; //设置主频率或者基础频率。\n    virtual int tv_frontEnd_setModulation(unsigned char u8TunerId, unsigned int u32Modulation) = 0; //设置调制方式。如DVBS的QPSK，DVBC的QAM，DVBT的COFDM等\n    virtual int tv_frontEnd_setSymbolrate(unsigned char u8TunerId, unsigned int u32SymbolRate) = 0; //设置符号率\n    virtual int tv_frontEnd_getLockStatus(unsigned char u8TunerId) = 0; //\n    virtual int tv_frontEnd_getSignalSNR(unsigned char u8TunerId) = 0; //Signal to Noise Ratio - which means signal quality\n    virtual int tv_frontEnd_getSignalBER(unsigned char u8TunerId) = 0; //Bit Error Rate - which shows the error rate of the signal\n    virtual int tv_frontEnd_getSignalAGC(unsigned char u8TunerId) = 0; // Automatic Gain Control - which means signal strength\n}\n```\n\n>  `class IFreqTable` 频率表相关\n\n```cpp\nclass IFreqTable:\n{\npublic:\n    virtual int tv_freqTable_set(char* pFilePath) = 0;\n    virtual int tv_freqTable_set(struct FreqNode* freqList) = 0;\n    virtual struct FreqNode* tv_freqTable_get(void) = 0;\n    virtual struct FreqNode* tv_freqTable_getFreq(unsigned int u32FreqIndex) = 0;\nprivate:\n    struct FreqNode* m_freqList;\n};\n\ntypedef struct FreqNode \n{\n    unsigned int u32Freq;\n    unsigned int u32Modulation;\n    unsigned int u32SymbolRate;\n    struct FreqNode* prev;\n    struct FreqNode* next;\n};\n```\n\n> `class IDemux` TSD/Demux/Filter相关\n\n```cpp\nclass IDemux:\n{\npublic:\n    tv_demux_init() = 0;\n    tv_demux_deInit() = 0;\n    tv_demux_open(unsigned char u8DemuxId) = 0;\n    tv_demux_close(unsigned char u8DemuxId) = 0;\n    tv_demux_parseSi(unsigned char* siBuffer) = 0;\n    tv_demux_parsePsi(unsigned char* psiBuffer) = 0;\n    //TODO:\nprivate:\n    //TODO:\n}\n```\n\n> `class IChannelScan` 搜索逻辑相关\n\n搜索的动作，分为几种。\n\n```cpp\n//自动搜索: `\nint tv_channel_scan_auto(unsigned int u32StartFreq, unsigned int u32EndFreq); //full模式。根据频率带宽在全频率表范围内自动递增搜索。\nint tv_channel_scan_auto(unsigned int u32mainFreq); //quick模式。以中心主频率上的NIT表数据为准。\n\n//手动搜索：\nint tv_channel_scan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq); \nint tv_channel_scan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq, unsigned int u32Modulation, unsigned int u32SymbolRate);\n```\n\n抽象几种搜索方式，可以得到如下接口类：\n\n```cpp\nclass IChannelScan:\n{\npublic:\n    virtual int tv_channelScan(class FreqTable freqTable);\n    virtual int tv_channelScan_auto(unsigned int u32mainFreq) = 0;\n    virtual int tv_channelScan_auto(bool bNit) = 0;\n    virtual int tv_channelScan_auto(unsigned int u32StartFreq, unsigned int u32EndFreq) = 0;\n    virtual int tv_channelScan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq) = 0;\n    virtual int tv_channelScan_auto_stop() = 0;\n    virtual int tv_channelScan_auto_pause() = 0;\n    virtual int tv_channelScan_manual_stop() = 0;\n    virtual int tv_channelScan_complete() = 0;\nprivate:\n    class IFreqTable m_freqTable;\n};\n```\n\n> `class IChannelData` 频道数据相关\n\n```cpp\nclass IChannelData:\n{\npublic:\n    vritual int tv_ChannelData_saveData() = 0;\nprivate:\n    //TODO:\n}\n```\n\n\n### 3.  接口 \n抽象类的实际对象接口设计\n\n```cpp\nclass DtvChannelScan: public IChannelScan, public IFrontEnd, public IDemux, public IChannelScan, public IChannelData\n{\npublic:\n    int tv_channelScan(class FreqTable freqTable) {\n        assert(freqTable);\n        assert(tv_frontEnd_init());\n        \n        struct FreqNode* freqList = m_freqTable::tv_freqTable_get();\n        //TODO:\n        foreach freqList[] {\n            tv_frontEnd_setFreq(u8TunerIndex, u32Freq);\n            if (tv_frontEnd_getLockStatus(u8TunerIndex)) {\n                assert(tv_demux_init());\n                tv_demux_open();\n                tv_demux_SetFilter();\n                while(--timeout) {\n                    if (SI) {\n                        tv_demux_parseSi(SDT);\n                        tv_demux_parseSi(BAT);\n                        tv_demux_parseSi(EIT);\n                        tv_demux_parseSi(TDT);\n                        tv_demux_parseSi(TOT);\n                    }\n                    if (PSI) {\n                        tv_demux_parsePsi(NIT);\n                        tv_demux_parsePsi(PAT);\n                        tv_demux_parsePsi(PMT);\n                        tv_demux_parsePsi(CAT);\n                    }\n                    tv_ChannelData_saveData();\n                }\n            }\n        }\n    }\n    int tv_channelScan_auto(unsigned int u32mainFreq);\n    int tv_channelScan_manual();\nprivate:\n    class IFreqTable m_freqTable;\n\n};\n```\n\n### 4. TODO：\n","source":"_posts/tv-scan-flow.md","raw":"layout: tv\ntitle: tv scan flow\ndate: 2016-07-22 13:58:45\ncategories:\n - work\ntags:\n - DVB\n---\n翻出来以前随手写的一个文档，DTV搜索模块的简单抽象设计，原目的是为了设计一套中间层的，种种原因没能立项，这个半成品都不算的文档就丢尘埃里了。\n\n### 1. 流程\n分析频道搜索流程，大概分几个步骤。（以DTV为例）\n1. 获取频率表；\n2. 设置并锁定单个频率；\n3. 获取单个频率上的数据（DTV为SI/PSI）；\n4. 分析获取到的SI/PSI信息；\n5. 保存SI/PSI中的信息到每个单独的分类数据库中；\n6. 跳到第2步，循环，直至频率表中的频率全部扫完。\n\n<!-- more -->\n\n> `流程图如下：`\n\n```flow\nst=>start: 搜索开始\ne=>end: 搜索结束\nopGetFreqTable=>operation: 获取频率表\nopGetNextFreq=>operation: 获取下一个频率\nconGetFreqEnd=>condition: 频率表有数据？\nopSetFreq=>operation: 设置频率\nconLockTuner=>condition: 锁频成功？\nopGetTable=>operation: 获取SI/PSI\nconGetTable=>condition: 获取成功？\nopParseTable=>operation: 分析SI/PSI\nconPareTable=>condition: 分析成功？\nopSaveData=>operation: 存储channel数据\n\nst->opGetFreqTable->conGetFreqEnd->\nconGetFreqEnd(no)->e\nconGetFreqEnd(yes)->opGetNextFreq->opSetFreq->conLockTuner->\nconLockTuner(yes)->opGetTable->conGetTable->\nconLockTuner(no)->conGetFreqEnd->\nconGetTable(yes)->opParseTable->conPareTable->\nconGetTable(no)->conGetFreqEnd->\nconPareTable(yes)->opSaveData(left)->conGetFreqEnd->\nconPareTable(no)->conGetFreqEnd->\n```\n\n\n### 2. 抽象 \n\n电视信号根据信号传输类型分类，有DTV和ATV；而其中DTV又可分为DVB/ATSC/ISDB等；而其中DVB根据协议不同传输标准又可分为常见的DVBC/DVBT/DVBS/DVBH以及国内的变种DTMB/CMMB等。\n电视信号在搜索频道时，由Tuner/Demod/Demux等几个模块组合完成，但是所有的都可以抽象出几个通用的动作。例如设置频率参数，搜索方式等。其中：\n\n* 与FE物理硬件相关的动作和数据可以抽象出`class IFrontEnd`，包含Tuner和Demod的相关方法；\n* 与频率相关的动作和数据可以抽象出`class IFreqTable`，包含频率表相关的方法与数据；\n* 与Demux和Filter相关的动作和数据可以抽象出`class iDemux`，包含TSD/Demux/Filter的相关方法和数据；\n* 与用户逻辑直接关联的动作可以抽象出`class IChannelScan`，包含搜索操作相关的方法。\n* 搜索模块的输出数据可以抽象出`class IChannelData`，包含与频道数据相关的方法及数据。\n\n> `class IFrontEnd` Tuner/Demod相关\n\n```cpp\nclass IFrontEnd:\n{\n    virtual int tv_frontEnd_init(unsigned char u8TunerId) = 0; //init\n    virtual int tv_frontEnd_deInit(unsigned char u8TunerId) = 0; // deinit\n    virtual int tv_frontEnd_setBandwidth(unsigned char u8TunerId, unsigned int u32Bandwidth) = 0; //设置频率带宽\n    virtual int tv_frontEnd_setFreq(unsigned char u8TunerId, unsigned int u32freq) = 0; //设置主频率或者基础频率。\n    virtual int tv_frontEnd_setModulation(unsigned char u8TunerId, unsigned int u32Modulation) = 0; //设置调制方式。如DVBS的QPSK，DVBC的QAM，DVBT的COFDM等\n    virtual int tv_frontEnd_setSymbolrate(unsigned char u8TunerId, unsigned int u32SymbolRate) = 0; //设置符号率\n    virtual int tv_frontEnd_getLockStatus(unsigned char u8TunerId) = 0; //\n    virtual int tv_frontEnd_getSignalSNR(unsigned char u8TunerId) = 0; //Signal to Noise Ratio - which means signal quality\n    virtual int tv_frontEnd_getSignalBER(unsigned char u8TunerId) = 0; //Bit Error Rate - which shows the error rate of the signal\n    virtual int tv_frontEnd_getSignalAGC(unsigned char u8TunerId) = 0; // Automatic Gain Control - which means signal strength\n}\n```\n\n>  `class IFreqTable` 频率表相关\n\n```cpp\nclass IFreqTable:\n{\npublic:\n    virtual int tv_freqTable_set(char* pFilePath) = 0;\n    virtual int tv_freqTable_set(struct FreqNode* freqList) = 0;\n    virtual struct FreqNode* tv_freqTable_get(void) = 0;\n    virtual struct FreqNode* tv_freqTable_getFreq(unsigned int u32FreqIndex) = 0;\nprivate:\n    struct FreqNode* m_freqList;\n};\n\ntypedef struct FreqNode \n{\n    unsigned int u32Freq;\n    unsigned int u32Modulation;\n    unsigned int u32SymbolRate;\n    struct FreqNode* prev;\n    struct FreqNode* next;\n};\n```\n\n> `class IDemux` TSD/Demux/Filter相关\n\n```cpp\nclass IDemux:\n{\npublic:\n    tv_demux_init() = 0;\n    tv_demux_deInit() = 0;\n    tv_demux_open(unsigned char u8DemuxId) = 0;\n    tv_demux_close(unsigned char u8DemuxId) = 0;\n    tv_demux_parseSi(unsigned char* siBuffer) = 0;\n    tv_demux_parsePsi(unsigned char* psiBuffer) = 0;\n    //TODO:\nprivate:\n    //TODO:\n}\n```\n\n> `class IChannelScan` 搜索逻辑相关\n\n搜索的动作，分为几种。\n\n```cpp\n//自动搜索: `\nint tv_channel_scan_auto(unsigned int u32StartFreq, unsigned int u32EndFreq); //full模式。根据频率带宽在全频率表范围内自动递增搜索。\nint tv_channel_scan_auto(unsigned int u32mainFreq); //quick模式。以中心主频率上的NIT表数据为准。\n\n//手动搜索：\nint tv_channel_scan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq); \nint tv_channel_scan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq, unsigned int u32Modulation, unsigned int u32SymbolRate);\n```\n\n抽象几种搜索方式，可以得到如下接口类：\n\n```cpp\nclass IChannelScan:\n{\npublic:\n    virtual int tv_channelScan(class FreqTable freqTable);\n    virtual int tv_channelScan_auto(unsigned int u32mainFreq) = 0;\n    virtual int tv_channelScan_auto(bool bNit) = 0;\n    virtual int tv_channelScan_auto(unsigned int u32StartFreq, unsigned int u32EndFreq) = 0;\n    virtual int tv_channelScan_manual(unsigned int u32StartFreq, unsigned int u32EndFreq) = 0;\n    virtual int tv_channelScan_auto_stop() = 0;\n    virtual int tv_channelScan_auto_pause() = 0;\n    virtual int tv_channelScan_manual_stop() = 0;\n    virtual int tv_channelScan_complete() = 0;\nprivate:\n    class IFreqTable m_freqTable;\n};\n```\n\n> `class IChannelData` 频道数据相关\n\n```cpp\nclass IChannelData:\n{\npublic:\n    vritual int tv_ChannelData_saveData() = 0;\nprivate:\n    //TODO:\n}\n```\n\n\n### 3.  接口 \n抽象类的实际对象接口设计\n\n```cpp\nclass DtvChannelScan: public IChannelScan, public IFrontEnd, public IDemux, public IChannelScan, public IChannelData\n{\npublic:\n    int tv_channelScan(class FreqTable freqTable) {\n        assert(freqTable);\n        assert(tv_frontEnd_init());\n        \n        struct FreqNode* freqList = m_freqTable::tv_freqTable_get();\n        //TODO:\n        foreach freqList[] {\n            tv_frontEnd_setFreq(u8TunerIndex, u32Freq);\n            if (tv_frontEnd_getLockStatus(u8TunerIndex)) {\n                assert(tv_demux_init());\n                tv_demux_open();\n                tv_demux_SetFilter();\n                while(--timeout) {\n                    if (SI) {\n                        tv_demux_parseSi(SDT);\n                        tv_demux_parseSi(BAT);\n                        tv_demux_parseSi(EIT);\n                        tv_demux_parseSi(TDT);\n                        tv_demux_parseSi(TOT);\n                    }\n                    if (PSI) {\n                        tv_demux_parsePsi(NIT);\n                        tv_demux_parsePsi(PAT);\n                        tv_demux_parsePsi(PMT);\n                        tv_demux_parsePsi(CAT);\n                    }\n                    tv_ChannelData_saveData();\n                }\n            }\n        }\n    }\n    int tv_channelScan_auto(unsigned int u32mainFreq);\n    int tv_channelScan_manual();\nprivate:\n    class IFreqTable m_freqTable;\n\n};\n```\n\n### 4. TODO：\n","slug":"tv-scan-flow","published":1,"updated":"2016-09-06T08:44:45.040Z","comments":1,"photos":[],"link":"","_id":"cisv2z18z001yfgn9jxwpmd0k","content":"<p>翻出来以前随手写的一个文档，DTV搜索模块的简单抽象设计，原目的是为了设计一套中间层的，种种原因没能立项，这个半成品都不算的文档就丢尘埃里了。</p>\n<h3 id=\"1-流程\"><a href=\"#1-流程\" class=\"headerlink\" title=\"1. 流程\"></a>1. 流程</h3><p>分析频道搜索流程，大概分几个步骤。（以DTV为例）</p>\n<ol>\n<li>获取频率表；</li>\n<li>设置并锁定单个频率；</li>\n<li>获取单个频率上的数据（DTV为SI/PSI）；</li>\n<li>分析获取到的SI/PSI信息；</li>\n<li>保存SI/PSI中的信息到每个单独的分类数据库中；</li>\n<li>跳到第2步，循环，直至频率表中的频率全部扫完。</li>\n</ol>\n<a id=\"more\"></a>\n<blockquote>\n<p><code>流程图如下：</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 搜索开始</div><div class=\"line\">e=&gt;end: 搜索结束</div><div class=\"line\">opGetFreqTable=&gt;operation: 获取频率表</div><div class=\"line\">opGetNextFreq=&gt;operation: 获取下一个频率</div><div class=\"line\">conGetFreqEnd=&gt;condition: 频率表有数据？</div><div class=\"line\">opSetFreq=&gt;operation: 设置频率</div><div class=\"line\">conLockTuner=&gt;condition: 锁频成功？</div><div class=\"line\">opGetTable=&gt;operation: 获取SI/PSI</div><div class=\"line\">conGetTable=&gt;condition: 获取成功？</div><div class=\"line\">opParseTable=&gt;operation: 分析SI/PSI</div><div class=\"line\">conPareTable=&gt;condition: 分析成功？</div><div class=\"line\">opSaveData=&gt;operation: 存储channel数据</div><div class=\"line\"></div><div class=\"line\">st-&gt;opGetFreqTable-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conGetFreqEnd(no)-&gt;e</div><div class=\"line\">conGetFreqEnd(yes)-&gt;opGetNextFreq-&gt;opSetFreq-&gt;conLockTuner-&gt;</div><div class=\"line\">conLockTuner(yes)-&gt;opGetTable-&gt;conGetTable-&gt;</div><div class=\"line\">conLockTuner(no)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conGetTable(yes)-&gt;opParseTable-&gt;conPareTable-&gt;</div><div class=\"line\">conGetTable(no)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conPareTable(yes)-&gt;opSaveData(left)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conPareTable(no)-&gt;conGetFreqEnd-&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-抽象\"><a href=\"#2-抽象\" class=\"headerlink\" title=\"2. 抽象\"></a>2. 抽象</h3><p>电视信号根据信号传输类型分类，有DTV和ATV；而其中DTV又可分为DVB/ATSC/ISDB等；而其中DVB根据协议不同传输标准又可分为常见的DVBC/DVBT/DVBS/DVBH以及国内的变种DTMB/CMMB等。<br>电视信号在搜索频道时，由Tuner/Demod/Demux等几个模块组合完成，但是所有的都可以抽象出几个通用的动作。例如设置频率参数，搜索方式等。其中：</p>\n<ul>\n<li>与FE物理硬件相关的动作和数据可以抽象出<code>class IFrontEnd</code>，包含Tuner和Demod的相关方法；</li>\n<li>与频率相关的动作和数据可以抽象出<code>class IFreqTable</code>，包含频率表相关的方法与数据；</li>\n<li>与Demux和Filter相关的动作和数据可以抽象出<code>class iDemux</code>，包含TSD/Demux/Filter的相关方法和数据；</li>\n<li>与用户逻辑直接关联的动作可以抽象出<code>class IChannelScan</code>，包含搜索操作相关的方法。</li>\n<li>搜索模块的输出数据可以抽象出<code>class IChannelData</code>，包含与频道数据相关的方法及数据。</li>\n</ul>\n<blockquote>\n<p><code>class IFrontEnd</code> Tuner/Demod相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IFrontEnd:</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_init</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//init</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_deInit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">// deinit</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setBandwidth</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Bandwidth)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置频率带宽</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setFreq</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32freq)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置主频率或者基础频率。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setModulation</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置调制方式。如DVBS的QPSK，DVBC的QAM，DVBT的COFDM等</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setSymbolrate</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置符号率</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getLockStatus</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalSNR</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//Signal to Noise Ratio - which means signal quality</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalBER</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//Bit Error Rate - which shows the error rate of the signal</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalAGC</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">// Automatic Gain Control - which means signal strength</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p> <code>class IFreqTable</code> 频率表相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IFreqTable:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_freqTable_set</span><span class=\"params\">(<span class=\"keyword\">char</span>* pFilePath)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_freqTable_set</span><span class=\"params\">(<span class=\"keyword\">struct</span> FreqNode* freqList)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">struct</span> FreqNode* <span class=\"title\">tv_freqTable_get</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">struct</span> FreqNode* <span class=\"title\">tv_freqTable_getFreq</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32FreqIndex)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* m_freqList;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> FreqNode </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Freq;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate;</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* prev;</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IDemux</code> TSD/Demux/Filter相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IDemux:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    tv_demux_init() = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_deInit() = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_open(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8DemuxId) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_close(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8DemuxId) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_parseSi(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* siBuffer) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_parsePsi(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* psiBuffer) = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IChannelScan</code> 搜索逻辑相关</p>\n</blockquote>\n<p>搜索的动作，分为几种。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动搜索: `</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span></span>; <span class=\"comment\">//full模式。根据频率带宽在全频率表范围内自动递增搜索。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span></span>; <span class=\"comment\">//quick模式。以中心主频率上的NIT表数据为准。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//手动搜索：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span></span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate)</span></span>;</div></pre></td></tr></table></figure>\n<p>抽象几种搜索方式，可以得到如下接口类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IChannelScan:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan</span><span class=\"params\">(<span class=\"keyword\">class</span> FreqTable freqTable)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">bool</span> bNit)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto_stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto_pause</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual_stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_complete</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> IFreqTable m_freqTable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IChannelData</code> 频道数据相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IChannelData:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\">vritual <span class=\"keyword\">int</span> <span class=\"title\">tv_ChannelData_saveData</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-接口\"><a href=\"#3-接口\" class=\"headerlink\" title=\"3.  接口\"></a>3.  接口</h3><p>抽象类的实际对象接口设计</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> DtvChannelScan: <span class=\"keyword\">public</span> IChannelScan, <span class=\"keyword\">public</span> IFrontEnd, <span class=\"keyword\">public</span> IDemux, <span class=\"keyword\">public</span> IChannelScan, <span class=\"keyword\">public</span> IChannelData</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan</span><span class=\"params\">(<span class=\"keyword\">class</span> FreqTable freqTable)</span> </span>&#123;</div><div class=\"line\">        assert(freqTable);</div><div class=\"line\">        assert(tv_frontEnd_init());</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">struct</span> FreqNode* freqList = m_freqTable::tv_freqTable_get();</div><div class=\"line\">        <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">        foreach freqList[] &#123;</div><div class=\"line\">            tv_frontEnd_setFreq(u8TunerIndex, u32Freq);</div><div class=\"line\">            <span class=\"keyword\">if</span> (tv_frontEnd_getLockStatus(u8TunerIndex)) &#123;</div><div class=\"line\">                assert(tv_demux_init());</div><div class=\"line\">                tv_demux_open();</div><div class=\"line\">                tv_demux_SetFilter();</div><div class=\"line\">                <span class=\"keyword\">while</span>(--timeout) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (SI) &#123;</div><div class=\"line\">                        tv_demux_parseSi(SDT);</div><div class=\"line\">                        tv_demux_parseSi(BAT);</div><div class=\"line\">                        tv_demux_parseSi(EIT);</div><div class=\"line\">                        tv_demux_parseSi(TDT);</div><div class=\"line\">                        tv_demux_parseSi(TOT);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (PSI) &#123;</div><div class=\"line\">                        tv_demux_parsePsi(NIT);</div><div class=\"line\">                        tv_demux_parsePsi(PAT);</div><div class=\"line\">                        tv_demux_parsePsi(PMT);</div><div class=\"line\">                        tv_demux_parsePsi(CAT);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    tv_ChannelData_saveData();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> IFreqTable m_freqTable;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"4-TODO：\"><a href=\"#4-TODO：\" class=\"headerlink\" title=\"4. TODO：\"></a>4. TODO：</h3>","excerpt":"<p>翻出来以前随手写的一个文档，DTV搜索模块的简单抽象设计，原目的是为了设计一套中间层的，种种原因没能立项，这个半成品都不算的文档就丢尘埃里了。</p>\n<h3 id=\"1-流程\"><a href=\"#1-流程\" class=\"headerlink\" title=\"1. 流程\"></a>1. 流程</h3><p>分析频道搜索流程，大概分几个步骤。（以DTV为例）</p>\n<ol>\n<li>获取频率表；</li>\n<li>设置并锁定单个频率；</li>\n<li>获取单个频率上的数据（DTV为SI/PSI）；</li>\n<li>分析获取到的SI/PSI信息；</li>\n<li>保存SI/PSI中的信息到每个单独的分类数据库中；</li>\n<li>跳到第2步，循环，直至频率表中的频率全部扫完。</li>\n</ol>","more":"<blockquote>\n<p><code>流程图如下：</code></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\">st=&gt;start: 搜索开始</div><div class=\"line\">e=&gt;end: 搜索结束</div><div class=\"line\">opGetFreqTable=&gt;operation: 获取频率表</div><div class=\"line\">opGetNextFreq=&gt;operation: 获取下一个频率</div><div class=\"line\">conGetFreqEnd=&gt;condition: 频率表有数据？</div><div class=\"line\">opSetFreq=&gt;operation: 设置频率</div><div class=\"line\">conLockTuner=&gt;condition: 锁频成功？</div><div class=\"line\">opGetTable=&gt;operation: 获取SI/PSI</div><div class=\"line\">conGetTable=&gt;condition: 获取成功？</div><div class=\"line\">opParseTable=&gt;operation: 分析SI/PSI</div><div class=\"line\">conPareTable=&gt;condition: 分析成功？</div><div class=\"line\">opSaveData=&gt;operation: 存储channel数据</div><div class=\"line\"></div><div class=\"line\">st-&gt;opGetFreqTable-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conGetFreqEnd(no)-&gt;e</div><div class=\"line\">conGetFreqEnd(yes)-&gt;opGetNextFreq-&gt;opSetFreq-&gt;conLockTuner-&gt;</div><div class=\"line\">conLockTuner(yes)-&gt;opGetTable-&gt;conGetTable-&gt;</div><div class=\"line\">conLockTuner(no)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conGetTable(yes)-&gt;opParseTable-&gt;conPareTable-&gt;</div><div class=\"line\">conGetTable(no)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conPareTable(yes)-&gt;opSaveData(left)-&gt;conGetFreqEnd-&gt;</div><div class=\"line\">conPareTable(no)-&gt;conGetFreqEnd-&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"2-抽象\"><a href=\"#2-抽象\" class=\"headerlink\" title=\"2. 抽象\"></a>2. 抽象</h3><p>电视信号根据信号传输类型分类，有DTV和ATV；而其中DTV又可分为DVB/ATSC/ISDB等；而其中DVB根据协议不同传输标准又可分为常见的DVBC/DVBT/DVBS/DVBH以及国内的变种DTMB/CMMB等。<br>电视信号在搜索频道时，由Tuner/Demod/Demux等几个模块组合完成，但是所有的都可以抽象出几个通用的动作。例如设置频率参数，搜索方式等。其中：</p>\n<ul>\n<li>与FE物理硬件相关的动作和数据可以抽象出<code>class IFrontEnd</code>，包含Tuner和Demod的相关方法；</li>\n<li>与频率相关的动作和数据可以抽象出<code>class IFreqTable</code>，包含频率表相关的方法与数据；</li>\n<li>与Demux和Filter相关的动作和数据可以抽象出<code>class iDemux</code>，包含TSD/Demux/Filter的相关方法和数据；</li>\n<li>与用户逻辑直接关联的动作可以抽象出<code>class IChannelScan</code>，包含搜索操作相关的方法。</li>\n<li>搜索模块的输出数据可以抽象出<code>class IChannelData</code>，包含与频道数据相关的方法及数据。</li>\n</ul>\n<blockquote>\n<p><code>class IFrontEnd</code> Tuner/Demod相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IFrontEnd:</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_init</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//init</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_deInit</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">// deinit</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setBandwidth</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Bandwidth)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置频率带宽</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setFreq</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32freq)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置主频率或者基础频率。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setModulation</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置调制方式。如DVBS的QPSK，DVBC的QAM，DVBT的COFDM等</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_setSymbolrate</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//设置符号率</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getLockStatus</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalSNR</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//Signal to Noise Ratio - which means signal quality</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalBER</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">//Bit Error Rate - which shows the error rate of the signal</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_frontEnd_getSignalAGC</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8TunerId)</span> </span>= <span class=\"number\">0</span>; <span class=\"comment\">// Automatic Gain Control - which means signal strength</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p> <code>class IFreqTable</code> 频率表相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IFreqTable:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_freqTable_set</span><span class=\"params\">(<span class=\"keyword\">char</span>* pFilePath)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_freqTable_set</span><span class=\"params\">(<span class=\"keyword\">struct</span> FreqNode* freqList)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">struct</span> FreqNode* <span class=\"title\">tv_freqTable_get</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">struct</span> FreqNode* <span class=\"title\">tv_freqTable_getFreq</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32FreqIndex)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* m_freqList;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct</span> FreqNode </div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Freq;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate;</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* prev;</div><div class=\"line\">    <span class=\"keyword\">struct</span> FreqNode* next;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IDemux</code> TSD/Demux/Filter相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IDemux:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    tv_demux_init() = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_deInit() = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_open(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8DemuxId) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_close(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span> u8DemuxId) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_parseSi(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* siBuffer) = <span class=\"number\">0</span>;</div><div class=\"line\">    tv_demux_parsePsi(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">char</span>* psiBuffer) = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IChannelScan</code> 搜索逻辑相关</p>\n</blockquote>\n<p>搜索的动作，分为几种。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//自动搜索: `</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span></span>; <span class=\"comment\">//full模式。根据频率带宽在全频率表范围内自动递增搜索。</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span></span>; <span class=\"comment\">//quick模式。以中心主频率上的NIT表数据为准。</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//手动搜索：</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span></span>; </div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channel_scan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32Modulation, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32SymbolRate)</span></span>;</div></pre></td></tr></table></figure>\n<p>抽象几种搜索方式，可以得到如下接口类：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IChannelScan:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan</span><span class=\"params\">(<span class=\"keyword\">class</span> FreqTable freqTable)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">bool</span> bNit)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32StartFreq, <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32EndFreq)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto_stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto_pause</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual_stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_complete</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> IFreqTable m_freqTable;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<blockquote>\n<p><code>class IChannelData</code> 频道数据相关</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IChannelData:</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\">vritual <span class=\"keyword\">int</span> <span class=\"title\">tv_ChannelData_saveData</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h3 id=\"3-接口\"><a href=\"#3-接口\" class=\"headerlink\" title=\"3.  接口\"></a>3.  接口</h3><p>抽象类的实际对象接口设计</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> DtvChannelScan: <span class=\"keyword\">public</span> IChannelScan, <span class=\"keyword\">public</span> IFrontEnd, <span class=\"keyword\">public</span> IDemux, <span class=\"keyword\">public</span> IChannelScan, <span class=\"keyword\">public</span> IChannelData</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan</span><span class=\"params\">(<span class=\"keyword\">class</span> FreqTable freqTable)</span> </span>&#123;</div><div class=\"line\">        assert(freqTable);</div><div class=\"line\">        assert(tv_frontEnd_init());</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">struct</span> FreqNode* freqList = m_freqTable::tv_freqTable_get();</div><div class=\"line\">        <span class=\"comment\">//<span class=\"doctag\">TODO:</span></span></div><div class=\"line\">        foreach freqList[] &#123;</div><div class=\"line\">            tv_frontEnd_setFreq(u8TunerIndex, u32Freq);</div><div class=\"line\">            <span class=\"keyword\">if</span> (tv_frontEnd_getLockStatus(u8TunerIndex)) &#123;</div><div class=\"line\">                assert(tv_demux_init());</div><div class=\"line\">                tv_demux_open();</div><div class=\"line\">                tv_demux_SetFilter();</div><div class=\"line\">                <span class=\"keyword\">while</span>(--timeout) &#123;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (SI) &#123;</div><div class=\"line\">                        tv_demux_parseSi(SDT);</div><div class=\"line\">                        tv_demux_parseSi(BAT);</div><div class=\"line\">                        tv_demux_parseSi(EIT);</div><div class=\"line\">                        tv_demux_parseSi(TDT);</div><div class=\"line\">                        tv_demux_parseSi(TOT);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    <span class=\"keyword\">if</span> (PSI) &#123;</div><div class=\"line\">                        tv_demux_parsePsi(NIT);</div><div class=\"line\">                        tv_demux_parsePsi(PAT);</div><div class=\"line\">                        tv_demux_parsePsi(PMT);</div><div class=\"line\">                        tv_demux_parsePsi(CAT);</div><div class=\"line\">                    &#125;</div><div class=\"line\">                    tv_ChannelData_saveData();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_auto</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> u32mainFreq)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">tv_channelScan_manual</span><span class=\"params\">()</span></span>;</div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> IFreqTable m_freqTable;</div><div class=\"line\"></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<h3 id=\"4-TODO：\"><a href=\"#4-TODO：\" class=\"headerlink\" title=\"4. TODO：\"></a>4. TODO：</h3>"},{"title":"学习Docker好榜样","date":"2015-06-24T01:16:51.000Z","_content":"突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。\n[Docker](http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK)是什么?\n![](http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155)\n","source":"_posts/学习Docker好榜样.md","raw":"title: \"学习Docker好榜样\"\ndate: 2015-06-24 09:16:51\ncategories:\n - study\ntags:\n - docker\n---\n突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。\n[Docker](http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK)是什么?\n![](http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155)\n","slug":"学习Docker好榜样","published":1,"updated":"2016-09-06T08:44:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1910020fgn9wzig6qli","content":"<p>突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。<br><a href=\"http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK\" target=\"_blank\" rel=\"external\">Docker</a>是什么?<br><img src=\"http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155\" alt=\"\"></p>\n","excerpt":"","more":"<p>突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。<br><a href=\"http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK\">Docker</a>是什么?<br><img src=\"http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155\" alt=\"\"></p>\n"},{"title":"zookeeper","date":"2016-07-26T07:58:30.000Z","_content":"etcd和zookeeper真的好像。转一篇zookeeper的文章，以备份学习。\n**[zookeeper：一个用于分布式系统的分布式协作服务程序](http://debugo.com/zookeeper/)**\n\n> ZooKeeper是一个用于分布式应用程序的分布式开源协调服务。它使用一组简单的操作原语，使得分布式应用可以实现更高层次的服务——如同步、配置维护、群组和命名管理等。它以易于编程为基本设计理念，并使用了一个类似于文件系统目录结构风格的数据模型。ZooKeeper服务运行于Java环境中并可以在Java和C中使用。\n\n![](http://ww3.sinaimg.cn/large/772d7a33jw1f67dcnk9l1j209g060aa9.jpg)\n\n","source":"_posts/zookeeper.md","raw":"---\ntitle: zookeeper\ndate: 2016-07-26 15:58:30\ncategories:\n - study\ntags:\n - zookeeper\n---\netcd和zookeeper真的好像。转一篇zookeeper的文章，以备份学习。\n**[zookeeper：一个用于分布式系统的分布式协作服务程序](http://debugo.com/zookeeper/)**\n\n> ZooKeeper是一个用于分布式应用程序的分布式开源协调服务。它使用一组简单的操作原语，使得分布式应用可以实现更高层次的服务——如同步、配置维护、群组和命名管理等。它以易于编程为基本设计理念，并使用了一个类似于文件系统目录结构风格的数据模型。ZooKeeper服务运行于Java环境中并可以在Java和C中使用。\n\n![](http://ww3.sinaimg.cn/large/772d7a33jw1f67dcnk9l1j209g060aa9.jpg)\n\n","slug":"zookeeper","published":1,"updated":"2016-09-06T08:44:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1940024fgn9x8ft1pxv","content":"<p>etcd和zookeeper真的好像。转一篇zookeeper的文章，以备份学习。<br><strong><a href=\"http://debugo.com/zookeeper/\" target=\"_blank\" rel=\"external\">zookeeper：一个用于分布式系统的分布式协作服务程序</a></strong></p>\n<blockquote>\n<p>ZooKeeper是一个用于分布式应用程序的分布式开源协调服务。它使用一组简单的操作原语，使得分布式应用可以实现更高层次的服务——如同步、配置维护、群组和命名管理等。它以易于编程为基本设计理念，并使用了一个类似于文件系统目录结构风格的数据模型。ZooKeeper服务运行于Java环境中并可以在Java和C中使用。</p>\n</blockquote>\n<p><img src=\"http://ww3.sinaimg.cn/large/772d7a33jw1f67dcnk9l1j209g060aa9.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>etcd和zookeeper真的好像。转一篇zookeeper的文章，以备份学习。<br><strong><a href=\"http://debugo.com/zookeeper/\">zookeeper：一个用于分布式系统的分布式协作服务程序</a></strong></p>\n<blockquote>\n<p>ZooKeeper是一个用于分布式应用程序的分布式开源协调服务。它使用一组简单的操作原语，使得分布式应用可以实现更高层次的服务——如同步、配置维护、群组和命名管理等。它以易于编程为基本设计理念，并使用了一个类似于文件系统目录结构风格的数据模型。ZooKeeper服务运行于Java环境中并可以在Java和C中使用。</p>\n</blockquote>\n<p><img src=\"http://ww3.sinaimg.cn/large/772d7a33jw1f67dcnk9l1j209g060aa9.jpg\" alt=\"\"></p>\n"},{"title":"学习Markdown","date":"2015-05-13T06:21:46.000Z","_content":"&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n&emsp;在网上找到了一组不错的学习资料，[WOW!ubuntu](http://wowubuntu.com/)站提供了一份简体中文的[Markdown语法说明](http://wowubuntu.com/markdown/)，以及[Markdown快速入门指南](http://wowubuntu.com/markdown/basic.html)，非常不错，推荐新手阅读。\n&emsp;拜读中。。。\n","source":"_posts/学习Markdown.md","raw":"title: \"学习Markdown\"\ndate: 2015-05-13 14:21:46\ncategories:\n - study\ntags:\n - Markdown\n---\n&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n&emsp;在网上找到了一组不错的学习资料，[WOW!ubuntu](http://wowubuntu.com/)站提供了一份简体中文的[Markdown语法说明](http://wowubuntu.com/markdown/)，以及[Markdown快速入门指南](http://wowubuntu.com/markdown/basic.html)，非常不错，推荐新手阅读。\n&emsp;拜读中。。。\n","slug":"学习Markdown","published":1,"updated":"2016-09-06T08:44:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z1960027fgn9i6mzxs2u","content":"<p>&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>&emsp;在网上找到了一组不错的学习资料，<a href=\"http://wowubuntu.com/\" target=\"_blank\" rel=\"external\">WOW!ubuntu</a>站提供了一份简体中文的<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown语法说明</a>，以及<a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"external\">Markdown快速入门指南</a>，非常不错，推荐新手阅读。<br>&emsp;拜读中。。。</p>\n","excerpt":"","more":"<p>&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>&emsp;在网上找到了一组不错的学习资料，<a href=\"http://wowubuntu.com/\">WOW!ubuntu</a>站提供了一份简体中文的<a href=\"http://wowubuntu.com/markdown/\">Markdown语法说明</a>，以及<a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown快速入门指南</a>，非常不错，推荐新手阅读。<br>&emsp;拜读中。。。</p>\n"},{"title":"当了一天的翻译机器","date":"2016-07-15T06:41:38.000Z","_content":"全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。\n","source":"_posts/当了一天的翻译机器.md","raw":"---\ntitle: 当了一天的翻译机器\ndate: 2016-07-15 14:41:38\ncategories:\n - life\ntags: \n - 虾扯\n---\n全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。\n","slug":"当了一天的翻译机器","published":1,"updated":"2016-09-06T08:44:45.056Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z199002afgn9b38s50rj","content":"<p>全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。</p>\n","excerpt":"","more":"<p>全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。</p>\n"},{"title":"微博图床","date":"2016-09-08T06:01:09.000Z","_content":"之前blog一直在为用哪家图床服务发愁，一开始用的七牛云存储，不是太好用。后来无意中发现了一个叫[**`微博图床`**](https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl)的神器。说它神器真不为过。速度快，简单易用，功能强大，图片还不丢失。\n\n官方说有如下功能特点。\n- 支持点选/拖拽/本地粘贴3种方式上传图片至新浪微博图床\n- 支持批量上传\n- 支持生成图片地址,HTML,UBB和Markdown四种格式\n- 支持本地保存和删除上传历史\n- 支持在常用在线markdown编辑器中使用ctrl+v粘贴图片，图片自动上传到微博图床。(目前已支持github，csdn及zybuluo的markdown在线编辑器)\n- 支持https模式\n- 支持自定义Chrome菜单栏图标\n\n<!-- more -->\n\n界面如下：\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m58wvkzqj20lu0eymzs.jpg)\n历史上传记录：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m599zdtyj20tt0grafx.jpg)\n","source":"_posts/微博图床.md","raw":"---\ntitle: 微博图床\ndate: 2016-09-08 14:01:09\ncategories:\n - study\ntags:\n - Markdown\n---\n之前blog一直在为用哪家图床服务发愁，一开始用的七牛云存储，不是太好用。后来无意中发现了一个叫[**`微博图床`**](https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl)的神器。说它神器真不为过。速度快，简单易用，功能强大，图片还不丢失。\n\n官方说有如下功能特点。\n- 支持点选/拖拽/本地粘贴3种方式上传图片至新浪微博图床\n- 支持批量上传\n- 支持生成图片地址,HTML,UBB和Markdown四种格式\n- 支持本地保存和删除上传历史\n- 支持在常用在线markdown编辑器中使用ctrl+v粘贴图片，图片自动上传到微博图床。(目前已支持github，csdn及zybuluo的markdown在线编辑器)\n- 支持https模式\n- 支持自定义Chrome菜单栏图标\n\n<!-- more -->\n\n界面如下：\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f7m58wvkzqj20lu0eymzs.jpg)\n历史上传记录：\n![](http://ww1.sinaimg.cn/large/772d7a33gw1f7m599zdtyj20tt0grafx.jpg)\n","slug":"微博图床","published":1,"updated":"2016-09-08T06:11:53.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19b002dfgn9o4586efv","content":"<p>之前blog一直在为用哪家图床服务发愁，一开始用的七牛云存储，不是太好用。后来无意中发现了一个叫<a href=\"https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl\" target=\"_blank\" rel=\"external\"><strong><code>微博图床</code></strong></a>的神器。说它神器真不为过。速度快，简单易用，功能强大，图片还不丢失。</p>\n<p>官方说有如下功能特点。</p>\n<ul>\n<li>支持点选/拖拽/本地粘贴3种方式上传图片至新浪微博图床</li>\n<li>支持批量上传</li>\n<li>支持生成图片地址,HTML,UBB和Markdown四种格式</li>\n<li>支持本地保存和删除上传历史</li>\n<li>支持在常用在线markdown编辑器中使用ctrl+v粘贴图片，图片自动上传到微博图床。(目前已支持github，csdn及zybuluo的markdown在线编辑器)</li>\n<li>支持https模式</li>\n<li>支持自定义Chrome菜单栏图标</li>\n</ul>\n<a id=\"more\"></a>\n<p>界面如下：<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m58wvkzqj20lu0eymzs.jpg\" alt=\"\"><br>历史上传记录：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m599zdtyj20tt0grafx.jpg\" alt=\"\"></p>\n","excerpt":"<p>之前blog一直在为用哪家图床服务发愁，一开始用的七牛云存储，不是太好用。后来无意中发现了一个叫<a href=\"https://chrome.google.com/webstore/detail/新浪微博图床/fdfdnfpdplfbbnemmmoklbfjbhecpnhf?hl\"><strong><code>微博图床</code></strong></a>的神器。说它神器真不为过。速度快，简单易用，功能强大，图片还不丢失。</p>\n<p>官方说有如下功能特点。</p>\n<ul>\n<li>支持点选/拖拽/本地粘贴3种方式上传图片至新浪微博图床</li>\n<li>支持批量上传</li>\n<li>支持生成图片地址,HTML,UBB和Markdown四种格式</li>\n<li>支持本地保存和删除上传历史</li>\n<li>支持在常用在线markdown编辑器中使用ctrl+v粘贴图片，图片自动上传到微博图床。(目前已支持github，csdn及zybuluo的markdown在线编辑器)</li>\n<li>支持https模式</li>\n<li>支持自定义Chrome菜单栏图标</li>\n</ul>","more":"<p>界面如下：<br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f7m58wvkzqj20lu0eymzs.jpg\" alt=\"\"><br>历史上传记录：<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33gw1f7m599zdtyj20tt0grafx.jpg\" alt=\"\"></p>"},{"title":"推荐款不错的hexo主题","date":"2016-07-15T06:57:21.000Z","_content":"昨天刚重新启用github blog。找了几款主题分别试用了下。\n第一款是[NexT](https://github.com/iissnan/hexo-theme-next)，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。\n另外一款是[Anisina](https://github.com/haojen/hexo-theme-Anisina)，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？\n另外又试了几款，有[Bootstrap](https://github.com/cgmartin/hexo-theme-bootstrap-blog),[jacman](https://github.com/wuchong/jacman)都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。\n最终我还得选用了NexT主题，[作者网站](http://theme-next.iissnan.com/)上有很详细的配置说明以及第三方插件加载方法，挺实用的。\n只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。\n","source":"_posts/推荐款不错的hexo主题.md","raw":"---\ntitle: 推荐款不错的hexo主题\ndate: 2016-07-15 14:57:21\ncategories:\n - life\ntags:\n - hexo\n---\n昨天刚重新启用github blog。找了几款主题分别试用了下。\n第一款是[NexT](https://github.com/iissnan/hexo-theme-next)，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。\n另外一款是[Anisina](https://github.com/haojen/hexo-theme-Anisina)，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？\n另外又试了几款，有[Bootstrap](https://github.com/cgmartin/hexo-theme-bootstrap-blog),[jacman](https://github.com/wuchong/jacman)都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。\n最终我还得选用了NexT主题，[作者网站](http://theme-next.iissnan.com/)上有很详细的配置说明以及第三方插件加载方法，挺实用的。\n只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。\n","slug":"推荐款不错的hexo主题","published":1,"updated":"2016-09-06T08:44:45.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19h002hfgn9swj6g2f5","content":"<p>昨天刚重新启用github blog。找了几款主题分别试用了下。<br>第一款是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a>，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。<br>另外一款是<a href=\"https://github.com/haojen/hexo-theme-Anisina\" target=\"_blank\" rel=\"external\">Anisina</a>，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？<br>另外又试了几款，有<a href=\"https://github.com/cgmartin/hexo-theme-bootstrap-blog\" target=\"_blank\" rel=\"external\">Bootstrap</a>,<a href=\"https://github.com/wuchong/jacman\" target=\"_blank\" rel=\"external\">jacman</a>都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。<br>最终我还得选用了NexT主题，<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">作者网站</a>上有很详细的配置说明以及第三方插件加载方法，挺实用的。<br>只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。</p>\n","excerpt":"","more":"<p>昨天刚重新启用github blog。找了几款主题分别试用了下。<br>第一款是<a href=\"https://github.com/iissnan/hexo-theme-next\">NexT</a>，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。<br>另外一款是<a href=\"https://github.com/haojen/hexo-theme-Anisina\">Anisina</a>，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？<br>另外又试了几款，有<a href=\"https://github.com/cgmartin/hexo-theme-bootstrap-blog\">Bootstrap</a>,<a href=\"https://github.com/wuchong/jacman\">jacman</a>都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。<br>最终我还得选用了NexT主题，<a href=\"http://theme-next.iissnan.com/\">作者网站</a>上有很详细的配置说明以及第三方插件加载方法，挺实用的。<br>只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。</p>\n"},{"title":"继续mqtt","date":"2015-05-15T02:31:13.000Z","_content":"&emsp;手头上正在做有关智能家居的项目。项目基于[mqtt](http://mqtt.org/)协议开发，使用开源项目[mosquitto](http://mosquitto.org/)为主体搭建。\n&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。\n&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。\n&emsp;go go go...\n","source":"_posts/继续mqtt.md","raw":"title: \"继续mqtt\"\ndate: 2015-05-15 10:31:13\ncategories:\n - work\ntags:\n - mqtt\n - mosquitto\n---\n&emsp;手头上正在做有关智能家居的项目。项目基于[mqtt](http://mqtt.org/)协议开发，使用开源项目[mosquitto](http://mosquitto.org/)为主体搭建。\n&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。\n&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。\n&emsp;go go go...\n","slug":"继续mqtt","published":1,"updated":"2016-09-06T08:44:45.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19j002kfgn9gt7jy5tg","content":"<p>&emsp;手头上正在做有关智能家居的项目。项目基于<a href=\"http://mqtt.org/\" target=\"_blank\" rel=\"external\">mqtt</a>协议开发，使用开源项目<a href=\"http://mosquitto.org/\" target=\"_blank\" rel=\"external\">mosquitto</a>为主体搭建。<br>&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。<br>&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。<br>&emsp;go go go…</p>\n","excerpt":"","more":"<p>&emsp;手头上正在做有关智能家居的项目。项目基于<a href=\"http://mqtt.org/\">mqtt</a>协议开发，使用开源项目<a href=\"http://mosquitto.org/\">mosquitto</a>为主体搭建。<br>&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。<br>&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。<br>&emsp;go go go…</p>\n"},{"title":"最近要看的资料","date":"2016-07-25T06:41:52.000Z","_content":"\n列一下最近要学习的内容:\n\n## etcd \n[*https://github.com/coreos/etcd*](https://github.com/coreos/etcd)\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f6668gn8p8j20ku06yq3u.jpg)\nGitbook[《Docker-从入门到实践》](https://yeasy.gitbooks.io/docker_practice/content/etcd/intro.html)上的介绍：\n> etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。我们知道，在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。CoreOS 项目就希望基于 etcd 来解决这一问题。\netcd 目前在 github.com/coreos/etcd 进行维护，即将发布 2.0.0 版本。\n受到 Apache ZooKeeper 项目和 doozer 项目的启发，etcd在设计的时候重点考虑了下面四个要素：\n- 简单：支持 REST 风格的 HTTP+JSON API\n- 安全：支持 HTTPS 方式的访问\n- 快速：支持并发 1k/s 的写操作\n- 可靠：支持分布式结构，基于 Raft 的一致性算法\n注：Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工具。\n注：doozer 则是一个一致性分布式数据库。\n注：Raft 是一套通过选举主节点来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节可以参考 raftconsensus.github.io。\n**一般情况下，用户使用etcd可以在多个节点上启动多个实例，并添加它们为一个集群。同一个集群中的 etcd 实例将会保持彼此信息的一致性。**\n\n## CoreOS\n[CoreOS](https://coreos.com/) 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。\nCoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg)\n\n## Alpine\n![](http://ww4.sinaimg.cn/large/772d7a33jw1f666kdbh0uj20cp0323yw.jpg)\nAlpine是一个面向安全的轻型Linux发行版本。基于uClibc和Busybox。体积只有5MB。但是却有自己的完整包管理器。使用如下命令格式来管理。Docker官方镜像以此为底包。\n```shell\nsudo apk update xxx\nsudo apk add xxx\nsudo apk remove xxx\n```\n\n\n## docker machine \n[*https://github.com/docker/machine*](https://github.com/docker/machine)\n[*https://docs.docker.com/machine/*](https://docs.docker.com/machine/)\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f6663gusf1j207q097gmi.jpg)\n> Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。Docker官方是这样介绍Machine的初衷的：\n>> 之前，Docker的安装流程非常复杂，用户需要登录到相应的主机上，根据官方的安装和配置指南来安装Docker，并且不同的操作系统的安装步骤也是不一样的。而有了Machine后，不管是在笔记本、虚拟机还是公有云实例上，用户仅仅需要一个命令....当然那你需要先安装Machine。\n\n\n## supervisor\n[*http://supervisord.org/*](http://supervisord.org/)\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f666c21ifnj207905d3yd.jpg)\n> Supervisor是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用supervisor同时启动所有应用程序而不是一个一个地敲命令启动。\n","source":"_posts/最近要看的资料.md","raw":"---\ntitle: 最近要看的资料\ndate: 2016-07-25 14:41:52\ncategories:\n - study\ntags:\n - golang\n - Docker\n - Alpine\n - CoreOS\n - linux\n---\n\n列一下最近要学习的内容:\n\n## etcd \n[*https://github.com/coreos/etcd*](https://github.com/coreos/etcd)\n![](http://ww2.sinaimg.cn/large/772d7a33gw1f6668gn8p8j20ku06yq3u.jpg)\nGitbook[《Docker-从入门到实践》](https://yeasy.gitbooks.io/docker_practice/content/etcd/intro.html)上的介绍：\n> etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。我们知道，在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。CoreOS 项目就希望基于 etcd 来解决这一问题。\netcd 目前在 github.com/coreos/etcd 进行维护，即将发布 2.0.0 版本。\n受到 Apache ZooKeeper 项目和 doozer 项目的启发，etcd在设计的时候重点考虑了下面四个要素：\n- 简单：支持 REST 风格的 HTTP+JSON API\n- 安全：支持 HTTPS 方式的访问\n- 快速：支持并发 1k/s 的写操作\n- 可靠：支持分布式结构，基于 Raft 的一致性算法\n注：Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工具。\n注：doozer 则是一个一致性分布式数据库。\n注：Raft 是一套通过选举主节点来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节可以参考 raftconsensus.github.io。\n**一般情况下，用户使用etcd可以在多个节点上启动多个实例，并添加它们为一个集群。同一个集群中的 etcd 实例将会保持彼此信息的一致性。**\n\n## CoreOS\n[CoreOS](https://coreos.com/) 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。\nCoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg)\n\n## Alpine\n![](http://ww4.sinaimg.cn/large/772d7a33jw1f666kdbh0uj20cp0323yw.jpg)\nAlpine是一个面向安全的轻型Linux发行版本。基于uClibc和Busybox。体积只有5MB。但是却有自己的完整包管理器。使用如下命令格式来管理。Docker官方镜像以此为底包。\n```shell\nsudo apk update xxx\nsudo apk add xxx\nsudo apk remove xxx\n```\n\n\n## docker machine \n[*https://github.com/docker/machine*](https://github.com/docker/machine)\n[*https://docs.docker.com/machine/*](https://docs.docker.com/machine/)\n![](http://ww1.sinaimg.cn/large/772d7a33jw1f6663gusf1j207q097gmi.jpg)\n> Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。Docker官方是这样介绍Machine的初衷的：\n>> 之前，Docker的安装流程非常复杂，用户需要登录到相应的主机上，根据官方的安装和配置指南来安装Docker，并且不同的操作系统的安装步骤也是不一样的。而有了Machine后，不管是在笔记本、虚拟机还是公有云实例上，用户仅仅需要一个命令....当然那你需要先安装Machine。\n\n\n## supervisor\n[*http://supervisord.org/*](http://supervisord.org/)\n![](http://ww3.sinaimg.cn/large/772d7a33gw1f666c21ifnj207905d3yd.jpg)\n> Supervisor是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用supervisor同时启动所有应用程序而不是一个一个地敲命令启动。\n","slug":"最近要看的资料","published":1,"updated":"2016-09-06T08:44:45.071Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19m002ofgn9r9g21dsm","content":"<p>列一下最近要学习的内容:</p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p><a href=\"https://github.com/coreos/etcd\" target=\"_blank\" rel=\"external\"><em>https://github.com/coreos/etcd</em></a><br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f6668gn8p8j20ku06yq3u.jpg\" alt=\"\"><br>Gitbook<a href=\"https://yeasy.gitbooks.io/docker_practice/content/etcd/intro.html\" target=\"_blank\" rel=\"external\">《Docker-从入门到实践》</a>上的介绍：</p>\n<blockquote>\n<p>etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。我们知道，在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。CoreOS 项目就希望基于 etcd 来解决这一问题。<br>etcd 目前在 github.com/coreos/etcd 进行维护，即将发布 2.0.0 版本。<br>受到 Apache ZooKeeper 项目和 doozer 项目的启发，etcd在设计的时候重点考虑了下面四个要素：</p>\n<ul>\n<li>简单：支持 REST 风格的 HTTP+JSON API</li>\n<li>安全：支持 HTTPS 方式的访问</li>\n<li>快速：支持并发 1k/s 的写操作</li>\n<li>可靠：支持分布式结构，基于 Raft 的一致性算法<br>注：Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工具。<br>注：doozer 则是一个一致性分布式数据库。<br>注：Raft 是一套通过选举主节点来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节可以参考 raftconsensus.github.io。<br><strong>一般情况下，用户使用etcd可以在多个节点上启动多个实例，并添加它们为一个集群。同一个集群中的 etcd 实例将会保持彼此信息的一致性。</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"CoreOS\"><a href=\"#CoreOS\" class=\"headerlink\" title=\"CoreOS\"></a>CoreOS</h2><p><a href=\"https://coreos.com/\" target=\"_blank\" rel=\"external\">CoreOS</a> 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。<br>CoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg\" alt=\"\"></p>\n<h2 id=\"Alpine\"><a href=\"#Alpine\" class=\"headerlink\" title=\"Alpine\"></a>Alpine</h2><p><img src=\"http://ww4.sinaimg.cn/large/772d7a33jw1f666kdbh0uj20cp0323yw.jpg\" alt=\"\"><br>Alpine是一个面向安全的轻型Linux发行版本。基于uClibc和Busybox。体积只有5MB。但是却有自己的完整包管理器。使用如下命令格式来管理。Docker官方镜像以此为底包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apk update xxx</div><div class=\"line\">sudo apk add xxx</div><div class=\"line\">sudo apk remove xxx</div></pre></td></tr></table></figure></p>\n<h2 id=\"docker-machine\"><a href=\"#docker-machine\" class=\"headerlink\" title=\"docker machine\"></a>docker machine</h2><p><a href=\"https://github.com/docker/machine\" target=\"_blank\" rel=\"external\"><em>https://github.com/docker/machine</em></a><br><a href=\"https://docs.docker.com/machine/\" target=\"_blank\" rel=\"external\"><em>https://docs.docker.com/machine/</em></a><br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f6663gusf1j207q097gmi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。Docker官方是这样介绍Machine的初衷的：</p>\n<blockquote>\n<p>之前，Docker的安装流程非常复杂，用户需要登录到相应的主机上，根据官方的安装和配置指南来安装Docker，并且不同的操作系统的安装步骤也是不一样的。而有了Machine后，不管是在笔记本、虚拟机还是公有云实例上，用户仅仅需要一个命令….当然那你需要先安装Machine。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h2><p><a href=\"http://supervisord.org/\" target=\"_blank\" rel=\"external\"><em>http://supervisord.org/</em></a><br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f666c21ifnj207905d3yd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Supervisor是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用supervisor同时启动所有应用程序而不是一个一个地敲命令启动。</p>\n</blockquote>\n","excerpt":"","more":"<p>列一下最近要学习的内容:</p>\n<h2 id=\"etcd\"><a href=\"#etcd\" class=\"headerlink\" title=\"etcd\"></a>etcd</h2><p><a href=\"https://github.com/coreos/etcd\"><em>https://github.com/coreos/etcd</em></a><br><img src=\"http://ww2.sinaimg.cn/large/772d7a33gw1f6668gn8p8j20ku06yq3u.jpg\" alt=\"\"><br>Gitbook<a href=\"https://yeasy.gitbooks.io/docker_practice/content/etcd/intro.html\">《Docker-从入门到实践》</a>上的介绍：</p>\n<blockquote>\n<p>etcd 是 CoreOS 团队于 2013 年 6 月发起的开源项目，它的目标是构建一个高可用的分布式键值（key-value）数据库，基于 Go 语言实现。我们知道，在分布式系统中，各种服务的配置信息的管理分享，服务的发现是一个很基本同时也是很重要的问题。CoreOS 项目就希望基于 etcd 来解决这一问题。<br>etcd 目前在 github.com/coreos/etcd 进行维护，即将发布 2.0.0 版本。<br>受到 Apache ZooKeeper 项目和 doozer 项目的启发，etcd在设计的时候重点考虑了下面四个要素：</p>\n<ul>\n<li>简单：支持 REST 风格的 HTTP+JSON API</li>\n<li>安全：支持 HTTPS 方式的访问</li>\n<li>快速：支持并发 1k/s 的写操作</li>\n<li>可靠：支持分布式结构，基于 Raft 的一致性算法<br>注：Apache ZooKeeper 是一套知名的分布式系统中进行同步和一致性管理的工具。<br>注：doozer 则是一个一致性分布式数据库。<br>注：Raft 是一套通过选举主节点来实现分布式系统一致性的算法，相比于大名鼎鼎的 Paxos 算法，它的过程更容易被人理解，由 Stanford 大学的 Diego Ongaro 和 John Ousterhout 提出。更多细节可以参考 raftconsensus.github.io。<br><strong>一般情况下，用户使用etcd可以在多个节点上启动多个实例，并添加它们为一个集群。同一个集群中的 etcd 实例将会保持彼此信息的一致性。</strong></li>\n</ul>\n</blockquote>\n<h2 id=\"CoreOS\"><a href=\"#CoreOS\" class=\"headerlink\" title=\"CoreOS\"></a>CoreOS</h2><p><a href=\"https://coreos.com/\">CoreOS</a> 源自Google ChromeOS。是一个全新的、面向数据中心设计的 Linux 操作系统。<br>CoreOS 专门针对大型数据中心而设计，旨在以轻量的系统架构和灵活的应用程序部署能力简化数据中心的维护成本和复杂度。从一开始就决定了CoreOS更加适合应用于一个集群环境而不是一个传统的服务器操作系统。<br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f669ooyc84j21650fzgnk.jpg\" alt=\"\"></p>\n<h2 id=\"Alpine\"><a href=\"#Alpine\" class=\"headerlink\" title=\"Alpine\"></a>Alpine</h2><p><img src=\"http://ww4.sinaimg.cn/large/772d7a33jw1f666kdbh0uj20cp0323yw.jpg\" alt=\"\"><br>Alpine是一个面向安全的轻型Linux发行版本。基于uClibc和Busybox。体积只有5MB。但是却有自己的完整包管理器。使用如下命令格式来管理。Docker官方镜像以此为底包。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">sudo apk update xxx</div><div class=\"line\">sudo apk add xxx</div><div class=\"line\">sudo apk remove xxx</div></pre></td></tr></table></figure></p>\n<h2 id=\"docker-machine\"><a href=\"#docker-machine\" class=\"headerlink\" title=\"docker machine\"></a>docker machine</h2><p><a href=\"https://github.com/docker/machine\"><em>https://github.com/docker/machine</em></a><br><a href=\"https://docs.docker.com/machine/\"><em>https://docs.docker.com/machine/</em></a><br><img src=\"http://ww1.sinaimg.cn/large/772d7a33jw1f6663gusf1j207q097gmi.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。Docker官方是这样介绍Machine的初衷的：</p>\n<blockquote>\n<p>之前，Docker的安装流程非常复杂，用户需要登录到相应的主机上，根据官方的安装和配置指南来安装Docker，并且不同的操作系统的安装步骤也是不一样的。而有了Machine后，不管是在笔记本、虚拟机还是公有云实例上，用户仅仅需要一个命令….当然那你需要先安装Machine。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"supervisor\"><a href=\"#supervisor\" class=\"headerlink\" title=\"supervisor\"></a>supervisor</h2><p><a href=\"http://supervisord.org/\"><em>http://supervisord.org/</em></a><br><img src=\"http://ww3.sinaimg.cn/large/772d7a33gw1f666c21ifnj207905d3yd.jpg\" alt=\"\"></p>\n<blockquote>\n<p>Supervisor是一个用Python写的进程管理工具，可以很方便的用来启动、重启、关闭进程（不仅仅是 Python 进程）。除了对单个进程的控制，还可以同时启动、关闭多个进程，比如很不幸的服务器出问题导致所有应用程序都被杀死，此时可以用supervisor同时启动所有应用程序而不是一个一个地敲命令启动。</p>\n</blockquote>\n"},{"title":"都快忘了这个blog了","date":"2016-07-14T05:23:09.000Z","_content":"\n因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？\n","source":"_posts/都快忘了这个blog了.md","raw":"---\ntitle: 都快忘了这个blog了\ndate: 2016-07-14 13:23:09\ncategories:\n - life\ntags:\n - 虾扯\n---\n\n因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？\n","slug":"都快忘了这个blog了","published":1,"updated":"2016-09-06T08:44:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19r002qfgn9zkyiakv9","content":"<p>因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？</p>\n","excerpt":"","more":"<p>因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？</p>\n"},{"title":"重启github blog","date":"2016-07-14T05:44:20.000Z","_content":"折腾了一上午，赶紧记录下来。\n\n---\n\n打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：\n\n1. 安装[NodeJS](https://nodejs.org/en/)。\n2. 安装Git。我在windows上用的是[MinGW32](http://www.mingw.org/)。\n3. 在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。\n```\nnpm install\nnpm install hexo-deployer-git --save\n```\n4. 然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）\n```\nhexo clean\nhexo new \"title\"\nhexo generate (hexo ge)\nhexo deploy (hexo de)\n```\n5. 发布前可以先本地浏览器预览一下。地址为http://localhost:4000 \n```\nhexo server (hexo se)\n```\n\nPS:有一个很重要的地方要注意，`_config.yml`文件中的deploy地址很模糊，有的文章说是要填`https://github.com/XXX/XXX.github.io.git`，有的文章又说要填`git@github.com:xxxxx/xxxxx.github.io.git`这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/cgoder/cgoder.github.io\n  branch: master\n```\n","source":"_posts/重启github-blog.md","raw":"---\ntitle: 重启github blog\ndate: 2016-07-14 13:44:20\ncategories:\n - life\ntags:\n - 虾扯\n---\n折腾了一上午，赶紧记录下来。\n\n---\n\n打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：\n\n1. 安装[NodeJS](https://nodejs.org/en/)。\n2. 安装Git。我在windows上用的是[MinGW32](http://www.mingw.org/)。\n3. 在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。\n```\nnpm install\nnpm install hexo-deployer-git --save\n```\n4. 然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）\n```\nhexo clean\nhexo new \"title\"\nhexo generate (hexo ge)\nhexo deploy (hexo de)\n```\n5. 发布前可以先本地浏览器预览一下。地址为http://localhost:4000 \n```\nhexo server (hexo se)\n```\n\nPS:有一个很重要的地方要注意，`_config.yml`文件中的deploy地址很模糊，有的文章说是要填`https://github.com/XXX/XXX.github.io.git`，有的文章又说要填`git@github.com:xxxxx/xxxxx.github.io.git`这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/cgoder/cgoder.github.io\n  branch: master\n```\n","slug":"重启github-blog","published":1,"updated":"2016-09-06T08:44:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cisv2z19v002tfgn92jlho0mv","content":"<p>折腾了一上午，赶紧记录下来。</p>\n<hr>\n<p>打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：</p>\n<ol>\n<li>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">NodeJS</a>。</li>\n<li>安装Git。我在windows上用的是<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"external\">MinGW32</a>。</li>\n<li><p>在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo new &quot;title&quot;</div><div class=\"line\">hexo generate (hexo ge)</div><div class=\"line\">hexo deploy (hexo de)</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布前可以先本地浏览器预览一下。地址为<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server (hexo se)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS:有一个很重要的地方要注意，<code>_config.yml</code>文件中的deploy地址很模糊，有的文章说是要填<code>https://github.com/XXX/XXX.github.io.git</code>，有的文章又说要填<code>git@github.com:xxxxx/xxxxx.github.io.git</code>这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/cgoder/cgoder.github.io</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>折腾了一上午，赶紧记录下来。</p>\n<hr>\n<p>打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：</p>\n<ol>\n<li>安装<a href=\"https://nodejs.org/en/\">NodeJS</a>。</li>\n<li>安装Git。我在windows上用的是<a href=\"http://www.mingw.org/\">MinGW32</a>。</li>\n<li><p>在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo new &quot;title&quot;</div><div class=\"line\">hexo generate (hexo ge)</div><div class=\"line\">hexo deploy (hexo de)</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布前可以先本地浏览器预览一下。地址为<a href=\"http://localhost:4000\">http://localhost:4000</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server (hexo se)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS:有一个很重要的地方要注意，<code>_config.yml</code>文件中的deploy地址很模糊，有的文章说是要填<code>https://github.com/XXX/XXX.github.io.git</code>，有的文章又说要填<code>git@github.com:xxxxx/xxxxx.github.io.git</code>这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/cgoder/cgoder.github.io</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cisv2z13p0001fgn9ktwu9tog","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z14b0008fgn9hsjtcvhm"},{"post_id":"cisv2z13v0002fgn9e152m4ja","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z14g000cfgn9wy3h9kqq"},{"post_id":"cisv2z1480005fgn9oqf7zsu5","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z14j000gfgn98x41x2gn"},{"post_id":"cisv2z15g000lfgn9d30plmnl","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z15y000qfgn9thok590n"},{"post_id":"cisv2z171000tfgn9lq11k615","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z17t0010fgn9essf00hn"},{"post_id":"cisv2z17e000xfgn96seax9ok","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z1830014fgn906lae14q"},{"post_id":"cisv2z17q000zfgn9i0jf9die","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z1850016fgn9kbgnhs12"},{"post_id":"cisv2z16w000rfgn929qv8kyk","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z1880019fgn99ot53qtd"},{"post_id":"cisv2z17w0012fgn9qjqq6uu1","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z18c001cfgn9ubnh2k72"},{"post_id":"cisv2z1830015fgn992tmh9cp","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z18f001gfgn9lkwbtjr9"},{"post_id":"cisv2z1860017fgn9vdlfdgf6","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z18j001jfgn9odwv0cc1"},{"post_id":"cisv2z189001bfgn9tcgebbtb","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z18n001nfgn93yd3790p"},{"post_id":"cisv2z18c001efgn9hwd5wkcg","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z18q001qfgn9mj6v0tqk"},{"post_id":"cisv2z18f001ifgn9m1f0ysmn","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z18w001tfgn9mdiri8xn"},{"post_id":"cisv2z18k001lfgn99wpdodmn","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z18z001xfgn9i7mh8xrv"},{"post_id":"cisv2z18o001ofgn93j9ysa07","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z191001zfgn9nmi2erqk"},{"post_id":"cisv2z18r001rfgn9d9ytzgh4","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z1930022fgn91e1as0ii"},{"post_id":"cisv2z18x001vfgn9l5mzfvll","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z1950025fgn9xljgjxe4"},{"post_id":"cisv2z18z001yfgn9jxwpmd0k","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z1990029fgn9hzmxu82m"},{"post_id":"cisv2z1910020fgn9wzig6qli","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z19b002cfgn9ms9yigxy"},{"post_id":"cisv2z1940024fgn9x8ft1pxv","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z19h002gfgn9axv5sp07"},{"post_id":"cisv2z1960027fgn9i6mzxs2u","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z19j002jfgn9zhqi2i1k"},{"post_id":"cisv2z199002afgn9b38s50rj","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z19m002mfgn9fvf3mkfg"},{"post_id":"cisv2z19b002dfgn9o4586efv","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z19q002pfgn93293c3au"},{"post_id":"cisv2z19h002hfgn9swj6g2f5","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z19u002rfgn98k9ljn01"},{"post_id":"cisv2z19j002kfgn9gt7jy5tg","category_id":"cisv2z17c000wfgn91m5tfzd6","_id":"cisv2z19x002vfgn9pd08q178"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","category_id":"cisv2z1460004fgn9m0s99kvd","_id":"cisv2z19x002xfgn9esuwmw2i"},{"post_id":"cisv2z19r002qfgn9zkyiakv9","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z19y0030fgn9dgcyjj57"},{"post_id":"cisv2z19v002tfgn92jlho0mv","category_id":"cisv2z15r000ofgn964bxjg28","_id":"cisv2z19y0032fgn9k33qzxek"}],"PostTag":[{"post_id":"cisv2z13p0001fgn9ktwu9tog","tag_id":"cisv2z13y0003fgn9xvgg4s2k","_id":"cisv2z14f000bfgn921qa37fx"},{"post_id":"cisv2z13p0001fgn9ktwu9tog","tag_id":"cisv2z1490006fgn9c5plw9f4","_id":"cisv2z14g000dfgn9lt0c3igv"},{"post_id":"cisv2z13v0002fgn9e152m4ja","tag_id":"cisv2z14c000afgn95iroa457","_id":"cisv2z14h000ffgn917j1mx13"},{"post_id":"cisv2z1480005fgn9oqf7zsu5","tag_id":"cisv2z14g000efgn9tmlk3i68","_id":"cisv2z14l000ifgn9qff881p0"},{"post_id":"cisv2z1480005fgn9oqf7zsu5","tag_id":"cisv2z14k000hfgn99imz67el","_id":"cisv2z14m000jfgn9fau4rmsq"},{"post_id":"cisv2z15d000kfgn967dlm6pv","tag_id":"cisv2z14g000efgn9tmlk3i68","_id":"cisv2z15p000mfgn9ipzck3oe"},{"post_id":"cisv2z15g000lfgn9d30plmnl","tag_id":"cisv2z15q000nfgn98s1vot7e","_id":"cisv2z15y000pfgn9tjiqq1b6"},{"post_id":"cisv2z17q000zfgn9i0jf9die","tag_id":"cisv2z14k000hfgn99imz67el","_id":"cisv2z1830013fgn9dpgdobaf"},{"post_id":"cisv2z16w000rfgn929qv8kyk","tag_id":"cisv2z179000vfgn9kg2xio9w","_id":"cisv2z189001afgn9mie8zbv0"},{"post_id":"cisv2z16w000rfgn929qv8kyk","tag_id":"cisv2z17t0011fgn9cmv6k1al","_id":"cisv2z18c001dfgn9rgskcj40"},{"post_id":"cisv2z189001bfgn9tcgebbtb","tag_id":"cisv2z13y0003fgn9xvgg4s2k","_id":"cisv2z18f001hfgn929akumw9"},{"post_id":"cisv2z189001bfgn9tcgebbtb","tag_id":"cisv2z1490006fgn9c5plw9f4","_id":"cisv2z18j001kfgn9d1b28f2p"},{"post_id":"cisv2z171000tfgn9lq11k615","tag_id":"cisv2z1870018fgn9mehr4k32","_id":"cisv2z18q001pfgn9vgfeb3ol"},{"post_id":"cisv2z171000tfgn9lq11k615","tag_id":"cisv2z18e001ffgn9dr6srs4x","_id":"cisv2z18w001sfgn9nubzbter"},{"post_id":"cisv2z17e000xfgn96seax9ok","tag_id":"cisv2z18n001mfgn9x411yl5k","_id":"cisv2z18y001wfgn9mlx1410u"},{"post_id":"cisv2z17w0012fgn9qjqq6uu1","tag_id":"cisv2z14c000afgn95iroa457","_id":"cisv2z1930023fgn9vznhg0q1"},{"post_id":"cisv2z17w0012fgn9qjqq6uu1","tag_id":"cisv2z18x001ufgn969izrf9c","_id":"cisv2z1950026fgn9anj0wb6w"},{"post_id":"cisv2z1830015fgn992tmh9cp","tag_id":"cisv2z1930021fgn90zrdic7s","_id":"cisv2z19a002bfgn9axsr6ntd"},{"post_id":"cisv2z1960027fgn9i6mzxs2u","tag_id":"cisv2z18n001mfgn9x411yl5k","_id":"cisv2z19f002efgn9p4g0c32j"},{"post_id":"cisv2z199002afgn9b38s50rj","tag_id":"cisv2z15q000nfgn98s1vot7e","_id":"cisv2z19i002ifgn9s6b2x80g"},{"post_id":"cisv2z19b002dfgn9o4586efv","tag_id":"cisv2z18n001mfgn9x411yl5k","_id":"cisv2z19l002lfgn91gu45xkb"},{"post_id":"cisv2z19r002qfgn9zkyiakv9","tag_id":"cisv2z15q000nfgn98s1vot7e","_id":"cisv2z19x002ufgn92weuwdo8"},{"post_id":"cisv2z1860017fgn9vdlfdgf6","tag_id":"cisv2z1980028fgn9y87udkz0","_id":"cisv2z19x002wfgn9tqn6jxno"},{"post_id":"cisv2z1860017fgn9vdlfdgf6","tag_id":"cisv2z19h002ffgn9acw2ku04","_id":"cisv2z19y002zfgn9efu84766"},{"post_id":"cisv2z1860017fgn9vdlfdgf6","tag_id":"cisv2z18x001ufgn969izrf9c","_id":"cisv2z19y0031fgn9teoytofy"},{"post_id":"cisv2z19v002tfgn92jlho0mv","tag_id":"cisv2z15q000nfgn98s1vot7e","_id":"cisv2z19z0034fgn99wcwn0g2"},{"post_id":"cisv2z18c001efgn9hwd5wkcg","tag_id":"cisv2z19v002sfgn95laqm55c","_id":"cisv2z19z0035fgn9ymg2xndg"},{"post_id":"cisv2z18f001ifgn9m1f0ysmn","tag_id":"cisv2z19x002yfgn9i1ns0g3d","_id":"cisv2z1a00037fgn96hgkov4x"},{"post_id":"cisv2z18f001ifgn9m1f0ysmn","tag_id":"cisv2z19y0033fgn9dk647amu","_id":"cisv2z1a00038fgn99ibn5c6i"},{"post_id":"cisv2z18k001lfgn99wpdodmn","tag_id":"cisv2z19z0036fgn95mz3iljg","_id":"cisv2z1a2003afgn9gbgtdy0u"},{"post_id":"cisv2z18o001ofgn93j9ysa07","tag_id":"cisv2z1870018fgn9mehr4k32","_id":"cisv2z1a2003cfgn98zm2ge1z"},{"post_id":"cisv2z18o001ofgn93j9ysa07","tag_id":"cisv2z1a10039fgn9vf4pp3oc","_id":"cisv2z1a2003dfgn9eed5827q"},{"post_id":"cisv2z18r001rfgn9d9ytzgh4","tag_id":"cisv2z1a2003bfgn9lryrl3bv","_id":"cisv2z1a4003gfgn9rwqfp9ti"},{"post_id":"cisv2z18r001rfgn9d9ytzgh4","tag_id":"cisv2z1a3003efgn90oeqddzq","_id":"cisv2z1a4003hfgn9u670hw1i"},{"post_id":"cisv2z18x001vfgn9l5mzfvll","tag_id":"cisv2z1870018fgn9mehr4k32","_id":"cisv2z1a5003jfgn9apyd26ki"},{"post_id":"cisv2z18x001vfgn9l5mzfvll","tag_id":"cisv2z1a10039fgn9vf4pp3oc","_id":"cisv2z1a5003kfgn9qrvrea2w"},{"post_id":"cisv2z18z001yfgn9jxwpmd0k","tag_id":"cisv2z1a4003ifgn9d5ak5n7j","_id":"cisv2z1a5003mfgn91de8bn90"},{"post_id":"cisv2z1910020fgn9wzig6qli","tag_id":"cisv2z1a5003lfgn99msqwacv","_id":"cisv2z1a6003ofgn9ylsatgnx"},{"post_id":"cisv2z1940024fgn9x8ft1pxv","tag_id":"cisv2z1a6003nfgn9xn7zu622","_id":"cisv2z1a6003qfgn92l84ugol"},{"post_id":"cisv2z19h002hfgn9swj6g2f5","tag_id":"cisv2z1a6003pfgn945p4dn8e","_id":"cisv2z1a7003sfgn94w8utd8k"},{"post_id":"cisv2z19j002kfgn9gt7jy5tg","tag_id":"cisv2z1980028fgn9y87udkz0","_id":"cisv2z1a8003ufgn9pswa2ik0"},{"post_id":"cisv2z19j002kfgn9gt7jy5tg","tag_id":"cisv2z19v002sfgn95laqm55c","_id":"cisv2z1a8003vfgn9ga2nkly1"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","tag_id":"cisv2z14g000efgn9tmlk3i68","_id":"cisv2z1aa003xfgn9bl8jt3cr"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","tag_id":"cisv2z14k000hfgn99imz67el","_id":"cisv2z1ab003yfgn9ev75twpi"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","tag_id":"cisv2z1a8003tfgn9mak9falu","_id":"cisv2z1ab003zfgn94wrd6gvy"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","tag_id":"cisv2z14c000afgn95iroa457","_id":"cisv2z1ab0040fgn9f7zxucg7"},{"post_id":"cisv2z19m002ofgn9r9g21dsm","tag_id":"cisv2z1a3003efgn90oeqddzq","_id":"cisv2z1ac0041fgn96kyzl1b4"}],"Tag":[{"name":"Android","_id":"cisv2z13y0003fgn9xvgg4s2k"},{"name":"Golang","_id":"cisv2z1490006fgn9c5plw9f4"},{"name":"CoreOS","_id":"cisv2z14c000afgn95iroa457"},{"name":"golang","_id":"cisv2z14g000efgn9tmlk3i68"},{"name":"Docker","_id":"cisv2z14k000hfgn99imz67el"},{"name":"虾扯","_id":"cisv2z15q000nfgn98s1vot7e"},{"name":"DTV","_id":"cisv2z179000vfgn9kg2xio9w"},{"name":"CAS","_id":"cisv2z17t0011fgn9cmv6k1al"},{"name":"vpn","_id":"cisv2z1870018fgn9mehr4k32"},{"name":"vps","_id":"cisv2z18e001ffgn9dr6srs4x"},{"name":"Markdown","_id":"cisv2z18n001mfgn9x411yl5k"},{"name":"etcd","_id":"cisv2z18x001ufgn969izrf9c"},{"name":"http2","_id":"cisv2z1930021fgn90zrdic7s"},{"name":"mqtt","_id":"cisv2z1980028fgn9y87udkz0"},{"name":"cluster","_id":"cisv2z19h002ffgn9acw2ku04"},{"name":"mosquitto","_id":"cisv2z19v002sfgn95laqm55c"},{"name":"mstar","_id":"cisv2z19x002yfgn9i1ns0g3d"},{"name":"supernova","_id":"cisv2z19y0033fgn9dk647amu"},{"name":"podcast","_id":"cisv2z19z0036fgn95mz3iljg"},{"name":"shadowsocks","_id":"cisv2z1a10039fgn9vf4pp3oc"},{"name":"realtek","_id":"cisv2z1a2003bfgn9lryrl3bv"},{"name":"linux","_id":"cisv2z1a3003efgn90oeqddzq"},{"name":"DVB","_id":"cisv2z1a4003ifgn9d5ak5n7j"},{"name":"docker","_id":"cisv2z1a5003lfgn99msqwacv"},{"name":"zookeeper","_id":"cisv2z1a6003nfgn9xn7zu622"},{"name":"hexo","_id":"cisv2z1a6003pfgn945p4dn8e"},{"name":"Alpine","_id":"cisv2z1a8003tfgn9mak9falu"}]}}
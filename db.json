{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"20038353db532b4c40625419d396da7359f89cbe","modified":1468496789095},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1468496789095},{"_id":"themes/next/.javascript_ignore","hash":"beb0b95736650284ceb712a162cc033847a83cd3","modified":1468496789110},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1468496789110},{"_id":"source/404.html","hash":"d9c9db5465183d9bb87d3b395bfb06aa998d3d80","modified":1468499696437},{"_id":"themes/next/.gitignore","hash":"80710b94ff2f6c013859ebffffe90f9295fc94ed","modified":1468496789110},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1468496789126},{"_id":"themes/next/_config.yml","hash":"acddd743440deae21fa20226927240d0932439a9","modified":1468577829264},{"_id":"themes/next/gulpfile.coffee","hash":"4e8c1082fa82e383494ff5b5963b7936d9c7bb2e","modified":1468496789142},{"_id":"themes/next/bower.json","hash":"da39b00fcdf2e7a42af412de0a4d3617cc6d7084","modified":1468496789126},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1468496789110},{"_id":"themes/next/package.json","hash":"95eaba1607544965e432d56406bae391dd11bcbb","modified":1468496789580},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1468496789126},{"_id":"source/_posts/Golang-Docker.md","hash":"9aae329cd691c5de656d934d45c87bd56a770a7e","modified":1469005942192},{"_id":"source/_posts/Hello World.md","hash":"39ecd7fb649fc2c52c53b8db75a7b25a80c9a83d","modified":1468498703679},{"_id":"source/_posts/Markdown编辑器.md","hash":"3706be4ffed5413fc8bf352d0b33f7e9b84fd58b","modified":1468498726291},{"_id":"source/_posts/学习Markdown.md","hash":"48e0537b7ed9c9256f0091e88c7c2c328def24d5","modified":1468498818698},{"_id":"source/_posts/realtek-TV-RPC.md","hash":"c57623f6b032a914f79eca71da961a5e5cae5e0f","modified":1468910656144},{"_id":"source/_posts/mosquitto-bridge-桥接设置.md","hash":"e275e67d83d151147330d67462f37491db987d77","modified":1468498745394},{"_id":"source/_posts/当了一天的翻译机器.md","hash":"47235cecac8f24becbb79f70541e0d7a1550fb69","modified":1468565139593},{"_id":"source/_posts/推荐款不错的hexo主题.md","hash":"0cd66482399c47d12b5cc8207e7b1d16e7a146fe","modified":1468575650101},{"_id":"source/_posts/学习Docker好榜样.md","hash":"93d6c8962da47c7fbc200b3544c687aa47b5522b","modified":1468498806398},{"_id":"source/_posts/继续mqtt.md","hash":"9dafc2f5cdcbda87ff51ca597437666072aa0a8d","modified":1468498795004},{"_id":"source/about/index.md","hash":"b478d252c9a94fe31ae892dff5aaf2b8ff5b8e03","modified":1468805202070},{"_id":"source/categories/index.md","hash":"2b55adfec5edb664d6be3a7cc6c68dd8f29098b8","modified":1468498970244},{"_id":"source/tags/index.md","hash":"60a35997fd25bb151374922b24949537d8a5358b","modified":1468498888936},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1468496789110},{"_id":"source/_posts/都快忘了这个blog了.md","hash":"3801a1ad2d7ce6553fb45e171f41f407fe168df5","modified":1468498770113},{"_id":"source/_posts/重启github-blog.md","hash":"1c5780b569a6640529ed9d8b2dc2c3339839db3c","modified":1468498831912},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1468496789110},{"_id":"themes/next/.git/config","hash":"340cff4364d9733a32042fdb93097c334a781c93","modified":1468496789079},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1468496789079},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1468496696586},{"_id":"themes/next/.git/packed-refs","hash":"6111aa948e4d9e08e4a4fc84faa6bcde689e194b","modified":1468496789058},{"_id":"themes/next/languages/de.yml","hash":"4c3ffeb0d214c807a226dd98214958cb5483df1c","modified":1468496789142},{"_id":"themes/next/languages/default.yml","hash":"d2f6784b9c6567b64e58736e36025dbf96d863d4","modified":1468496789142},{"_id":"themes/next/.git/index","hash":"346498b501e22e52563c44f28809019fefc3a80b","modified":1468496790600},{"_id":"themes/next/languages/en.yml","hash":"df81ab6b1cf3c88ed053d3766381cd12eb659fe3","modified":1468496789142},{"_id":"themes/next/languages/id.yml","hash":"19537c8bae42c4c2e7d06a64537e8dfd503b7e19","modified":1468496789157},{"_id":"themes/next/languages/fr-FR.yml","hash":"d8a40fe025fad6f42df0cf16d4be2d513769b062","modified":1468496789142},{"_id":"themes/next/languages/pt-BR.yml","hash":"81498b783372f11b2149bd2b1731e78432760a0e","modified":1468496789157},{"_id":"themes/next/languages/pt.yml","hash":"4c64594f477905d5d2d9ca2422f03175b7b0c617","modified":1468496789157},{"_id":"themes/next/languages/ja.yml","hash":"e594aa42a33c489e4a65065659a01bb76c3c0cb5","modified":1468496789157},{"_id":"themes/next/languages/zh-hk.yml","hash":"88e603eb0f3fd25c35bb37bd30372fd77bba7c46","modified":1468496789176},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1468496789580},{"_id":"themes/next/languages/zh-Hans.yml","hash":"570a176b61fcd522eef1eae642cd32bd20769bba","modified":1468578435723},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1468496790585},{"_id":"themes/next/languages/ru.yml","hash":"c3aedb94decf05a301662afc3398ab563dd9995a","modified":1468496789157},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1468496790585},{"_id":"themes/next/layout/_layout.swig","hash":"1138b849e1240249480849cc2b6c6d09b28207a5","modified":1468496789179},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1468496790600},{"_id":"themes/next/languages/zh-tw.yml","hash":"04479b419c72b71fd34046f3fc33ebda4fe8de84","modified":1468496789179},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1468496789574},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1468496789527},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1468496789558},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1468496789580},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1468496789580},{"_id":"themes/next/layout/page.swig","hash":"a91e3fd7aef26e8a02e339e3372801c517f400cf","modified":1468496789577},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496790059},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1468496696692},{"_id":"themes/next/.git/logs/HEAD","hash":"6d2f16a725c7188d17f6bc43120797fd41e79772","modified":1468496789079},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1468496696590},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1468496696639},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1468496696649},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1468496696685},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1468496696663},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1468496696635},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1468496696687},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1468496696689},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1468496696672},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1468496789580},{"_id":"themes/next/scripts/tags/full-image.js","hash":"86194a05a8c6499de0b2aaa525d6de135778c0ae","modified":1468496789596},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1468496789596},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1468496790059},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1468496790059},{"_id":"themes/next/source/images/avatar.png","hash":"3a1f905931d85fe13a8fb28175ba88280f4097a7","modified":1468908813614},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1468496790059},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1468496790077},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1468496790082},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1468496790081},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1468496790097},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468496790097},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1468496790097},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1468496790082},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1468496790097},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1468496790082},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1468496790097},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1468496790097},{"_id":"themes/next/layout/_macro/post.swig","hash":"843389ec3cb4c2baa6a6a2bb916f803c89ca723b","modified":1468496789211},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1468496789211},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1468496789211},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9fc9f89c169439d7584197930359b758eb198a1c","modified":1468496789211},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c5db707b46eac6a5df1d2a77f8556945a66fd181","modified":1468496789326},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1468496789326},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1468496789326},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1468496789226},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1468496789226},{"_id":"themes/next/layout/_partials/footer.swig","hash":"27669118b957e8a39d843b63dddf561c9d62b336","modified":1468496789242},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5d84f3938e99f1908a6a1d44dd530740625f0188","modified":1468496789226},{"_id":"themes/next/layout/_partials/head.swig","hash":"881abebed3a7fa71827365b0ba0e84ec525eeb7f","modified":1468496789242},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1468496789527},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496789935},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496789935},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496789950},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496790043},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496790059},{"_id":"themes/next/layout/_partials/search.swig","hash":"95b55fe35f2d2c22f2cc055d4379b5435314c7ec","modified":1468496789257},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1468496789257},{"_id":"themes/next/layout/_partials/header.swig","hash":"c0697644817f1570093de9f17ea096295da8c5f1","modified":1468496789242},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496789342},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1468496789342},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1468496789935},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1468496789935},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1468496789950},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1468496790043},{"_id":"themes/next/source/css/_variables/base.styl","hash":"a7ae72e846393493385275d934eaa78534d9834c","modified":1468496790059},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1468496790182},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"b8e3663996b39590509d843f674360872b0242ac","modified":1468496790043},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1468496790245},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1468496790182},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1468496790260},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1468496790260},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1468496790382},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1468496790260},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1468496790498},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1468496790498},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1468496790545},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1468496790545},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1468496790530},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1468496790429},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1468496790461},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1468496790429},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1468496790479},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1468496790483},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1468496790461},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1468496790129},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1468496790129},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1468496790144},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1468496790113},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1468496790144},{"_id":"themes/next/source/js/src/utils.js","hash":"418d09eb4df5dcc5e8d13d7f6245b1888200b51c","modified":1468496790182},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1468496790298},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1468496790298},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1468496790177},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"ed80b43dbc7e3009b2f436741b9796df8eb3be02","modified":1468496790313},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1468496790313},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1468496789342},{"_id":"themes/next/.git/refs/heads/master","hash":"9285ce3fc15a941a32475a0fc4c1404f614b8105","modified":1468496789079},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1468496789342},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"91c5353fcb94cc3b3f265b06ad2341734bc4c826","modified":1468496789342},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"8ba01f1ac07fbca62a4b00f5a0a3a506122c1530","modified":1468496789411},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"bb093f2ac1f1305069d873a7941324c8e0de3135","modified":1468496790298},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"4a5c6df1579a4ca72ed17f7dbd6d16a509aa7dc8","modified":1468496789511},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1468496789495},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1468496789527},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f6b46096208512b4d8680c024fcb68f03ceab008","modified":1468496789511},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1468496789257},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1468496789242},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1468496789257},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"bf8e9223a40748b2e3ef77d753a8e1dbbce8095e","modified":1468496789276},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1468496789310},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"3fdde03f45a80f7a85097a40b40358adde618fc7","modified":1468496789310},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1468496790414},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1468496789326},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1468496789257},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"6d2f16a725c7188d17f6bc43120797fd41e79772","modified":1468496789079},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1468496789902},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1468496789892},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1468496789883},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1468496789919},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1468496789611},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1468496789611},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1468496789611},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1468496789611},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1468496789680},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1468496789781},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"124b540f059fd1ed13514362007cfc70355278c6","modified":1468496790012},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1468496789919},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1468496790012},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1468496790012},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"13af2fb21fabfc4df4b577ce5363e13d03daff71","modified":1468496790012},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1468496790012},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1468496789971},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1468496789950},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1468496789968},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1468496789974},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1468496789904},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1468496789997},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1468496789997},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1468496789997},{"_id":"themes/next/.git/objects/pack/pack-f953df4feff31e8efa9e0e06d699c6874617714d.idx","hash":"07e3e6ee14c75f57812aa3c09f49181b8ee8b009","modified":1468496788957},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1468496790028},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1468496790028},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1468496790028},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1468496790043},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1468496790028},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1468496790043},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468496790182},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1468496790282},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2182a6da3434a6fd4d03ab1592c645d3d3c88500","modified":1468496790028},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468496790182},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468496790182},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1468496790298},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468496790182},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468496790182},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468496790198},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1468496790483},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1468496790229},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1468496790229},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"a9d064d600ee35acd66508167e1ac8c6cfdbdcd8","modified":1468496790160},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"811432ad1e2d6c1f6da9a63fd919bf2a02b71dd9","modified":1468496790313},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1468496790313},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1468496790498},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1468496789074},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1468496790245},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"4c2c5f5f6cc86d775a44b944661e038b7be98149","modified":1468496790329},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"f8b6a3017ab79057ce99f1ccb512193d67f4a35f","modified":1468496789426},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"0a2f48971d86ea72e1a8fd1d8bbf2b7d423666b2","modified":1468496789458},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1468496790382},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1468496789357},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"3931f9c3bac3970a3f54c9d0072ae4c950aa176c","modified":1468496789357},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1468496789375},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1468496789357},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1468496790514},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"ae5b8597603d4e42ee66ed121544e7b1c644767e","modified":1468496789357},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1468496789411},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1468496790354},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1468496790329},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1468496790378},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"6d2f16a725c7188d17f6bc43120797fd41e79772","modified":1468496789079},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1468496789627},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1468496789627},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1468496789627},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1468496789627},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1468496789611},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"70ec8d38d2b3ee1906793d1dcb68032adfa65f03","modified":1468496789643},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1468496789627},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1468496789678},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"b8f9c95702e87fd0b170ab586c82c9718a245f8a","modified":1468496789680},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1468496789680},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"a45f5fce643eec4e1b927165229d560364bcace1","modified":1468496789680},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"12e366f04497e3f44388fd40111a03e02f7c26af","modified":1468496789658},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1468496789696},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1468496789696},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"ca20affaeaf33c0904cb6356864fc6b78e95f447","modified":1468496789696},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1468496789712},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"929fac3a505bacbce6ba63009fd15851e2a8669d","modified":1468496789712},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1468496789674},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1468496789696},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1468496789712},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1468496789712},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1468496789712},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1468496789727},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1468496789727},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1468496789781},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1468496789781},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1468496789796},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"a83f493e494f5c73fab8f6f5b686ef1670490095","modified":1468496789796},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1468496789758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1468496789758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1468496789758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1468496789758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1468496789758},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1468496789776},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1468496789781},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1468496789781},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1468496789780},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1468496789812},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1468496789827},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1468496789843},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1468496790012},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"dcb4548d07cbb38b645b1753cf3ee7157e16921a","modified":1468496789859},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1468496790012},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1468496789843},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7bd182d918f3117335a5ee87a1b544e6d2b54d7d","modified":1468496789859},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1468496789997},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1468496790198},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1468496790198},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1468496790213},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1468496790213},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1468496790198},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1468496790372},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1468496790213},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"f346b8b3df147e4059e1a7d66c52c9a6e1cec3e8","modified":1468496790367},{"_id":"themes/next/.git/objects/pack/pack-f953df4feff31e8efa9e0e06d699c6874617714d.pack","hash":"ea88d4dfc3dbae4f5aa693d457382352ee5f229b","modified":1468496789011}],"Category":[{"name":"study","_id":"ciquhut96000400n9sm75hppm"},{"name":"life","_id":"ciquhut9a000900n9245f0wp1"},{"name":"work","_id":"ciquhut9u000l00n99mwger5i"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","date":"2016-07-14T12:34:56.437Z","updated":"2016-07-14T12:34:56.437Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"ciquhurix000000n9zqc1qf7w","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"your site url \" homepagename=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"http://www.qq.com/404/search_children.js\"\n        charset=\"utf-8\" homePageUrl=\"your site url \"\n        homePageName=\"回到我的主页\">\n</script>\n\n</body>\n</html>\n"},{"title":"about","date":"2016-07-18T01:26:42.000Z","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-07-18 09:26:42\n---\n","updated":"2016-07-18T01:26:42.070Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciquhutby001g00n9spdgj4ej","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-07-14T12:22:04.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-14 20:22:04\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-07-14T12:22:50.244Z","path":"categories/index.html","layout":"page","_id":"ciquhutby001i00n9juw0sl6x","content":"","excerpt":"","more":""},{"title":"标签","date":"2016-07-14T12:13:35.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2016-07-14 20:13:35\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-07-14T12:21:28.936Z","path":"tags/index.html","layout":"page","_id":"ciquhutcd001l00n9tfo547fv","content":"","excerpt":"","more":""}],"Post":[{"title":"Golang@Docker","date":"2016-07-20T05:55:14.000Z","_content":"\n## 学习资料\n前几天花点时间沉下心来学习了下[Docker](https://www.docker.com/)。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在[docker hub](https://hub.docker.com/)上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.5GB了。所以以就找了个mini型的Linux发行版本[Alpine Linux](http://alpinelinux.org/)，做了个基于Alpine的镜像。其中golang的版本是1.6.2。\n- docker hub上的下载页面地址在[**这里**](https://hub.docker.com/r/gcoder/golang/)。（由于docker hub在墙外，所以速度很慢）\n- aliyun上的下载页面地址在[**这里**](https://dev.aliyun.com/detail.html?repoId=9014)。\n\n主要的参考资料来自于gitbook上的一本书[《Docker--从入书到实战》](https://www.gitbook.com/book/yeasy/docker_practice/details)，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。\n![](https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1)\n\nDocker深入一些的概念和原理来自于[酷壳](http://coolshell.cn/?s=docker)的文章。相对来说，[酷壳](http://coolshell.cn/?s=docker)的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。\n![](http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png)\n\n<!-- more -->\n\n## 简单过程\n学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：\n1. 下载Alipne文件系统包。\n2. 将Alipne文件系统包导入Docker镜像\n3. 运行Docker镜像安装golang环境\n4. 将已经安装好golang环境的Docker镜像导出成新的镜像。\n\n其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。\n\n下面，我们来实战一下。\n\n## 实战\n\n### 下载Alpine镜像\n首先，从docker hub上下载官方的[Alpine镜像](https://hub.docker.com/_/alpine/)。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine\nUsing default tag: latest\nlatest: Pulling from library/alpine\nDigest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a\nStatus: Downloaded newer image for alpine:latest\n9527@ubuntu:~/Docker/alpine$\n```\n\n现在，我们来看一下是不是已经下载下来了。用docker images指令\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\nubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB\nubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB\nalpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB\n9527@ubuntu:~/Docker/alpine$\n```\n看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。\n","source":"_posts/Golang-Docker.md","raw":"---\ntitle: Golang@Docker\ndate: 2016-07-20 13:55:14\ncategories:\n - study\ntags:\n - golang\n - Docker\n---\n\n## 学习资料\n前几天花点时间沉下心来学习了下[Docker](https://www.docker.com/)。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在[docker hub](https://hub.docker.com/)上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.5GB了。所以以就找了个mini型的Linux发行版本[Alpine Linux](http://alpinelinux.org/)，做了个基于Alpine的镜像。其中golang的版本是1.6.2。\n- docker hub上的下载页面地址在[**这里**](https://hub.docker.com/r/gcoder/golang/)。（由于docker hub在墙外，所以速度很慢）\n- aliyun上的下载页面地址在[**这里**](https://dev.aliyun.com/detail.html?repoId=9014)。\n\n主要的参考资料来自于gitbook上的一本书[《Docker--从入书到实战》](https://www.gitbook.com/book/yeasy/docker_practice/details)，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。\n![](https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1)\n\nDocker深入一些的概念和原理来自于[酷壳](http://coolshell.cn/?s=docker)的文章。相对来说，[酷壳](http://coolshell.cn/?s=docker)的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。\n![](http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png)\n\n<!-- more -->\n\n## 简单过程\n学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：\n1. 下载Alipne文件系统包。\n2. 将Alipne文件系统包导入Docker镜像\n3. 运行Docker镜像安装golang环境\n4. 将已经安装好golang环境的Docker镜像导出成新的镜像。\n\n其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。\n\n下面，我们来实战一下。\n\n## 实战\n\n### 下载Alpine镜像\n首先，从docker hub上下载官方的[Alpine镜像](https://hub.docker.com/_/alpine/)。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine\nUsing default tag: latest\nlatest: Pulling from library/alpine\nDigest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a\nStatus: Downloaded newer image for alpine:latest\n9527@ubuntu:~/Docker/alpine$\n```\n\n现在，我们来看一下是不是已经下载下来了。用docker images指令\n```shell\n9527@ubuntu:~/Docker/alpine$ sudo docker images \nREPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE\ngolang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB\nubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB\nubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB\nalpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB\n9527@ubuntu:~/Docker/alpine$\n```\n看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。\n","slug":"Golang-Docker","published":1,"updated":"2016-07-20T09:12:22.192Z","_id":"ciquhut8m000100n96b71c0f8","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><p>前几天花点时间沉下心来学习了下<a href=\"https://www.docker.com/\" target=\"_blank\" rel=\"external\">Docker</a>。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在<a href=\"https://hub.docker.com/\" target=\"_blank\" rel=\"external\">docker hub</a>上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.5GB了。所以以就找了个mini型的Linux发行版本<a href=\"http://alpinelinux.org/\" target=\"_blank\" rel=\"external\">Alpine Linux</a>，做了个基于Alpine的镜像。其中golang的版本是1.6.2。</p>\n<ul>\n<li>docker hub上的下载页面地址在<a href=\"https://hub.docker.com/r/gcoder/golang/\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a>。（由于docker hub在墙外，所以速度很慢）</li>\n<li>aliyun上的下载页面地址在<a href=\"https://dev.aliyun.com/detail.html?repoId=9014\" target=\"_blank\" rel=\"external\"><strong>这里</strong></a>。</li>\n</ul>\n<p>主要的参考资料来自于gitbook上的一本书<a href=\"https://www.gitbook.com/book/yeasy/docker_practice/details\" target=\"_blank\" rel=\"external\">《Docker–从入书到实战》</a>，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。<br><img src=\"https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1\" alt=\"\"></p>\n<p>Docker深入一些的概念和原理来自于<a href=\"http://coolshell.cn/?s=docker\" target=\"_blank\" rel=\"external\">酷壳</a>的文章。相对来说，<a href=\"http://coolshell.cn/?s=docker\" target=\"_blank\" rel=\"external\">酷壳</a>的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。<br><img src=\"http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png\" alt=\"\"></p>\n<a id=\"more\"></a>\n<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><p>学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：</p>\n<ol>\n<li>下载Alipne文件系统包。</li>\n<li>将Alipne文件系统包导入Docker镜像</li>\n<li>运行Docker镜像安装golang环境</li>\n<li>将已经安装好golang环境的Docker镜像导出成新的镜像。</li>\n</ol>\n<p>其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。</p>\n<p>下面，我们来实战一下。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"下载Alpine镜像\"><a href=\"#下载Alpine镜像\" class=\"headerlink\" title=\"下载Alpine镜像\"></a>下载Alpine镜像</h3><p>首先，从docker hub上下载官方的<a href=\"https://hub.docker.com/_/alpine/\" target=\"_blank\" rel=\"external\">Alpine镜像</a>。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine</div><div class=\"line\">Using default tag: latest</div><div class=\"line\">latest: Pulling from library/alpine</div><div class=\"line\">Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a</div><div class=\"line\">Status: Downloaded newer image for alpine:latest</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>现在，我们来看一下是不是已经下载下来了。用docker images指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div><div class=\"line\">ubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB</div><div class=\"line\">ubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB</div><div class=\"line\">alpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。</p>\n","excerpt":"<h2 id=\"学习资料\"><a href=\"#学习资料\" class=\"headerlink\" title=\"学习资料\"></a>学习资料</h2><p>前几天花点时间沉下心来学习了下<a href=\"https://www.docker.com/\">Docker</a>。觉得这东西真不错。就赶紧把golang在Docker上应用了一把。虽然在<a href=\"https://hub.docker.com/\">docker hub</a>上已经有很多golang的镜像了，但是基本上都是基于ubuntu的，而ubuntu体积实在太大。即使仅用ubuntu的纯粹文件系统做出来的镜像都已经是1.5GB了。所以以就找了个mini型的Linux发行版本<a href=\"http://alpinelinux.org/\">Alpine Linux</a>，做了个基于Alpine的镜像。其中golang的版本是1.6.2。</p>\n<ul>\n<li>docker hub上的下载页面地址在<a href=\"https://hub.docker.com/r/gcoder/golang/\"><strong>这里</strong></a>。（由于docker hub在墙外，所以速度很慢）</li>\n<li>aliyun上的下载页面地址在<a href=\"https://dev.aliyun.com/detail.html?repoId=9014\"><strong>这里</strong></a>。</li>\n</ul>\n<p>主要的参考资料来自于gitbook上的一本书<a href=\"https://www.gitbook.com/book/yeasy/docker_practice/details\">《Docker–从入书到实战》</a>，这本书讲得挺浅显易懂的。所以也顺便推荐下这本书。<br><img src=\"https://ek8whxe.cloudimg.io/s/cdn/x/https://www.gitbook.com/content/book/yeasy/docker_practice/docker_primer.png?v=15.2.1\" alt=\"\"></p>\n<p>Docker深入一些的概念和原理来自于<a href=\"http://coolshell.cn/?s=docker\">酷壳</a>的文章。相对来说，<a href=\"http://coolshell.cn/?s=docker\">酷壳</a>的文章就要有比较深入的Linux知识才能真正看得懂了。不过慢慢啃还是能啃下去的。比如下面这张Docker分层原理图，我就得看一会儿才明白。<br><img src=\"http://coolshell.cn//wp-content/uploads/2015/08/docker-filesystems-busyboxrw.png\" alt=\"\"></p>","more":"<h2 id=\"简单过程\"><a href=\"#简单过程\" class=\"headerlink\" title=\"简单过程\"></a>简单过程</h2><p>学习的东西就以上这些。下面说下基本的构建过程，其实很简单，就4步：</p>\n<ol>\n<li>下载Alipne文件系统包。</li>\n<li>将Alipne文件系统包导入Docker镜像</li>\n<li>运行Docker镜像安装golang环境</li>\n<li>将已经安装好golang环境的Docker镜像导出成新的镜像。</li>\n</ol>\n<p>其中，第3、4步可以合并成一个步骤，就是直接写个Dockerfile(类似Makefile，用于指导Docker程序如何编译镜像的配置文件)，由Dockerfile自己编译出新的Docker镜像即可。</p>\n<p>下面，我们来实战一下。</p>\n<h2 id=\"实战\"><a href=\"#实战\" class=\"headerlink\" title=\"实战\"></a>实战</h2><h3 id=\"下载Alpine镜像\"><a href=\"#下载Alpine镜像\" class=\"headerlink\" title=\"下载Alpine镜像\"></a>下载Alpine镜像</h3><p>首先，从docker hub上下载官方的<a href=\"https://hub.docker.com/_/alpine/\">Alpine镜像</a>。下载命令如下：（当然，你也可以自己下载Alpine文件系统自己用Dockerfile编译制作）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker pull alpine</div><div class=\"line\">Using default tag: latest</div><div class=\"line\">latest: Pulling from library/alpine</div><div class=\"line\">Digest: sha256:3dcdb92d7432d56604d4545cbd324b14e647b313626d99b889d0626de158f73a</div><div class=\"line\">Status: Downloaded newer image for alpine:latest</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>现在，我们来看一下是不是已经下载下来了。用docker images指令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">9527@ubuntu:~/Docker/alpine$ sudo docker images </div><div class=\"line\">REPOSITORY                                 TAG                 IMAGE ID            CREATED             SIZE</div><div class=\"line\">golang                                     1.6.2               5101f182bc8c        6 days ago          192.1 MB</div><div class=\"line\">ubuntu64                                   golang              4590d859a6ff        6 days ago          1.055 GB</div><div class=\"line\">ubuntu64                                   16.04               19ce1c3d99ca        7 days ago          500.1 MB</div><div class=\"line\">alpine                                     latest              4e38e38c8ce0        3 weeks ago         4.799 MB</div><div class=\"line\">9527@ubuntu:~/Docker/alpine$</div></pre></td></tr></table></figure></p>\n<p>看一下，才不到4.8MB，好mini有木有？看看它楼上的ubuntu 16.04 x64的rootfs镜像，真是小几个数量级啊。怪不得Docker官方基础镜像要准备抛弃ubuntu，投入Alpine的怀抱了。</p>"},{"title":"我来了","date":"2015-05-12T08:58:49.000Z","_content":"[Markdown](http://zh.wikipedia.org/zh/Markdown)是个好东西，简洁及高效。\n用它贴张图试试：<font color=red>Bad Walt is watching you!</font>\n![](http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg)\n","source":"_posts/Hello World.md","raw":"title: \"我来了\"\ndate: 2015-05-12 16:58:49\ncategories:\n - life\ntags:\n - 虾扯\n---\n[Markdown](http://zh.wikipedia.org/zh/Markdown)是个好东西，简洁及高效。\n用它贴张图试试：<font color=red>Bad Walt is watching you!</font>\n![](http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg)\n","slug":"Hello World","published":1,"updated":"2016-07-14T12:18:23.679Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut90000200n9kdl93s9b","content":"<p><a href=\"http://zh.wikipedia.org/zh/Markdown\" target=\"_blank\" rel=\"external\">Markdown</a>是个好东西，简洁及高效。<br>用它贴张图试试：<font color=\"red\">Bad Walt is watching you!</font><br><img src=\"http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p><a href=\"http://zh.wikipedia.org/zh/Markdown\">Markdown</a>是个好东西，简洁及高效。<br>用它贴张图试试：<font color=red>Bad Walt is watching you!</font><br><img src=\"http://7xj33x.com1.z0.glb.clouddn.com/bad walt.jpg\" alt=\"\"></p>\n"},{"title":"Markdown编辑器","date":"2015-05-15T02:54:11.000Z","_content":"学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用[markdownpad](http://markdownpad.com/),方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？\n我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此[链接](http://code.csdn.net/news/2819623)。\n","source":"_posts/Markdown编辑器.md","raw":"title: \"Markdown编辑器\"\ndate: 2015-05-15 10:54:11\ncategories:\n - study\ntags:\n - Markdown\n---\n学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用[markdownpad](http://markdownpad.com/),方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？\n我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此[链接](http://code.csdn.net/news/2819623)。\n","slug":"Markdown编辑器","published":1,"updated":"2016-07-14T12:18:46.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut96000500n9r1f7ssdy","content":"<p>学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用<a href=\"http://markdownpad.com/\" target=\"_blank\" rel=\"external\">markdownpad</a>,方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？<br>我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此<a href=\"http://code.csdn.net/news/2819623\" target=\"_blank\" rel=\"external\">链接</a>。</p>\n","excerpt":"","more":"<p>学习Markdown过程，自然少不了Markdown的编辑器。在windows上推荐使用<a href=\"http://markdownpad.com/\">markdownpad</a>,方便，可实时预览。但是使用中发现没有自动插入段首空格的功能？<br>我个人暂时在用markdownpad，其它另外的markdown编辑器推荐可见此<a href=\"http://code.csdn.net/news/2819623\">链接</a>。</p>\n"},{"title":"学习Markdown","date":"2015-05-13T06:21:46.000Z","_content":"&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n&emsp;在网上找到了一组不错的学习资料，[WOW!ubuntu](http://wowubuntu.com/)站提供了一份简体中文的[Markdown语法说明](http://wowubuntu.com/markdown/)，以及[Markdown快速入门指南](http://wowubuntu.com/markdown/basic.html)，非常不错，推荐新手阅读。\n&emsp;拜读中。。。\n","source":"_posts/学习Markdown.md","raw":"title: \"学习Markdown\"\ndate: 2015-05-13 14:21:46\ncategories:\n - study\ntags:\n - Markdown\n---\n&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。\n&emsp;在网上找到了一组不错的学习资料，[WOW!ubuntu](http://wowubuntu.com/)站提供了一份简体中文的[Markdown语法说明](http://wowubuntu.com/markdown/)，以及[Markdown快速入门指南](http://wowubuntu.com/markdown/basic.html)，非常不错，推荐新手阅读。\n&emsp;拜读中。。。\n","slug":"学习Markdown","published":1,"updated":"2016-07-14T12:20:18.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9a000600n9vtchmqjw","content":"<p>&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>&emsp;在网上找到了一组不错的学习资料，<a href=\"http://wowubuntu.com/\" target=\"_blank\" rel=\"external\">WOW!ubuntu</a>站提供了一份简体中文的<a href=\"http://wowubuntu.com/markdown/\" target=\"_blank\" rel=\"external\">Markdown语法说明</a>，以及<a href=\"http://wowubuntu.com/markdown/basic.html\" target=\"_blank\" rel=\"external\">Markdown快速入门指南</a>，非常不错，推荐新手阅读。<br>&emsp;拜读中。。。</p>\n","excerpt":"","more":"<p>&emsp;Markdown 是一种轻量级的「标记语言」，是一种书写的格式。Markdown 的理念是，能让文档更容易读、写和随意改。Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>&emsp;在网上找到了一组不错的学习资料，<a href=\"http://wowubuntu.com/\">WOW!ubuntu</a>站提供了一份简体中文的<a href=\"http://wowubuntu.com/markdown/\">Markdown语法说明</a>，以及<a href=\"http://wowubuntu.com/markdown/basic.html\">Markdown快速入门指南</a>，非常不错，推荐新手阅读。<br>&emsp;拜读中。。。</p>\n"},{"title":"realtek TV RPC","date":"2016-07-15T06:50:37.000Z","_content":"## 接口\n\n1. RPC 客户端基类。\n```cpp\nclass RpcClient\n```\n\n2. RPC类的实体。每个实体代表一个函数调用。其成员`m_StrFuncName`是原始调用函数的函数名。`m_CallCtxMap`为其map组合。\n```cpp\nstruct RpcClient::CallContext\n```\n\n3. RPC回调类。\n```cpp\nclass RpcClient::CallbackHandler\n```\n\n<!-- more -->\n\n4. 数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给`IpcStreamer`传输。参见`RpcCommandType`结构体。\n```cpp\nclass RpcCommandMuxer* m_pCmdMuxer\n```\n\n5. 数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。\n```cpp\nclass RpcCommandDemuxer* m_pCmdDemuxer\n```\n\n6. 数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给`RpcCommandMuxer`及`RpcCommandDemuxer`序列化/反序列化数据。\n```cpp\nclass rtk::ipc::IpcStreamer* m_pStreamer\n```\n\n7. callback的map集合。\n```cpp\nclass CallbackMap m_CallbackMap\n```\n\n8. callback类。继承实现了一个`CommandProcessor`。其实类为`CallbackContext`。\n```cpp\nclass RpcClient::CallbackHandler* m_pCallbackHandler\n```\n\n9. 回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中`struct CallbackContext`结构即为当前的`class CommandProcessor`实类。\n```cpp\nclass CommandQueue<CallbackContext> m_CallbackCmdQue\n```\n\n10. 回调函数序列化的数据流结构体。其中`pData`指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过`RpcCommandDemuxer`反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。\n```cpp\nstruct CallbackContext\n```\n\n11. RPC客户端实例。\n```cpp\nclass RpcClient& m_RpcClient\n```\n\n---\n\n## 类体\n\n1. 指令流头部数据结构体。内结构顺序为：\n`RpcCommandHeader`+`RpcParamHeader1`+`data1`+`...`+`RpcParamHeaderN`+`dataN`。\n```cpp\nstruct RpcCommandHeader\n{\n    unsigned int iRpcCommandType; //RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)\n    unsigned int iId; //唯一ID，用于指示哪个命令。\n    unsigned int iTotalLen; //序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。\n    unsigned int iParamCounts; //数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。\n}\n```\n\n2. 数据流单元结构体。函数名及参数均用此结构体序列化。\n```cpp\nstruct RpcParamHeader\n{\n    unsigned int iRpcParamType; //RPC单元数据类型。参见 enum RpcParamType枚举类型。\n    unsigned int iRpcParamLen; //RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。\n};\n```\n\n3. RpcServer接口虚基类。\n```cpp\nclass IpcServer\n{\npublic: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。\n    virtual bool Start(const char* pStrServerName, void* pParam) = 0;\n    virtual bool Stop() = 0;\n    virtual bool RegisterObserver(IpcServerObserver* pObs) = 0;\n    virtual void UnregisterObserver(IpcServerObserver* pObs) = 0;\n    virtual const char* GetServerName() = 0;\n    virtual void* GetParameter() = 0;\n\npublic:\n    virtual ~IpcServer() { ; };\n};\n```\n\n4. 继承自`IpcServer`，RpcServer基础实现类。\n```cpp\nclass IpcServerBase: public IpcServer\n{\npublic: // 接口定义在IpcServer类中，这里是具体实现。\n    bool Start(const char* pStrServerName, void* pParam);\n    bool Stop();\n    bool RegisterObserver(IpcServerObserver* pObs);\n    void UnregisterObserver(IpcServerObserver* pObs);\n    const char* GetServerName();\n    void* GetParameter();\n\npublic:\n    IpcServerBase();\n    ~IpcServerBase();\n    IpcServerBase (const IpcServerBase &) {}\n    IpcServerBase &operator= (const IpcServerBase&) { return *this; }\n\nprotected: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。\n    virtual bool DoStart(const char* pStrServerName, void* pParam) = 0;\n    virtual bool DoStop() = 0;\n    virtual IpcStreamer* DoAccept() = 0;\n    virtual void FreeIpcStreamer(IpcStreamer* pStreamer) = 0;\n    virtual bool IsShutdownServer() = 0;\n\nprivate: // Used to notify observers\n    void NotifyOpened(const char* pStrServerName);\n    bool NotifyAccepted(IpcStreamer* pStreamer);\n    void NotifyClosed();\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n5. 继承自`IpcServerBase`，FIFO类型RpcServer主实现类。\n```cpp\nclass IpcServerPipeImpl: public IpcServerBase\n{\npublic:\n    IpcServerPipeImpl();\n    ~IpcServerPipeImpl();\n    IpcServerPipeImpl(const IpcServerPipeImpl &param) {}\n    IpcServerPipeImpl &operator = (const IpcServerPipeImpl&) { return *this; }\n\nprivate: //接口定义在 IpcServerBase 类中，这里是具体实现。\n    bool DoStart(const char* pStrServerName, void* pParam);\n    bool DoStop();\n    IpcStreamer* DoAccept();\n    void FreeIpcStreamer(IpcStreamer* pStreamer);\n    bool IsShutdownServer();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n6. IPC服务器端接口类。管理 RpcServer集合等map。\n```cpp\nclass IpcServerManager\n{\npublic:\n    enum\n    {\n        TIME_OUT_INFINITY = -1 //Time out infinity\n    };\n\npublic:\n    static IpcServerManager& GetInstance();\n    bool StartServer(const char* pStrServerName, int iIpcImplMode, void* pParam);\n    bool StopServer(const char* pStrServerName);\n    void StopAllServers();\n    void WaitForAllServerStop(int iTimeout);\n    bool RegisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n    void UnregisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n\nprivate:\n    IpcServerManager();\n    IpcServerManager(const IpcServerManager&);\n    IpcServerManager& operator=(const IpcServerManager&);\n    ~IpcServerManager();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n7. RPC服务端接口类。实际调用IpcServerManager类方法。\n```cpp\nclass RpcServer\n{\npublic:\n    RpcServer();\n    ~RpcServer();\n    bool StartServer(const char* pStrServerName, void* pParam);\n    bool StopServer();\n    const char* GetServerName() const;\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcServer(const RpcServer &);\n    RpcServer &operator=(const RpcServer &);\n};\n```\n\n8. RPC调用执行管理类。\n```cpp\nclass RpcExecutorManager\n{\npublic:\n    enum ErrCode\n    {\n        ERR_FAILED = -1,\n    };\npublic:\n    static RpcExecutorManager& GetInstance();\n    bool RegisterExecutor(RpcExecutor* pExecutor);\n    bool UnregisterExecutor(RpcExecutor* pExecutor);\n    int Execute(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  char* pBuffer, int iBufSize);\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcExecutorManager();\n    ~RpcExecutorManager();\n    RpcExecutorManager(const RpcExecutorManager&);\n    RpcExecutorManager& operator=(const RpcExecutorManager&);\n};\n```\n\n---\n\n## 原理及过程分析\n\n- ### RPC机制原理\n\n　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。\n　　\n　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的`IpcPipeImplHeader`数据，并根据`IpcPipeImplHeader`数据中的参数`iID`来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。\n　　\n　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的`iID`，此参数`iID`保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在`IpcPipeImplHeader`结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。\n　　\n　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入`IpcPipeImplHeader`数据来实现沟通。\n\n- ### RpcServer启动过程 \n\n　　构造RpcServer时，通过调用`IpcServerManager`接口类初始化来创建实例，并`StartServer`。而在`StartServer`方法中调用了`IpcServerPipeImpl`类构造函数来实例化 **IPC_PIPE** 型RpcServer对象，并`Start`服务。`IpcServerPipeImpl`接口类继承自`IpcServerBase`接口类，`Start`方法在`IpcServerBase`接口类中，而`Start`方法又通过虚接口调用了子类`IpcServerPipeImpl`类中的`DoStart`方法来创建FIFO，然后调用`IpcServerBase`接口类中的`StartAccetpClient`方法来启动接收RpcClient数据的服务。`IpcServerBase`接口类中的`PrivateImpl`成员类是继承自`CommandProcessor`类的对象，用于开始接收并通知streamer的接收数据。在`StartAccetpClient`方法中创建了一个`CommandQueue`类，通过调用此类的`AddCommand`方法并用 **ACCEPT_COMMAND** 参数（此参数目前不起任何作用）来创建一个等待指令的线程`Policy1Proc`。如果监测到有事件发生，此线程调用`IpcServerBase::PrivateImpl`这个 `CommandProcessor`对象中的`Execute`方法来执行。而`Execute`方法里又调用了`IpcServerPipeImpl`接口类中的`DoAccept`方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输`IpcPipeImplHeader`结构的数据。\n　　\n　　RpcServer接收到`IpcPipeImplHeader`结构的数据后，调用`CreateStreamerByCommand`方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并放到streamer类map中存储。其中，因为接收到的数据中有`iID`这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。\n\n- ### RpcClient启动过程\n\n　　与RpcServer类似，不赘述。\n\n- ### RpcClient与RpcServer交互过程\n\n　　RpcServer先启动，创建好监听RpcClient的FIFO。\n　　\n　　调用`IpcClientFactory`类创建实例对像，实际调用`IpcClientPipeImpl`类来构造RpcClient。并加入到`ClientList`vctor容器中。\n　　\n　　RpcClient构造后开始连接RpcServer(`IpcClientPipeImpl::Connect`)。先`open`打开RpcServer创建好的FIFO，并向FIFO`write`一个`IpcPipeImplHeader`结构体的数据后关闭FIFO。然后调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并`open`打开(`IpcStreamerPipeImpl::DoOpen`)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。\n\n- ### INVOKE远程调用执行过程\n\n　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序`push`，最后`push`函数名，最后`finish`。然后调用`RpcCommandMuxer`类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用`RpcCommandDemuxer`类反序列化数据。并调用`RpcExecutorManager`类里的方法来执行相关动作。\n　　\n　　其中`RpcExecutorManager`是一个专用于管理`RpcExecutor`类对象的管理器。同样的还有`IpcServerManager`。\n　　\n　　而`RpcExecutor`是真正执行函数调用的类。它被用于模块初始化时调用，通过`RegisterExecutor`/`UnregisterExecutor`方法注册/反注册到`RpcExecutorManager`类中的list中。它的`Execute`方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以`RpcCommandMuxer`类表示的数据。\n　　　　\n　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用`RpcCommandMuxer`序列化数据时，头部`RpcCommandHeader`结构体数据里面填充的`iRpcCommandType`参数数据不同。\n　　\n　　TvService模块初始化时调用`RpcExecutor`类来注册供RpcClient远程调用invoke的native函数集合，其成员`m_FuncMap`是一个`RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);`类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成`RpcCommandMuxer`流数据返回。\n　　\n> **例如:** `TvChannelApiExecutor`类。\n> \n```cpp\nclass PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),\n                   m_bFirstPlay(false)\n    {\n        m_FuncMap[\"TvAutoScanStart\"] = &PrivateImpl::TvAutoScanStart;\n        m_FuncMap[\"TvAutoScanStop\"] = &PrivateImpl::TvAutoScanStop;\n        m_FuncMap[\"TvAutoScanComplete\"] = &PrivateImpl::TvAutoScanComplete; \n        m_FuncMap[\"TvAutoScanStartWithRange\"] = &PrivateImpl::TvAutoScanStartWithRange;\n        m_FuncMap[\"TvAutoScanStopWithRange\"] = &PrivateImpl::TvAutoScanStopWithRange;\n        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &PrivateImpl::TvAutoScanCompleteWithRange;  \n        m_FuncMap[\"TvSeekScanStart\"] = &PrivateImpl::TvSeekScanStart;\n        m_FuncMap[\"TvSeekScanStop\"] = &PrivateImpl::TvSeekScanStop;\n        m_FuncMap[\"TvScanManualStart\"] = &PrivateImpl::TvScanManualStart;\n        m_FuncMap[\"TvScanManualStop\"] = &PrivateImpl::TvScanManualStop;\n        m_FuncMap[\"TvScanManualComplete\"] = &PrivateImpl::TvScanManualComplete;\n        m_FuncMap[\"TvScanInfo\"] = &PrivateImpl::TvScanInfo;\n        m_FuncMap[\"IsTvScanning\"] = &PrivateImpl::IsTvScanning;\n        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &PrivateImpl::GetAtvSeqScanStartFreq;\n        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &PrivateImpl::GetAtvSeqScanEndFreq;\n        m_FuncMap[\"SetDtvScanType\"] = &PrivateImpl::SetDtvScanType;\n        m_FuncMap[\"GetDtvScanType\"] = &PrivateImpl::GetDtvScanType;\n        m_FuncMap[\"PlayNextChannel\"] = &PrivateImpl::PlayNextChannel;\n        m_FuncMap[\"PlayPrevChannel\"] = &PrivateImpl::PlayPrevChannel;\n        m_FuncMap[\"PlayFirstChannel\"] = &PrivateImpl::PlayFirstChannel;\n        m_FuncMap[\"PlayHistoryChannel\"] = &PrivateImpl::PlayHistoryChannel;\n        m_FuncMap[\"DumpTvChannelList\"] = &PrivateImpl::DumpTvChannelList;\n        m_FuncMap[\"SetDefaultFilter\"] = &PrivateImpl::SetDefaultFilter;\n        m_FuncMap[\"GetDefaultFilter\"] = &PrivateImpl::GetDefaultFilter;\n        m_FuncMap[\"GetCurChannel\"] = &PrivateImpl::GetCurChannel;\n        m_FuncMap[\"GetChannelInfoByIndex\"] = &PrivateImpl::GetChannelInfoByIndex;\n        m_FuncMap[\"GetChInfoArray\"] = &PrivateImpl::GetChInfoArray;\n        m_FuncMap[\"GetChannelBandwidth\"] = &PrivateImpl::GetChannelBandwidth;\n        m_FuncMap[\"GetChannelName\"] = &PrivateImpl::GetChannelName;\n        m_FuncMap[\"GetChannelCount\"] = &PrivateImpl::GetChannelCount;\n        m_FuncMap[\"SortChannel\"] = &PrivateImpl::SortChannel;\n        m_FuncMap[\"SaveChannel\"] = &PrivateImpl::SaveChannel;\n        m_FuncMap[\"PlayChannelByIndex\"] = &PrivateImpl::PlayChannelByIndex;\n        m_FuncMap[\"PlayChannelByNum\"] = &PrivateImpl::PlayChannelByNum;\n        m_FuncMap[\"PlayChannel\"] = &PrivateImpl::PlayChannel;       \n        m_FuncMap[\"PlayChannelByLCN\"] = &PrivateImpl::PlayChannelByLCN;\n        m_FuncMap[\"PlayFirstChannelInFreq\"] = &PrivateImpl::PlayFirstChannelInFreq;\n        m_FuncMap[\"PlayChannelByChnumFreq\"] = &PrivateImpl::PlayChannelByChnumFreq;\n        m_FuncMap[\"SwapChannelByIdxEx\"] = &PrivateImpl::SwapChannelByIdxEx;\n        m_FuncMap[\"SwapChannelByNumEx\"] = &PrivateImpl::SwapChannelByNumEx;\n        m_FuncMap[\"ReloadLastPlayedSource\"] = &PrivateImpl::ReloadLastPlayedSource;\n        m_FuncMap[\"SetCurChannelSkipped\"] = &PrivateImpl::SetCurChannelSkipped;\n        m_FuncMap[\"SetCurAtvSoundStd\"] = &PrivateImpl::SetCurAtvSoundStd;\n        m_FuncMap[\"FineTuneCurFrequency\"] = &PrivateImpl::FineTuneCurFrequency;\n        m_FuncMap[\"SetCurChAudioCompensation\"] = &PrivateImpl::SetCurChAudioCompensation;\n        m_FuncMap[\"SetSource\"] = &PrivateImpl::SetSource;\n        m_FuncMap[\"SetBootSource\"] = &PrivateImpl::SetBootSource;\n        m_FuncMap[\"GetCurChannelSkipped\"] = &PrivateImpl::GetCurChannelSkipped;\n        m_FuncMap[\"GetCurAtvSoundStd\"] = &PrivateImpl::GetCurAtvSoundStd;\n        m_FuncMap[\"GetCurChAudioCompensation\"] = &PrivateImpl::GetCurChAudioCompensation;\n        m_FuncMap[\"GetSourceList\"] = &PrivateImpl::GetSourceList;\n        m_FuncMap[\"GetSourceListCnt\"] = &PrivateImpl::GetSourceListCnt;\n        m_FuncMap[\"GetCurSourceType\"] = &PrivateImpl::GetCurSourceType;\n        m_FuncMap[\"GetBootSource\"] = &PrivateImpl::GetBootSource;\n#if defined (TVSERVER_IDTV)\n        m_FuncMap[\"GetIDTVSubSource\"] = &PrivateImpl::GetIDTVSubSource;\n#endif\n        m_FuncMap[\"GetCurTvType\"] = &PrivateImpl::GetCurTvType; \n        m_FuncMap[\"GetChannelNameList\"] = &PrivateImpl::GetChannelNameList;    \n        m_FuncMap[\"GetCurrentProgramInfo\"] = &PrivateImpl::GetCurrentProgramInfo;                   \n        m_FuncMap[\"GetCurrentProgramDescription\"] = &PrivateImpl::GetCurrentProgramDescription;                         \n        m_FuncMap[\"GetCurrentProgramRating\"] = &PrivateImpl::GetCurrentProgramRating;   \n        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &PrivateImpl::HasCurrentProgramWithSubtitle;           \n        m_FuncMap[\"GetCurAtvSoundSelect\"] = &PrivateImpl::GetCurAtvSoundSelect;\n        m_FuncMap[\"GetCurDtvAudioPID\"]=&PrivateImpl::GetCurDtvAudioPID;\n        m_FuncMap[\"GetCurDtvVideoPID\"]=&PrivateImpl::GetCurDtvVideoPID;\n        m_FuncMap[\"GetCurDtvTSID\"]=&PrivateImpl::GetCurDtvTSID;\n        m_FuncMap[\"GetCurDtvServiceID\"]=&PrivateImpl::GetCurDtvServiceID;\n        m_FuncMap[\"GetCurDtvPCR\"]=&PrivateImpl::GetCurDtvPCR;\n        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &PrivateImpl::SetCurDtvSoundSelectByIndex;\n        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&PrivateImpl::GetCurDtvSoundSelectIndex;     \n        m_FuncMap[\"GetCurrentAudioLang\"] = &PrivateImpl::GetCurrentAudioLang;\n        m_FuncMap[\"GetCurInputInfo\"] = &PrivateImpl::GetCurInputInfo;\n        m_FuncMap[\"GetCurrentSetting_tv\"] = &PrivateImpl::GetCurrentSetting_tv;\n        m_FuncMap[\"GetChannelFreqCount\"] = &PrivateImpl::GetChannelFreqCount;\n        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &PrivateImpl::GetChannelFreqByTableIndex;   \n        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &PrivateImpl::GetChannelchannelNumByTableIndex;      \n        m_FuncMap[\"GetChannelCountByFreq\"] = &PrivateImpl::GetChannelCountByFreq;     \n        m_FuncMap[\"GetCurChannelIndex\"] = &PrivateImpl::GetCurChannelIndex;\n        m_FuncMap[\"PlayNumberChannel\"] = &PrivateImpl::PlayNumberChannel;\n        m_FuncMap[\"GetChannelListChannelCount\"] = &PrivateImpl::GetChannelListChannelCount;\n        m_FuncMap[\"GetChannelDataList\"] = &PrivateImpl::GetChannelDataList;\n        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &PrivateImpl::GetCurDtvSoundSelectList;\n        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &PrivateImpl::GetCurDtvSoundSelectCount;\n        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &PrivateImpl::GetCurAtvSoundSelectList;\n        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &PrivateImpl::GetCurAtvSoundSelectCount;\n        m_FuncMap[\"SetCaptionMode\"] = &PrivateImpl::SetCaptionMode;\n        m_FuncMap[\"GetCaptionMode\"] = &PrivateImpl::GetCaptionMode;\n        m_FuncMap[\"SetAnalogCaption\"] = &PrivateImpl::SetAnalogCaption;\n        m_FuncMap[\"GetAnalogCaption\"] = &PrivateImpl::GetAnalogCaption;\n        m_FuncMap[\"SetDigitalCaption\"] = &PrivateImpl::SetDigitalCaption;\n        m_FuncMap[\"SetChannelFav\"] = &PrivateImpl::SetChannelFav;\n        m_FuncMap[\"SetChannelSkip\"] = &PrivateImpl::SetChannelSkip;\n        m_FuncMap[\"SetChannelBlock\"] = &PrivateImpl::SetChannelBlock;       \n        m_FuncMap[\"SetChannelDel\"] = &PrivateImpl::SetChannelDel;\n        m_FuncMap[\"GetChannelFav\"] = &PrivateImpl::GetChannelFav;\n        m_FuncMap[\"GetChannelSkip\"] = &PrivateImpl::GetChannelSkip;     \n        m_FuncMap[\"GetChannelBlock\"] = &PrivateImpl::GetChannelBlock;\n        m_FuncMap[\"QueryTvStatus\"] = &PrivateImpl::QueryTvStatus;\n        m_FuncMap[\"StartRecordTs\"] = &PrivateImpl::StartRecordTs;\n        m_FuncMap[\"StopRecordTs\"] = &PrivateImpl::StopRecordTs;\n        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &PrivateImpl::GetEpgDailyListCountByChIdx;   \n#ifdef DVB_T                                \n        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &PrivateImpl::GetEpgDailyListByChIdx;\n#endif\n#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN\n        m_FuncMap[\"StartDetection\"] = &PrivateImpl::StartDetection; \n        m_FuncMap[\"StopDetection\"] = &PrivateImpl::StopDetection;   \n#endif\n#ifdef QAM_MODE_SETTING\n        m_FuncMap[\"GetTvQamConst\"] = &PrivateImpl::GetTvQamConst;\n        m_FuncMap[\"SetTvQamConst\"] = &PrivateImpl::SetTvQamConst;\n#endif\n#ifdef SYMBOL_RATE_SETTING_BY_VAL\n        m_FuncMap[\"GetTvSymbolRateValue\"] = &PrivateImpl::GetTvSymbolRateValue;\n        m_FuncMap[\"SetTvSymbolRateValue\"] = &PrivateImpl::SetTvSymbolRateValue;\n#endif\n        m_FuncMap[\"SetSubtitleEnable\"] = &PrivateImpl::SetSubtitleEnable;\n        m_FuncMap[\"GetSubtitleEnable\"] = &PrivateImpl::GetSubtitleEnable;\n        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &PrivateImpl::SetDtvSubtitleByIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &PrivateImpl::GetDtvSubtitleIndexList;\n        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &PrivateImpl::GetCurDtvSubtitleIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &PrivateImpl::GetDtvSubtitleIndexListCount;\n        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &PrivateImpl::GetDtvSubtitleIndexListCountByCategory;\n        m_FuncMap[\"SetDTVAudioType\"] = &PrivateImpl::SetDTVAudioType;\n        m_FuncMap[\"GetDTVAudioType\"] = &PrivateImpl::GetDTVAudioType;\n        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &PrivateImpl::SetDTVAudioPrimaryLang;\n        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &PrivateImpl::GetDTVAudioPrimaryLang;\n        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &PrivateImpl::SetDTVAudioSecondaryLang;\n        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &PrivateImpl::GetDTVAudioSecondaryLang;\n#ifdef ENABLE_NEW_DVB_2\n        m_FuncMap[\"SetDTVSubtitleType\"] = &PrivateImpl::SetDTVSubtitleType;\n        m_FuncMap[\"GetDTVSubtitleType\"] = &PrivateImpl::GetDTVSubtitleType;\n#endif\n#if defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &PrivateImpl::SetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &PrivateImpl::GetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &PrivateImpl::SetDTVSubtitleSecondaryLang;\n        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &PrivateImpl::GetDTVSubtitleSecondaryLang;\n#endif //defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetATVTableScan\"] = &PrivateImpl::SetATVTableScan;\n        m_FuncMap[\"GetATVTableScan\"] = &PrivateImpl::GetATVTableScan;\n        m_FuncMap[\"GetIsNoSignal\"] = &PrivateImpl::GetIsNoSignal;\n        m_FuncMap[\"GetEpgData\"] = &PrivateImpl::GetEpgData;\n        m_FuncMap[\"GetEpgDataByLCN\"] = &PrivateImpl::GetEpgDataByLCN;\n        m_FuncMap[\"GetEpgListEpgCount\"] = &PrivateImpl::GetEpgListEpgCount; \n        m_FuncMap[\"GetAllLCNByCurFreq\"] = &PrivateImpl::GetAllLCNByCurFreq;\n        m_FuncMap[\"GetEpgDataList\"] = &PrivateImpl::GetEpgDataList;\n        m_FuncMap[\"SetTVStopMode\"] = &PrivateImpl::SetTVStopMode;\n        m_FuncMap[\"GetTVStopMode\"] = &PrivateImpl::GetTVStopMode;\n    }\n```\n\n\n- ### 传输数据的序列/流化\n\n　　类`RpcCommandMuxer`和类`RpcCommandDemuxer`是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。\n　　\n　　类`IpcStreamerPipeImpl`是用于数据的流化处理。\n\n---\n\n## 示例\n\n参见 **`RpcTestJni.cpp`** 源文件。\n\n---\n","source":"_posts/realtek-TV-RPC.md","raw":"---\ntitle: realtek TV RPC\ndate: 2016-07-15 14:50:37\ncategories:\n - work\ntags:\n - realtek\n - linux\n---\n## 接口\n\n1. RPC 客户端基类。\n```cpp\nclass RpcClient\n```\n\n2. RPC类的实体。每个实体代表一个函数调用。其成员`m_StrFuncName`是原始调用函数的函数名。`m_CallCtxMap`为其map组合。\n```cpp\nstruct RpcClient::CallContext\n```\n\n3. RPC回调类。\n```cpp\nclass RpcClient::CallbackHandler\n```\n\n<!-- more -->\n\n4. 数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给`IpcStreamer`传输。参见`RpcCommandType`结构体。\n```cpp\nclass RpcCommandMuxer* m_pCmdMuxer\n```\n\n5. 数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。\n```cpp\nclass RpcCommandDemuxer* m_pCmdDemuxer\n```\n\n6. 数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给`RpcCommandMuxer`及`RpcCommandDemuxer`序列化/反序列化数据。\n```cpp\nclass rtk::ipc::IpcStreamer* m_pStreamer\n```\n\n7. callback的map集合。\n```cpp\nclass CallbackMap m_CallbackMap\n```\n\n8. callback类。继承实现了一个`CommandProcessor`。其实类为`CallbackContext`。\n```cpp\nclass RpcClient::CallbackHandler* m_pCallbackHandler\n```\n\n9. 回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中`struct CallbackContext`结构即为当前的`class CommandProcessor`实类。\n```cpp\nclass CommandQueue<CallbackContext> m_CallbackCmdQue\n```\n\n10. 回调函数序列化的数据流结构体。其中`pData`指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过`RpcCommandDemuxer`反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。\n```cpp\nstruct CallbackContext\n```\n\n11. RPC客户端实例。\n```cpp\nclass RpcClient& m_RpcClient\n```\n\n---\n\n## 类体\n\n1. 指令流头部数据结构体。内结构顺序为：\n`RpcCommandHeader`+`RpcParamHeader1`+`data1`+`...`+`RpcParamHeaderN`+`dataN`。\n```cpp\nstruct RpcCommandHeader\n{\n    unsigned int iRpcCommandType; //RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)\n    unsigned int iId; //唯一ID，用于指示哪个命令。\n    unsigned int iTotalLen; //序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。\n    unsigned int iParamCounts; //数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。\n}\n```\n\n2. 数据流单元结构体。函数名及参数均用此结构体序列化。\n```cpp\nstruct RpcParamHeader\n{\n    unsigned int iRpcParamType; //RPC单元数据类型。参见 enum RpcParamType枚举类型。\n    unsigned int iRpcParamLen; //RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。\n};\n```\n\n3. RpcServer接口虚基类。\n```cpp\nclass IpcServer\n{\npublic: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。\n    virtual bool Start(const char* pStrServerName, void* pParam) = 0;\n    virtual bool Stop() = 0;\n    virtual bool RegisterObserver(IpcServerObserver* pObs) = 0;\n    virtual void UnregisterObserver(IpcServerObserver* pObs) = 0;\n    virtual const char* GetServerName() = 0;\n    virtual void* GetParameter() = 0;\n\npublic:\n    virtual ~IpcServer() { ; };\n};\n```\n\n4. 继承自`IpcServer`，RpcServer基础实现类。\n```cpp\nclass IpcServerBase: public IpcServer\n{\npublic: // 接口定义在IpcServer类中，这里是具体实现。\n    bool Start(const char* pStrServerName, void* pParam);\n    bool Stop();\n    bool RegisterObserver(IpcServerObserver* pObs);\n    void UnregisterObserver(IpcServerObserver* pObs);\n    const char* GetServerName();\n    void* GetParameter();\n\npublic:\n    IpcServerBase();\n    ~IpcServerBase();\n    IpcServerBase (const IpcServerBase &) {}\n    IpcServerBase &operator= (const IpcServerBase&) { return *this; }\n\nprotected: //子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。\n    virtual bool DoStart(const char* pStrServerName, void* pParam) = 0;\n    virtual bool DoStop() = 0;\n    virtual IpcStreamer* DoAccept() = 0;\n    virtual void FreeIpcStreamer(IpcStreamer* pStreamer) = 0;\n    virtual bool IsShutdownServer() = 0;\n\nprivate: // Used to notify observers\n    void NotifyOpened(const char* pStrServerName);\n    bool NotifyAccepted(IpcStreamer* pStreamer);\n    void NotifyClosed();\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n5. 继承自`IpcServerBase`，FIFO类型RpcServer主实现类。\n```cpp\nclass IpcServerPipeImpl: public IpcServerBase\n{\npublic:\n    IpcServerPipeImpl();\n    ~IpcServerPipeImpl();\n    IpcServerPipeImpl(const IpcServerPipeImpl &param) {}\n    IpcServerPipeImpl &operator = (const IpcServerPipeImpl&) { return *this; }\n\nprivate: //接口定义在 IpcServerBase 类中，这里是具体实现。\n    bool DoStart(const char* pStrServerName, void* pParam);\n    bool DoStop();\n    IpcStreamer* DoAccept();\n    void FreeIpcStreamer(IpcStreamer* pStreamer);\n    bool IsShutdownServer();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n6. IPC服务器端接口类。管理 RpcServer集合等map。\n```cpp\nclass IpcServerManager\n{\npublic:\n    enum\n    {\n        TIME_OUT_INFINITY = -1 //Time out infinity\n    };\n\npublic:\n    static IpcServerManager& GetInstance();\n    bool StartServer(const char* pStrServerName, int iIpcImplMode, void* pParam);\n    bool StopServer(const char* pStrServerName);\n    void StopAllServers();\n    void WaitForAllServerStop(int iTimeout);\n    bool RegisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n    void UnregisterObserver(const char* pStrServerName, IpcServerObserver* pObs);\n\nprivate:\n    IpcServerManager();\n    IpcServerManager(const IpcServerManager&);\n    IpcServerManager& operator=(const IpcServerManager&);\n    ~IpcServerManager();\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n};\n```\n\n7. RPC服务端接口类。实际调用IpcServerManager类方法。\n```cpp\nclass RpcServer\n{\npublic:\n    RpcServer();\n    ~RpcServer();\n    bool StartServer(const char* pStrServerName, void* pParam);\n    bool StopServer();\n    const char* GetServerName() const;\n\nprivate:\n    class PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcServer(const RpcServer &);\n    RpcServer &operator=(const RpcServer &);\n};\n```\n\n8. RPC调用执行管理类。\n```cpp\nclass RpcExecutorManager\n{\npublic:\n    enum ErrCode\n    {\n        ERR_FAILED = -1,\n    };\npublic:\n    static RpcExecutorManager& GetInstance();\n    bool RegisterExecutor(RpcExecutor* pExecutor);\n    bool UnregisterExecutor(RpcExecutor* pExecutor);\n    int Execute(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  char* pBuffer, int iBufSize);\n\nprivate:\n    struct PrivateImpl;\n    PrivateImpl* m_pImpl;\n\nprivate:\n    RpcExecutorManager();\n    ~RpcExecutorManager();\n    RpcExecutorManager(const RpcExecutorManager&);\n    RpcExecutorManager& operator=(const RpcExecutorManager&);\n};\n```\n\n---\n\n## 原理及过程分析\n\n- ### RPC机制原理\n\n　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。\n　　\n　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的`IpcPipeImplHeader`数据，并根据`IpcPipeImplHeader`数据中的参数`iID`来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。\n　　\n　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的`iID`，此参数`iID`保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在`IpcPipeImplHeader`结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。\n　　\n　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入`IpcPipeImplHeader`数据来实现沟通。\n\n- ### RpcServer启动过程 \n\n　　构造RpcServer时，通过调用`IpcServerManager`接口类初始化来创建实例，并`StartServer`。而在`StartServer`方法中调用了`IpcServerPipeImpl`类构造函数来实例化 **IPC_PIPE** 型RpcServer对象，并`Start`服务。`IpcServerPipeImpl`接口类继承自`IpcServerBase`接口类，`Start`方法在`IpcServerBase`接口类中，而`Start`方法又通过虚接口调用了子类`IpcServerPipeImpl`类中的`DoStart`方法来创建FIFO，然后调用`IpcServerBase`接口类中的`StartAccetpClient`方法来启动接收RpcClient数据的服务。`IpcServerBase`接口类中的`PrivateImpl`成员类是继承自`CommandProcessor`类的对象，用于开始接收并通知streamer的接收数据。在`StartAccetpClient`方法中创建了一个`CommandQueue`类，通过调用此类的`AddCommand`方法并用 **ACCEPT_COMMAND** 参数（此参数目前不起任何作用）来创建一个等待指令的线程`Policy1Proc`。如果监测到有事件发生，此线程调用`IpcServerBase::PrivateImpl`这个 `CommandProcessor`对象中的`Execute`方法来执行。而`Execute`方法里又调用了`IpcServerPipeImpl`接口类中的`DoAccept`方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输`IpcPipeImplHeader`结构的数据。\n　　\n　　RpcServer接收到`IpcPipeImplHeader`结构的数据后，调用`CreateStreamerByCommand`方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并放到streamer类map中存储。其中，因为接收到的数据中有`iID`这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。\n\n- ### RpcClient启动过程\n\n　　与RpcServer类似，不赘述。\n\n- ### RpcClient与RpcServer交互过程\n\n　　RpcServer先启动，创建好监听RpcClient的FIFO。\n　　\n　　调用`IpcClientFactory`类创建实例对像，实际调用`IpcClientPipeImpl`类来构造RpcClient。并加入到`ClientList`vctor容器中。\n　　\n　　RpcClient构造后开始连接RpcServer(`IpcClientPipeImpl::Connect`)。先`open`打开RpcServer创建好的FIFO，并向FIFO`write`一个`IpcPipeImplHeader`结构体的数据后关闭FIFO。然后调用`IpcStreamerPipeImpl`类创建streamer(`IpcStreamerPipeImpl::Create`)，并`open`打开(`IpcStreamerPipeImpl::DoOpen`)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。\n\n- ### INVOKE远程调用执行过程\n\n　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序`push`，最后`push`函数名，最后`finish`。然后调用`RpcCommandMuxer`类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用`RpcCommandDemuxer`类反序列化数据。并调用`RpcExecutorManager`类里的方法来执行相关动作。\n　　\n　　其中`RpcExecutorManager`是一个专用于管理`RpcExecutor`类对象的管理器。同样的还有`IpcServerManager`。\n　　\n　　而`RpcExecutor`是真正执行函数调用的类。它被用于模块初始化时调用，通过`RegisterExecutor`/`UnregisterExecutor`方法注册/反注册到`RpcExecutorManager`类中的list中。它的`Execute`方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以`RpcCommandMuxer`类表示的数据。\n　　　　\n　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用`RpcCommandMuxer`序列化数据时，头部`RpcCommandHeader`结构体数据里面填充的`iRpcCommandType`参数数据不同。\n　　\n　　TvService模块初始化时调用`RpcExecutor`类来注册供RpcClient远程调用invoke的native函数集合，其成员`m_FuncMap`是一个`RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);`类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成`RpcCommandMuxer`流数据返回。\n　　\n> **例如:** `TvChannelApiExecutor`类。\n> \n```cpp\nclass PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),\n                   m_bFirstPlay(false)\n    {\n        m_FuncMap[\"TvAutoScanStart\"] = &PrivateImpl::TvAutoScanStart;\n        m_FuncMap[\"TvAutoScanStop\"] = &PrivateImpl::TvAutoScanStop;\n        m_FuncMap[\"TvAutoScanComplete\"] = &PrivateImpl::TvAutoScanComplete; \n        m_FuncMap[\"TvAutoScanStartWithRange\"] = &PrivateImpl::TvAutoScanStartWithRange;\n        m_FuncMap[\"TvAutoScanStopWithRange\"] = &PrivateImpl::TvAutoScanStopWithRange;\n        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &PrivateImpl::TvAutoScanCompleteWithRange;  \n        m_FuncMap[\"TvSeekScanStart\"] = &PrivateImpl::TvSeekScanStart;\n        m_FuncMap[\"TvSeekScanStop\"] = &PrivateImpl::TvSeekScanStop;\n        m_FuncMap[\"TvScanManualStart\"] = &PrivateImpl::TvScanManualStart;\n        m_FuncMap[\"TvScanManualStop\"] = &PrivateImpl::TvScanManualStop;\n        m_FuncMap[\"TvScanManualComplete\"] = &PrivateImpl::TvScanManualComplete;\n        m_FuncMap[\"TvScanInfo\"] = &PrivateImpl::TvScanInfo;\n        m_FuncMap[\"IsTvScanning\"] = &PrivateImpl::IsTvScanning;\n        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &PrivateImpl::GetAtvSeqScanStartFreq;\n        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &PrivateImpl::GetAtvSeqScanEndFreq;\n        m_FuncMap[\"SetDtvScanType\"] = &PrivateImpl::SetDtvScanType;\n        m_FuncMap[\"GetDtvScanType\"] = &PrivateImpl::GetDtvScanType;\n        m_FuncMap[\"PlayNextChannel\"] = &PrivateImpl::PlayNextChannel;\n        m_FuncMap[\"PlayPrevChannel\"] = &PrivateImpl::PlayPrevChannel;\n        m_FuncMap[\"PlayFirstChannel\"] = &PrivateImpl::PlayFirstChannel;\n        m_FuncMap[\"PlayHistoryChannel\"] = &PrivateImpl::PlayHistoryChannel;\n        m_FuncMap[\"DumpTvChannelList\"] = &PrivateImpl::DumpTvChannelList;\n        m_FuncMap[\"SetDefaultFilter\"] = &PrivateImpl::SetDefaultFilter;\n        m_FuncMap[\"GetDefaultFilter\"] = &PrivateImpl::GetDefaultFilter;\n        m_FuncMap[\"GetCurChannel\"] = &PrivateImpl::GetCurChannel;\n        m_FuncMap[\"GetChannelInfoByIndex\"] = &PrivateImpl::GetChannelInfoByIndex;\n        m_FuncMap[\"GetChInfoArray\"] = &PrivateImpl::GetChInfoArray;\n        m_FuncMap[\"GetChannelBandwidth\"] = &PrivateImpl::GetChannelBandwidth;\n        m_FuncMap[\"GetChannelName\"] = &PrivateImpl::GetChannelName;\n        m_FuncMap[\"GetChannelCount\"] = &PrivateImpl::GetChannelCount;\n        m_FuncMap[\"SortChannel\"] = &PrivateImpl::SortChannel;\n        m_FuncMap[\"SaveChannel\"] = &PrivateImpl::SaveChannel;\n        m_FuncMap[\"PlayChannelByIndex\"] = &PrivateImpl::PlayChannelByIndex;\n        m_FuncMap[\"PlayChannelByNum\"] = &PrivateImpl::PlayChannelByNum;\n        m_FuncMap[\"PlayChannel\"] = &PrivateImpl::PlayChannel;       \n        m_FuncMap[\"PlayChannelByLCN\"] = &PrivateImpl::PlayChannelByLCN;\n        m_FuncMap[\"PlayFirstChannelInFreq\"] = &PrivateImpl::PlayFirstChannelInFreq;\n        m_FuncMap[\"PlayChannelByChnumFreq\"] = &PrivateImpl::PlayChannelByChnumFreq;\n        m_FuncMap[\"SwapChannelByIdxEx\"] = &PrivateImpl::SwapChannelByIdxEx;\n        m_FuncMap[\"SwapChannelByNumEx\"] = &PrivateImpl::SwapChannelByNumEx;\n        m_FuncMap[\"ReloadLastPlayedSource\"] = &PrivateImpl::ReloadLastPlayedSource;\n        m_FuncMap[\"SetCurChannelSkipped\"] = &PrivateImpl::SetCurChannelSkipped;\n        m_FuncMap[\"SetCurAtvSoundStd\"] = &PrivateImpl::SetCurAtvSoundStd;\n        m_FuncMap[\"FineTuneCurFrequency\"] = &PrivateImpl::FineTuneCurFrequency;\n        m_FuncMap[\"SetCurChAudioCompensation\"] = &PrivateImpl::SetCurChAudioCompensation;\n        m_FuncMap[\"SetSource\"] = &PrivateImpl::SetSource;\n        m_FuncMap[\"SetBootSource\"] = &PrivateImpl::SetBootSource;\n        m_FuncMap[\"GetCurChannelSkipped\"] = &PrivateImpl::GetCurChannelSkipped;\n        m_FuncMap[\"GetCurAtvSoundStd\"] = &PrivateImpl::GetCurAtvSoundStd;\n        m_FuncMap[\"GetCurChAudioCompensation\"] = &PrivateImpl::GetCurChAudioCompensation;\n        m_FuncMap[\"GetSourceList\"] = &PrivateImpl::GetSourceList;\n        m_FuncMap[\"GetSourceListCnt\"] = &PrivateImpl::GetSourceListCnt;\n        m_FuncMap[\"GetCurSourceType\"] = &PrivateImpl::GetCurSourceType;\n        m_FuncMap[\"GetBootSource\"] = &PrivateImpl::GetBootSource;\n#if defined (TVSERVER_IDTV)\n        m_FuncMap[\"GetIDTVSubSource\"] = &PrivateImpl::GetIDTVSubSource;\n#endif\n        m_FuncMap[\"GetCurTvType\"] = &PrivateImpl::GetCurTvType; \n        m_FuncMap[\"GetChannelNameList\"] = &PrivateImpl::GetChannelNameList;    \n        m_FuncMap[\"GetCurrentProgramInfo\"] = &PrivateImpl::GetCurrentProgramInfo;                   \n        m_FuncMap[\"GetCurrentProgramDescription\"] = &PrivateImpl::GetCurrentProgramDescription;                         \n        m_FuncMap[\"GetCurrentProgramRating\"] = &PrivateImpl::GetCurrentProgramRating;   \n        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &PrivateImpl::HasCurrentProgramWithSubtitle;           \n        m_FuncMap[\"GetCurAtvSoundSelect\"] = &PrivateImpl::GetCurAtvSoundSelect;\n        m_FuncMap[\"GetCurDtvAudioPID\"]=&PrivateImpl::GetCurDtvAudioPID;\n        m_FuncMap[\"GetCurDtvVideoPID\"]=&PrivateImpl::GetCurDtvVideoPID;\n        m_FuncMap[\"GetCurDtvTSID\"]=&PrivateImpl::GetCurDtvTSID;\n        m_FuncMap[\"GetCurDtvServiceID\"]=&PrivateImpl::GetCurDtvServiceID;\n        m_FuncMap[\"GetCurDtvPCR\"]=&PrivateImpl::GetCurDtvPCR;\n        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &PrivateImpl::SetCurDtvSoundSelectByIndex;\n        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&PrivateImpl::GetCurDtvSoundSelectIndex;     \n        m_FuncMap[\"GetCurrentAudioLang\"] = &PrivateImpl::GetCurrentAudioLang;\n        m_FuncMap[\"GetCurInputInfo\"] = &PrivateImpl::GetCurInputInfo;\n        m_FuncMap[\"GetCurrentSetting_tv\"] = &PrivateImpl::GetCurrentSetting_tv;\n        m_FuncMap[\"GetChannelFreqCount\"] = &PrivateImpl::GetChannelFreqCount;\n        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &PrivateImpl::GetChannelFreqByTableIndex;   \n        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &PrivateImpl::GetChannelchannelNumByTableIndex;      \n        m_FuncMap[\"GetChannelCountByFreq\"] = &PrivateImpl::GetChannelCountByFreq;     \n        m_FuncMap[\"GetCurChannelIndex\"] = &PrivateImpl::GetCurChannelIndex;\n        m_FuncMap[\"PlayNumberChannel\"] = &PrivateImpl::PlayNumberChannel;\n        m_FuncMap[\"GetChannelListChannelCount\"] = &PrivateImpl::GetChannelListChannelCount;\n        m_FuncMap[\"GetChannelDataList\"] = &PrivateImpl::GetChannelDataList;\n        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &PrivateImpl::GetCurDtvSoundSelectList;\n        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &PrivateImpl::GetCurDtvSoundSelectCount;\n        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &PrivateImpl::GetCurAtvSoundSelectList;\n        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &PrivateImpl::GetCurAtvSoundSelectCount;\n        m_FuncMap[\"SetCaptionMode\"] = &PrivateImpl::SetCaptionMode;\n        m_FuncMap[\"GetCaptionMode\"] = &PrivateImpl::GetCaptionMode;\n        m_FuncMap[\"SetAnalogCaption\"] = &PrivateImpl::SetAnalogCaption;\n        m_FuncMap[\"GetAnalogCaption\"] = &PrivateImpl::GetAnalogCaption;\n        m_FuncMap[\"SetDigitalCaption\"] = &PrivateImpl::SetDigitalCaption;\n        m_FuncMap[\"SetChannelFav\"] = &PrivateImpl::SetChannelFav;\n        m_FuncMap[\"SetChannelSkip\"] = &PrivateImpl::SetChannelSkip;\n        m_FuncMap[\"SetChannelBlock\"] = &PrivateImpl::SetChannelBlock;       \n        m_FuncMap[\"SetChannelDel\"] = &PrivateImpl::SetChannelDel;\n        m_FuncMap[\"GetChannelFav\"] = &PrivateImpl::GetChannelFav;\n        m_FuncMap[\"GetChannelSkip\"] = &PrivateImpl::GetChannelSkip;     \n        m_FuncMap[\"GetChannelBlock\"] = &PrivateImpl::GetChannelBlock;\n        m_FuncMap[\"QueryTvStatus\"] = &PrivateImpl::QueryTvStatus;\n        m_FuncMap[\"StartRecordTs\"] = &PrivateImpl::StartRecordTs;\n        m_FuncMap[\"StopRecordTs\"] = &PrivateImpl::StopRecordTs;\n        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &PrivateImpl::GetEpgDailyListCountByChIdx;   \n#ifdef DVB_T                                \n        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &PrivateImpl::GetEpgDailyListByChIdx;\n#endif\n#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN\n        m_FuncMap[\"StartDetection\"] = &PrivateImpl::StartDetection; \n        m_FuncMap[\"StopDetection\"] = &PrivateImpl::StopDetection;   \n#endif\n#ifdef QAM_MODE_SETTING\n        m_FuncMap[\"GetTvQamConst\"] = &PrivateImpl::GetTvQamConst;\n        m_FuncMap[\"SetTvQamConst\"] = &PrivateImpl::SetTvQamConst;\n#endif\n#ifdef SYMBOL_RATE_SETTING_BY_VAL\n        m_FuncMap[\"GetTvSymbolRateValue\"] = &PrivateImpl::GetTvSymbolRateValue;\n        m_FuncMap[\"SetTvSymbolRateValue\"] = &PrivateImpl::SetTvSymbolRateValue;\n#endif\n        m_FuncMap[\"SetSubtitleEnable\"] = &PrivateImpl::SetSubtitleEnable;\n        m_FuncMap[\"GetSubtitleEnable\"] = &PrivateImpl::GetSubtitleEnable;\n        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &PrivateImpl::SetDtvSubtitleByIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &PrivateImpl::GetDtvSubtitleIndexList;\n        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &PrivateImpl::GetCurDtvSubtitleIndex;\n        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &PrivateImpl::GetDtvSubtitleIndexListCount;\n        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &PrivateImpl::GetDtvSubtitleIndexListCountByCategory;\n        m_FuncMap[\"SetDTVAudioType\"] = &PrivateImpl::SetDTVAudioType;\n        m_FuncMap[\"GetDTVAudioType\"] = &PrivateImpl::GetDTVAudioType;\n        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &PrivateImpl::SetDTVAudioPrimaryLang;\n        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &PrivateImpl::GetDTVAudioPrimaryLang;\n        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &PrivateImpl::SetDTVAudioSecondaryLang;\n        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &PrivateImpl::GetDTVAudioSecondaryLang;\n#ifdef ENABLE_NEW_DVB_2\n        m_FuncMap[\"SetDTVSubtitleType\"] = &PrivateImpl::SetDTVSubtitleType;\n        m_FuncMap[\"GetDTVSubtitleType\"] = &PrivateImpl::GetDTVSubtitleType;\n#endif\n#if defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &PrivateImpl::SetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &PrivateImpl::GetDTVSubtitlePrimaryLang;\n        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &PrivateImpl::SetDTVSubtitleSecondaryLang;\n        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &PrivateImpl::GetDTVSubtitleSecondaryLang;\n#endif //defined(DVB_SUBTITLE)\n        m_FuncMap[\"SetATVTableScan\"] = &PrivateImpl::SetATVTableScan;\n        m_FuncMap[\"GetATVTableScan\"] = &PrivateImpl::GetATVTableScan;\n        m_FuncMap[\"GetIsNoSignal\"] = &PrivateImpl::GetIsNoSignal;\n        m_FuncMap[\"GetEpgData\"] = &PrivateImpl::GetEpgData;\n        m_FuncMap[\"GetEpgDataByLCN\"] = &PrivateImpl::GetEpgDataByLCN;\n        m_FuncMap[\"GetEpgListEpgCount\"] = &PrivateImpl::GetEpgListEpgCount; \n        m_FuncMap[\"GetAllLCNByCurFreq\"] = &PrivateImpl::GetAllLCNByCurFreq;\n        m_FuncMap[\"GetEpgDataList\"] = &PrivateImpl::GetEpgDataList;\n        m_FuncMap[\"SetTVStopMode\"] = &PrivateImpl::SetTVStopMode;\n        m_FuncMap[\"GetTVStopMode\"] = &PrivateImpl::GetTVStopMode;\n    }\n```\n\n\n- ### 传输数据的序列/流化\n\n　　类`RpcCommandMuxer`和类`RpcCommandDemuxer`是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。\n　　\n　　类`IpcStreamerPipeImpl`是用于数据的流化处理。\n\n---\n\n## 示例\n\n参见 **`RpcTestJni.cpp`** 源文件。\n\n---\n","slug":"realtek-TV-RPC","published":1,"updated":"2016-07-19T06:44:16.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9a000800n9lf53s8ey","content":"<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ol>\n<li><p>RPC 客户端基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC类的实体。每个实体代表一个函数调用。其成员<code>m_StrFuncName</code>是原始调用函数的函数名。<code>m_CallCtxMap</code>为其map组合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcClient::CallContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC回调类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<ol>\n<li><p>数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给<code>IpcStreamer</code>传输。参见<code>RpcCommandType</code>结构体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandMuxer* m_pCmdMuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandDemuxer* m_pCmdDemuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给<code>RpcCommandMuxer</code>及<code>RpcCommandDemuxer</code>序列化/反序列化数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> rtk::ipc::IpcStreamer* m_pStreamer</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback的map集合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CallbackMap m_CallbackMap</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback类。继承实现了一个<code>CommandProcessor</code>。其实类为<code>CallbackContext</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler* m_pCallbackHandler</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中<code>struct CallbackContext</code>结构即为当前的<code>class CommandProcessor</code>实类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CommandQueue&lt;CallbackContext&gt; m_CallbackCmdQue</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数序列化的数据流结构体。其中<code>pData</code>指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过<code>RpcCommandDemuxer</code>反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> CallbackContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC客户端实例。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient&amp; m_RpcClient</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"类体\"><a href=\"#类体\" class=\"headerlink\" title=\"类体\"></a>类体</h2><ol>\n<li><p>指令流头部数据结构体。内结构顺序为：<br><code>RpcCommandHeader</code>+<code>RpcParamHeader1</code>+<code>data1</code>+<code>...</code>+<code>RpcParamHeaderN</code>+<code>dataN</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcCommandHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcCommandType; <span class=\"comment\">//RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iId; <span class=\"comment\">//唯一ID，用于指示哪个命令。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iTotalLen; <span class=\"comment\">//序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iParamCounts; <span class=\"comment\">//数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流单元结构体。函数名及参数均用此结构体序列化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcParamHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamType; <span class=\"comment\">//RPC单元数据类型。参见 enum RpcParamType枚举类型。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamLen; <span class=\"comment\">//RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RpcServer接口虚基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">virtual</span> ~IpcServer() &#123; ; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServer</code>，RpcServer基础实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerBase: <span class=\"keyword\">public</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">// 接口定义在IpcServer类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerBase();</div><div class=\"line\">    ~IpcServerBase();</div><div class=\"line\">    IpcServerBase (<span class=\"keyword\">const</span> IpcServerBase &amp;) &#123;&#125;</div><div class=\"line\">    IpcServerBase &amp;<span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> IpcServerBase&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// Used to notify observers</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyOpened</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">NotifyAccepted</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyClosed</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServerBase</code>，FIFO类型RpcServer主实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerPipeImpl: <span class=\"keyword\">public</span> IpcServerBase</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerPipeImpl();</div><div class=\"line\">    ~IpcServerPipeImpl();</div><div class=\"line\">    IpcServerPipeImpl(<span class=\"keyword\">const</span> IpcServerPipeImpl &amp;param) &#123;&#125;</div><div class=\"line\">    IpcServerPipeImpl &amp;<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> IpcServerPipeImpl&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//接口定义在 IpcServerBase 类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>IPC服务器端接口类。管理 RpcServer集合等map。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        TIME_OUT_INFINITY = <span class=\"number\">-1</span> <span class=\"comment\">//Time out infinity</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> IpcServerManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">int</span> iIpcImplMode, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAllServers</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WaitForAllServerStop</span><span class=\"params\">(<span class=\"keyword\">int</span> iTimeout)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    IpcServerManager();</div><div class=\"line\">    IpcServerManager(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    IpcServerManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    ~IpcServerManager();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC服务端接口类。实际调用IpcServerManager类方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    RpcServer();</div><div class=\"line\">    ~RpcServer();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcServer(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">    RpcServer &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC调用执行管理类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcExecutorManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> ErrCode</div><div class=\"line\">    &#123;</div><div class=\"line\">        ERR_FAILED = <span class=\"number\">-1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> RpcExecutorManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnregisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Execute</span><span class=\"params\">(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  <span class=\"keyword\">char</span>* pBuffer, <span class=\"keyword\">int</span> iBufSize)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcExecutorManager();</div><div class=\"line\">    ~RpcExecutorManager();</div><div class=\"line\">    RpcExecutorManager(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">    RpcExecutorManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"原理及过程分析\"><a href=\"#原理及过程分析\" class=\"headerlink\" title=\"原理及过程分析\"></a>原理及过程分析</h2><ul>\n<li><h3 id=\"RPC机制原理\"><a href=\"#RPC机制原理\" class=\"headerlink\" title=\"RPC机制原理\"></a>RPC机制原理</h3></li>\n</ul>\n<p>　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。<br>　　<br>　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的<code>IpcPipeImplHeader</code>数据，并根据<code>IpcPipeImplHeader</code>数据中的参数<code>iID</code>来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。<br>　　<br>　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的<code>iID</code>，此参数<code>iID</code>保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在<code>IpcPipeImplHeader</code>结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。<br>　　<br>　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入<code>IpcPipeImplHeader</code>数据来实现沟通。</p>\n<ul>\n<li><h3 id=\"RpcServer启动过程\"><a href=\"#RpcServer启动过程\" class=\"headerlink\" title=\"RpcServer启动过程\"></a>RpcServer启动过程</h3></li>\n</ul>\n<p>　　构造RpcServer时，通过调用<code>IpcServerManager</code>接口类初始化来创建实例，并<code>StartServer</code>。而在<code>StartServer</code>方法中调用了<code>IpcServerPipeImpl</code>类构造函数来实例化 <strong>IPC_PIPE</strong> 型RpcServer对象，并<code>Start</code>服务。<code>IpcServerPipeImpl</code>接口类继承自<code>IpcServerBase</code>接口类，<code>Start</code>方法在<code>IpcServerBase</code>接口类中，而<code>Start</code>方法又通过虚接口调用了子类<code>IpcServerPipeImpl</code>类中的<code>DoStart</code>方法来创建FIFO，然后调用<code>IpcServerBase</code>接口类中的<code>StartAccetpClient</code>方法来启动接收RpcClient数据的服务。<code>IpcServerBase</code>接口类中的<code>PrivateImpl</code>成员类是继承自<code>CommandProcessor</code>类的对象，用于开始接收并通知streamer的接收数据。在<code>StartAccetpClient</code>方法中创建了一个<code>CommandQueue</code>类，通过调用此类的<code>AddCommand</code>方法并用 <strong>ACCEPT_COMMAND</strong> 参数（此参数目前不起任何作用）来创建一个等待指令的线程<code>Policy1Proc</code>。如果监测到有事件发生，此线程调用<code>IpcServerBase::PrivateImpl</code>这个 <code>CommandProcessor</code>对象中的<code>Execute</code>方法来执行。而<code>Execute</code>方法里又调用了<code>IpcServerPipeImpl</code>接口类中的<code>DoAccept</code>方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输<code>IpcPipeImplHeader</code>结构的数据。<br>　　<br>　　RpcServer接收到<code>IpcPipeImplHeader</code>结构的数据后，调用<code>CreateStreamerByCommand</code>方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并放到streamer类map中存储。其中，因为接收到的数据中有<code>iID</code>这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。</p>\n<ul>\n<li><h3 id=\"RpcClient启动过程\"><a href=\"#RpcClient启动过程\" class=\"headerlink\" title=\"RpcClient启动过程\"></a>RpcClient启动过程</h3></li>\n</ul>\n<p>　　与RpcServer类似，不赘述。</p>\n<ul>\n<li><h3 id=\"RpcClient与RpcServer交互过程\"><a href=\"#RpcClient与RpcServer交互过程\" class=\"headerlink\" title=\"RpcClient与RpcServer交互过程\"></a>RpcClient与RpcServer交互过程</h3></li>\n</ul>\n<p>　　RpcServer先启动，创建好监听RpcClient的FIFO。<br>　　<br>　　调用<code>IpcClientFactory</code>类创建实例对像，实际调用<code>IpcClientPipeImpl</code>类来构造RpcClient。并加入到<code>ClientList</code>vctor容器中。<br>　　<br>　　RpcClient构造后开始连接RpcServer(<code>IpcClientPipeImpl::Connect</code>)。先<code>open</code>打开RpcServer创建好的FIFO，并向FIFO<code>write</code>一个<code>IpcPipeImplHeader</code>结构体的数据后关闭FIFO。然后调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并<code>open</code>打开(<code>IpcStreamerPipeImpl::DoOpen</code>)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。</p>\n<ul>\n<li><h3 id=\"INVOKE远程调用执行过程\"><a href=\"#INVOKE远程调用执行过程\" class=\"headerlink\" title=\"INVOKE远程调用执行过程\"></a>INVOKE远程调用执行过程</h3></li>\n</ul>\n<p>　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序<code>push</code>，最后<code>push</code>函数名，最后<code>finish</code>。然后调用<code>RpcCommandMuxer</code>类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用<code>RpcCommandDemuxer</code>类反序列化数据。并调用<code>RpcExecutorManager</code>类里的方法来执行相关动作。<br>　　<br>　　其中<code>RpcExecutorManager</code>是一个专用于管理<code>RpcExecutor</code>类对象的管理器。同样的还有<code>IpcServerManager</code>。<br>　　<br>　　而<code>RpcExecutor</code>是真正执行函数调用的类。它被用于模块初始化时调用，通过<code>RegisterExecutor</code>/<code>UnregisterExecutor</code>方法注册/反注册到<code>RpcExecutorManager</code>类中的list中。它的<code>Execute</code>方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以<code>RpcCommandMuxer</code>类表示的数据。<br>　　　　<br>　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用<code>RpcCommandMuxer</code>序列化数据时，头部<code>RpcCommandHeader</code>结构体数据里面填充的<code>iRpcCommandType</code>参数数据不同。<br>　　<br>　　TvService模块初始化时调用<code>RpcExecutor</code>类来注册供RpcClient远程调用invoke的native函数集合，其成员<code>m_FuncMap</code>是一个<code>RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);</code>类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成<code>RpcCommandMuxer</code>流数据返回。\n　　</p>\n<blockquote>\n<p><strong>例如:</strong> <code>TvChannelApiExecutor</code>类。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">class PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),</div><div class=\"line\">                   m_bFirstPlay(false)</div><div class=\"line\">    &#123;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStart\"] = &amp;PrivateImpl::TvAutoScanStart;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStop\"] = &amp;PrivateImpl::TvAutoScanStop;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanComplete\"] = &amp;PrivateImpl::TvAutoScanComplete; </div><div class=\"line\">        m_FuncMap[\"TvAutoScanStartWithRange\"] = &amp;PrivateImpl::TvAutoScanStartWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStopWithRange\"] = &amp;PrivateImpl::TvAutoScanStopWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &amp;PrivateImpl::TvAutoScanCompleteWithRange;  </div><div class=\"line\">        m_FuncMap[\"TvSeekScanStart\"] = &amp;PrivateImpl::TvSeekScanStart;</div><div class=\"line\">        m_FuncMap[\"TvSeekScanStop\"] = &amp;PrivateImpl::TvSeekScanStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStart\"] = &amp;PrivateImpl::TvScanManualStart;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStop\"] = &amp;PrivateImpl::TvScanManualStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualComplete\"] = &amp;PrivateImpl::TvScanManualComplete;</div><div class=\"line\">        m_FuncMap[\"TvScanInfo\"] = &amp;PrivateImpl::TvScanInfo;</div><div class=\"line\">        m_FuncMap[\"IsTvScanning\"] = &amp;PrivateImpl::IsTvScanning;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &amp;PrivateImpl::GetAtvSeqScanStartFreq;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &amp;PrivateImpl::GetAtvSeqScanEndFreq;</div><div class=\"line\">        m_FuncMap[\"SetDtvScanType\"] = &amp;PrivateImpl::SetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"GetDtvScanType\"] = &amp;PrivateImpl::GetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"PlayNextChannel\"] = &amp;PrivateImpl::PlayNextChannel;</div><div class=\"line\">        m_FuncMap[\"PlayPrevChannel\"] = &amp;PrivateImpl::PlayPrevChannel;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannel\"] = &amp;PrivateImpl::PlayFirstChannel;</div><div class=\"line\">        m_FuncMap[\"PlayHistoryChannel\"] = &amp;PrivateImpl::PlayHistoryChannel;</div><div class=\"line\">        m_FuncMap[\"DumpTvChannelList\"] = &amp;PrivateImpl::DumpTvChannelList;</div><div class=\"line\">        m_FuncMap[\"SetDefaultFilter\"] = &amp;PrivateImpl::SetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetDefaultFilter\"] = &amp;PrivateImpl::GetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetCurChannel\"] = &amp;PrivateImpl::GetCurChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelInfoByIndex\"] = &amp;PrivateImpl::GetChannelInfoByIndex;</div><div class=\"line\">        m_FuncMap[\"GetChInfoArray\"] = &amp;PrivateImpl::GetChInfoArray;</div><div class=\"line\">        m_FuncMap[\"GetChannelBandwidth\"] = &amp;PrivateImpl::GetChannelBandwidth;</div><div class=\"line\">        m_FuncMap[\"GetChannelName\"] = &amp;PrivateImpl::GetChannelName;</div><div class=\"line\">        m_FuncMap[\"GetChannelCount\"] = &amp;PrivateImpl::GetChannelCount;</div><div class=\"line\">        m_FuncMap[\"SortChannel\"] = &amp;PrivateImpl::SortChannel;</div><div class=\"line\">        m_FuncMap[\"SaveChannel\"] = &amp;PrivateImpl::SaveChannel;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByIndex\"] = &amp;PrivateImpl::PlayChannelByIndex;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByNum\"] = &amp;PrivateImpl::PlayChannelByNum;</div><div class=\"line\">        m_FuncMap[\"PlayChannel\"] = &amp;PrivateImpl::PlayChannel;       </div><div class=\"line\">        m_FuncMap[\"PlayChannelByLCN\"] = &amp;PrivateImpl::PlayChannelByLCN;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannelInFreq\"] = &amp;PrivateImpl::PlayFirstChannelInFreq;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByChnumFreq\"] = &amp;PrivateImpl::PlayChannelByChnumFreq;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByIdxEx\"] = &amp;PrivateImpl::SwapChannelByIdxEx;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByNumEx\"] = &amp;PrivateImpl::SwapChannelByNumEx;</div><div class=\"line\">        m_FuncMap[\"ReloadLastPlayedSource\"] = &amp;PrivateImpl::ReloadLastPlayedSource;</div><div class=\"line\">        m_FuncMap[\"SetCurChannelSkipped\"] = &amp;PrivateImpl::SetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"SetCurAtvSoundStd\"] = &amp;PrivateImpl::SetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"FineTuneCurFrequency\"] = &amp;PrivateImpl::FineTuneCurFrequency;</div><div class=\"line\">        m_FuncMap[\"SetCurChAudioCompensation\"] = &amp;PrivateImpl::SetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"SetSource\"] = &amp;PrivateImpl::SetSource;</div><div class=\"line\">        m_FuncMap[\"SetBootSource\"] = &amp;PrivateImpl::SetBootSource;</div><div class=\"line\">        m_FuncMap[\"GetCurChannelSkipped\"] = &amp;PrivateImpl::GetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundStd\"] = &amp;PrivateImpl::GetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"GetCurChAudioCompensation\"] = &amp;PrivateImpl::GetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"GetSourceList\"] = &amp;PrivateImpl::GetSourceList;</div><div class=\"line\">        m_FuncMap[\"GetSourceListCnt\"] = &amp;PrivateImpl::GetSourceListCnt;</div><div class=\"line\">        m_FuncMap[\"GetCurSourceType\"] = &amp;PrivateImpl::GetCurSourceType;</div><div class=\"line\">        m_FuncMap[\"GetBootSource\"] = &amp;PrivateImpl::GetBootSource;</div><div class=\"line\">#if defined (TVSERVER_IDTV)</div><div class=\"line\">        m_FuncMap[\"GetIDTVSubSource\"] = &amp;PrivateImpl::GetIDTVSubSource;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"GetCurTvType\"] = &amp;PrivateImpl::GetCurTvType; </div><div class=\"line\">        m_FuncMap[\"GetChannelNameList\"] = &amp;PrivateImpl::GetChannelNameList;    </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramInfo\"] = &amp;PrivateImpl::GetCurrentProgramInfo;                   </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramDescription\"] = &amp;PrivateImpl::GetCurrentProgramDescription;                         </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramRating\"] = &amp;PrivateImpl::GetCurrentProgramRating;   </div><div class=\"line\">        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &amp;PrivateImpl::HasCurrentProgramWithSubtitle;           </div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelect\"] = &amp;PrivateImpl::GetCurAtvSoundSelect;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvAudioPID\"]=&amp;PrivateImpl::GetCurDtvAudioPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvVideoPID\"]=&amp;PrivateImpl::GetCurDtvVideoPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvTSID\"]=&amp;PrivateImpl::GetCurDtvTSID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvServiceID\"]=&amp;PrivateImpl::GetCurDtvServiceID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvPCR\"]=&amp;PrivateImpl::GetCurDtvPCR;</div><div class=\"line\">        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &amp;PrivateImpl::SetCurDtvSoundSelectByIndex;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&amp;PrivateImpl::GetCurDtvSoundSelectIndex;     </div><div class=\"line\">        m_FuncMap[\"GetCurrentAudioLang\"] = &amp;PrivateImpl::GetCurrentAudioLang;</div><div class=\"line\">        m_FuncMap[\"GetCurInputInfo\"] = &amp;PrivateImpl::GetCurInputInfo;</div><div class=\"line\">        m_FuncMap[\"GetCurrentSetting_tv\"] = &amp;PrivateImpl::GetCurrentSetting_tv;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqCount\"] = &amp;PrivateImpl::GetChannelFreqCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &amp;PrivateImpl::GetChannelFreqByTableIndex;   </div><div class=\"line\">        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &amp;PrivateImpl::GetChannelchannelNumByTableIndex;      </div><div class=\"line\">        m_FuncMap[\"GetChannelCountByFreq\"] = &amp;PrivateImpl::GetChannelCountByFreq;     </div><div class=\"line\">        m_FuncMap[\"GetCurChannelIndex\"] = &amp;PrivateImpl::GetCurChannelIndex;</div><div class=\"line\">        m_FuncMap[\"PlayNumberChannel\"] = &amp;PrivateImpl::PlayNumberChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelListChannelCount\"] = &amp;PrivateImpl::GetChannelListChannelCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelDataList\"] = &amp;PrivateImpl::GetChannelDataList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &amp;PrivateImpl::GetCurDtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurDtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &amp;PrivateImpl::GetCurAtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurAtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"SetCaptionMode\"] = &amp;PrivateImpl::SetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"GetCaptionMode\"] = &amp;PrivateImpl::GetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"SetAnalogCaption\"] = &amp;PrivateImpl::SetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"GetAnalogCaption\"] = &amp;PrivateImpl::GetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"SetDigitalCaption\"] = &amp;PrivateImpl::SetDigitalCaption;</div><div class=\"line\">        m_FuncMap[\"SetChannelFav\"] = &amp;PrivateImpl::SetChannelFav;</div><div class=\"line\">        m_FuncMap[\"SetChannelSkip\"] = &amp;PrivateImpl::SetChannelSkip;</div><div class=\"line\">        m_FuncMap[\"SetChannelBlock\"] = &amp;PrivateImpl::SetChannelBlock;       </div><div class=\"line\">        m_FuncMap[\"SetChannelDel\"] = &amp;PrivateImpl::SetChannelDel;</div><div class=\"line\">        m_FuncMap[\"GetChannelFav\"] = &amp;PrivateImpl::GetChannelFav;</div><div class=\"line\">        m_FuncMap[\"GetChannelSkip\"] = &amp;PrivateImpl::GetChannelSkip;     </div><div class=\"line\">        m_FuncMap[\"GetChannelBlock\"] = &amp;PrivateImpl::GetChannelBlock;</div><div class=\"line\">        m_FuncMap[\"QueryTvStatus\"] = &amp;PrivateImpl::QueryTvStatus;</div><div class=\"line\">        m_FuncMap[\"StartRecordTs\"] = &amp;PrivateImpl::StartRecordTs;</div><div class=\"line\">        m_FuncMap[\"StopRecordTs\"] = &amp;PrivateImpl::StopRecordTs;</div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListCountByChIdx;   </div><div class=\"line\">#ifdef DVB_T                                </div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListByChIdx;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN</div><div class=\"line\">        m_FuncMap[\"StartDetection\"] = &amp;PrivateImpl::StartDetection; </div><div class=\"line\">        m_FuncMap[\"StopDetection\"] = &amp;PrivateImpl::StopDetection;   </div><div class=\"line\">#endif</div><div class=\"line\">#ifdef QAM_MODE_SETTING</div><div class=\"line\">        m_FuncMap[\"GetTvQamConst\"] = &amp;PrivateImpl::GetTvQamConst;</div><div class=\"line\">        m_FuncMap[\"SetTvQamConst\"] = &amp;PrivateImpl::SetTvQamConst;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef SYMBOL_RATE_SETTING_BY_VAL</div><div class=\"line\">        m_FuncMap[\"GetTvSymbolRateValue\"] = &amp;PrivateImpl::GetTvSymbolRateValue;</div><div class=\"line\">        m_FuncMap[\"SetTvSymbolRateValue\"] = &amp;PrivateImpl::SetTvSymbolRateValue;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"SetSubtitleEnable\"] = &amp;PrivateImpl::SetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"GetSubtitleEnable\"] = &amp;PrivateImpl::GetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &amp;PrivateImpl::SetDtvSubtitleByIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &amp;PrivateImpl::GetDtvSubtitleIndexList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &amp;PrivateImpl::GetCurDtvSubtitleIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCount;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCountByCategory;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioType\"] = &amp;PrivateImpl::SetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioType\"] = &amp;PrivateImpl::GetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::SetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::GetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::SetDTVAudioSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::GetDTVAudioSecondaryLang;</div><div class=\"line\">#ifdef ENABLE_NEW_DVB_2</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleType\"] = &amp;PrivateImpl::SetDTVSubtitleType;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleType\"] = &amp;PrivateImpl::GetDTVSubtitleType;</div><div class=\"line\">#endif</div><div class=\"line\">#if defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::SetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::GetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::SetDTVSubtitleSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::GetDTVSubtitleSecondaryLang;</div><div class=\"line\">#endif //defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetATVTableScan\"] = &amp;PrivateImpl::SetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetATVTableScan\"] = &amp;PrivateImpl::GetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetIsNoSignal\"] = &amp;PrivateImpl::GetIsNoSignal;</div><div class=\"line\">        m_FuncMap[\"GetEpgData\"] = &amp;PrivateImpl::GetEpgData;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataByLCN\"] = &amp;PrivateImpl::GetEpgDataByLCN;</div><div class=\"line\">        m_FuncMap[\"GetEpgListEpgCount\"] = &amp;PrivateImpl::GetEpgListEpgCount; </div><div class=\"line\">        m_FuncMap[\"GetAllLCNByCurFreq\"] = &amp;PrivateImpl::GetAllLCNByCurFreq;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataList\"] = &amp;PrivateImpl::GetEpgDataList;</div><div class=\"line\">        m_FuncMap[\"SetTVStopMode\"] = &amp;PrivateImpl::SetTVStopMode;</div><div class=\"line\">        m_FuncMap[\"GetTVStopMode\"] = &amp;PrivateImpl::GetTVStopMode;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><h3 id=\"传输数据的序列-流化\"><a href=\"#传输数据的序列-流化\" class=\"headerlink\" title=\"传输数据的序列/流化\"></a>传输数据的序列/流化</h3></li>\n</ul>\n<p>　　类<code>RpcCommandMuxer</code>和类<code>RpcCommandDemuxer</code>是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。<br>　　<br>　　类<code>IpcStreamerPipeImpl</code>是用于数据的流化处理。</p>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>参见 <strong><code>RpcTestJni.cpp</code></strong> 源文件。</p>\n<hr>\n","excerpt":"<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ol>\n<li><p>RPC 客户端基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC类的实体。每个实体代表一个函数调用。其成员<code>m_StrFuncName</code>是原始调用函数的函数名。<code>m_CallCtxMap</code>为其map组合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcClient::CallContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC回调类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler</div></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol>\n<li><p>数据序列化类(16KB缓存)。将client的指令(TYPE_INVOKE/TYPE_RESULT) 打包并序列化成数据流，提供给<code>IpcStreamer</code>传输。参见<code>RpcCommandType</code>结构体。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandMuxer* m_pCmdMuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据序反列化类(16KB缓存)。将 IpcStreamer中得到的数据流反序列化成指令( TYPE_INVOKE/TYPE_RESULT/TYPE_CALLBACK_RESULT)。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcCommandDemuxer* m_pCmdDemuxer</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流传输通道。实际为FIFO式流。从管道里Read/Write数据，提供给<code>RpcCommandMuxer</code>及<code>RpcCommandDemuxer</code>序列化/反序列化数据。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> rtk::ipc::IpcStreamer* m_pStreamer</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback的map集合。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CallbackMap m_CallbackMap</div></pre></td></tr></table></figure>\n</li>\n<li><p>callback类。继承实现了一个<code>CommandProcessor</code>。其实类为<code>CallbackContext</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient::CallbackHandler* m_pCallbackHandler</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数存储的队列实例。实际将函数指针数据存储在一个list里。其中<code>struct CallbackContext</code>结构即为当前的<code>class CommandProcessor</code>实类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> CommandQueue&lt;CallbackContext&gt; m_CallbackCmdQue</div></pre></td></tr></table></figure>\n</li>\n<li><p>回调函数序列化的数据流结构体。其中<code>pData</code>指针指向已经序列化的指令（回调函数/组）数据流，iDataSize代表数据流数据大小。数据流经过<code>RpcCommandDemuxer</code>反序列化，即可解析出正确的指令（类型为TYPE_CALLBACK_RESULT的 回调函数）。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> CallbackContext</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC客户端实例。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcClient&amp; m_RpcClient</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"类体\"><a href=\"#类体\" class=\"headerlink\" title=\"类体\"></a>类体</h2><ol>\n<li><p>指令流头部数据结构体。内结构顺序为：<br><code>RpcCommandHeader</code>+<code>RpcParamHeader1</code>+<code>data1</code>+<code>...</code>+<code>RpcParamHeaderN</code>+<code>dataN</code>。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcCommandHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcCommandType; <span class=\"comment\">//RCP类型。(TYPE_INVOKE/ TYPE_RESULT 参见RpcCommandType结构体)</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iId; <span class=\"comment\">//唯一ID，用于指示哪个命令。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iTotalLen; <span class=\"comment\">//序列化的指令数据流总长度。并且包含 RpcCommandHeader结构体本身的长度在内。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iParamCounts; <span class=\"comment\">//数据流内单元（RpcParamHeader+data）个数。包括函数参数和函数名。结构及顺序为para1+para2+...paraN+FuncName。</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>数据流单元结构体。函数名及参数均用此结构体序列化。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">struct</span> RpcParamHeader</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamType; <span class=\"comment\">//RPC单元数据类型。参见 enum RpcParamType枚举类型。</span></div><div class=\"line\">    <span class=\"keyword\">unsigned</span> <span class=\"keyword\">int</span> iRpcParamLen; <span class=\"comment\">//RPC单元数据长度。此长度不包含 RpcParamHeader结构体本身长度在内。</span></div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RpcServer接口虚基类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerBase 类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">virtual</span> ~IpcServer() &#123; ; &#125;;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServer</code>，RpcServer基础实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerBase: <span class=\"keyword\">public</span> IpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">// 接口定义在IpcServer类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Start</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Stop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">GetParameter</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerBase();</div><div class=\"line\">    ~IpcServerBase();</div><div class=\"line\">    IpcServerBase (<span class=\"keyword\">const</span> IpcServerBase &amp;) &#123;&#125;</div><div class=\"line\">    IpcServerBase &amp;<span class=\"keyword\">operator</span>= (<span class=\"keyword\">const</span> IpcServerBase&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">protected</span>: <span class=\"comment\">//子类必须实现这些纯虚接口，做具体事情。例如 IpcServerPipeImpl类。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">virtual</span> <span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span> </span>= <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// Used to notify observers</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyOpened</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">NotifyAccepted</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">NotifyClosed</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>继承自<code>IpcServerBase</code>，FIFO类型RpcServer主实现类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerPipeImpl: <span class=\"keyword\">public</span> IpcServerBase</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    IpcServerPipeImpl();</div><div class=\"line\">    ~IpcServerPipeImpl();</div><div class=\"line\">    IpcServerPipeImpl(<span class=\"keyword\">const</span> IpcServerPipeImpl &amp;param) &#123;&#125;</div><div class=\"line\">    IpcServerPipeImpl &amp;<span class=\"keyword\">operator</span> = (<span class=\"keyword\">const</span> IpcServerPipeImpl&amp;) &#123; <span class=\"keyword\">return</span> *<span class=\"keyword\">this</span>; &#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">//接口定义在 IpcServerBase 类中，这里是具体实现。</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStart</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">DoStop</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\">IpcStreamer* <span class=\"title\">DoAccept</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FreeIpcStreamer</span><span class=\"params\">(IpcStreamer* pStreamer)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">IsShutdownServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>IPC服务器端接口类。管理 RpcServer集合等map。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> IpcServerManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span></div><div class=\"line\">    &#123;</div><div class=\"line\">        TIME_OUT_INFINITY = <span class=\"number\">-1</span> <span class=\"comment\">//Time out infinity</span></div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> IpcServerManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">int</span> iIpcImplMode, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">StopAllServers</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">WaitForAllServerStop</span><span class=\"params\">(<span class=\"keyword\">int</span> iTimeout)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">UnregisterObserver</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, IpcServerObserver* pObs)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    IpcServerManager();</div><div class=\"line\">    IpcServerManager(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    IpcServerManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> IpcServerManager&amp;);</div><div class=\"line\">    ~IpcServerManager();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC服务端接口类。实际调用IpcServerManager类方法。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcServer</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    RpcServer();</div><div class=\"line\">    ~RpcServer();</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StartServer</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* pStrServerName, <span class=\"keyword\">void</span>* pParam)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">StopServer</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* <span class=\"title\">GetServerName</span><span class=\"params\">()</span> <span class=\"keyword\">const</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">class</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcServer(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">    RpcServer &amp;<span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcServer &amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>RPC调用执行管理类。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">class</span> RpcExecutorManager</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"keyword\">enum</span> ErrCode</div><div class=\"line\">    &#123;</div><div class=\"line\">        ERR_FAILED = <span class=\"number\">-1</span>,</div><div class=\"line\">    &#125;;</div><div class=\"line\"><span class=\"keyword\">public</span>:</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">static</span> RpcExecutorManager&amp; <span class=\"title\">GetInstance</span><span class=\"params\">()</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">RegisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">UnregisterExecutor</span><span class=\"params\">(RpcExecutor* pExecutor)</span></span>;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Execute</span><span class=\"params\">(RpcCommandDemuxer* pCmdDemuxer,  RpcCallback* pRpcCallback,  <span class=\"keyword\">char</span>* pBuffer, <span class=\"keyword\">int</span> iBufSize)</span></span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    <span class=\"keyword\">struct</span> PrivateImpl;</div><div class=\"line\">    PrivateImpl* m_pImpl;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">private</span>:</div><div class=\"line\">    RpcExecutorManager();</div><div class=\"line\">    ~RpcExecutorManager();</div><div class=\"line\">    RpcExecutorManager(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">    RpcExecutorManager&amp; <span class=\"keyword\">operator</span>=(<span class=\"keyword\">const</span> RpcExecutorManager&amp;);</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h2 id=\"原理及过程分析\"><a href=\"#原理及过程分析\" class=\"headerlink\" title=\"原理及过程分析\"></a>原理及过程分析</h2><ul>\n<li><h3 id=\"RPC机制原理\"><a href=\"#RPC机制原理\" class=\"headerlink\" title=\"RPC机制原理\"></a>RPC机制原理</h3></li>\n</ul>\n<p>　　RealTek的TvService模块的RPC使用Unix基础的FIFO（命名管道）来实现。实际项目中创建了1+2N个FIFO来完成RPC。因为FIFO是单工的，所以只能单向传输。<br>　　<br>　　RpcServer模块在随TvService开机启动运行后，即创建1个FIFO，用于监听并接收RpcClient模块传输过来的<code>IpcPipeImplHeader</code>数据，并根据<code>IpcPipeImplHeader</code>数据中的参数<code>iID</code>来获知与此RpcClient交互的一对R/W属性的FIFO。这对FIFO由连接的RpcClient创建。<br>　　<br>　　RpcClient创建了2个FIFO，用于RpcClient与RpcServer的数据传输 。因为带有 RpcClient的<code>iID</code>，此参数<code>iID</code>保证系统内随机性和唯一性，所以RpcServer能通过此参数来识别对应的RpcClient,并与之交互。RpcClient将参数存储在<code>IpcPipeImplHeader</code>结构体中，通过RpcServer已经创建好的FIFO传输给RpcServer。这里，RpcClient知道RpcServer所创建的FIFO，是因为在编码里就已经约定好的FIFO文件路径，所以RpcClient只需要按此路径去打开这个FIFO，往里面写入数据即可。而且，因为RpcServer是跟随TvService一起启动的，而TvService是一个单独的进程，很早就启动完成，所以能够保证在RpcClient打开这个FIFO并写入文件时，对应的RpcServer已经创建成功这个FIFO了。<br>　　<br>　　同理，系统里可能存在多个此对R/W属性的FIFO。因为可能有多个RpcClient同时存在。如果有其它RpcClient连接RpcServer的话，则同样有一对FIFO提供给RpcServer，提供方法是通过向RpcServer创建的FIFO写入<code>IpcPipeImplHeader</code>数据来实现沟通。</p>\n<ul>\n<li><h3 id=\"RpcServer启动过程\"><a href=\"#RpcServer启动过程\" class=\"headerlink\" title=\"RpcServer启动过程\"></a>RpcServer启动过程</h3></li>\n</ul>\n<p>　　构造RpcServer时，通过调用<code>IpcServerManager</code>接口类初始化来创建实例，并<code>StartServer</code>。而在<code>StartServer</code>方法中调用了<code>IpcServerPipeImpl</code>类构造函数来实例化 <strong>IPC_PIPE</strong> 型RpcServer对象，并<code>Start</code>服务。<code>IpcServerPipeImpl</code>接口类继承自<code>IpcServerBase</code>接口类，<code>Start</code>方法在<code>IpcServerBase</code>接口类中，而<code>Start</code>方法又通过虚接口调用了子类<code>IpcServerPipeImpl</code>类中的<code>DoStart</code>方法来创建FIFO，然后调用<code>IpcServerBase</code>接口类中的<code>StartAccetpClient</code>方法来启动接收RpcClient数据的服务。<code>IpcServerBase</code>接口类中的<code>PrivateImpl</code>成员类是继承自<code>CommandProcessor</code>类的对象，用于开始接收并通知streamer的接收数据。在<code>StartAccetpClient</code>方法中创建了一个<code>CommandQueue</code>类，通过调用此类的<code>AddCommand</code>方法并用 <strong>ACCEPT_COMMAND</strong> 参数（此参数目前不起任何作用）来创建一个等待指令的线程<code>Policy1Proc</code>。如果监测到有事件发生，此线程调用<code>IpcServerBase::PrivateImpl</code>这个 <code>CommandProcessor</code>对象中的<code>Execute</code>方法来执行。而<code>Execute</code>方法里又调用了<code>IpcServerPipeImpl</code>接口类中的<code>DoAccept</code>方法接收所有来自RpcServer创建的FIFO的数据。而RpcClient在启动连接RpcServer时会向这个FIFO传输<code>IpcPipeImplHeader</code>结构的数据。<br>　　<br>　　RpcServer接收到<code>IpcPipeImplHeader</code>结构的数据后，调用<code>CreateStreamerByCommand</code>方法来分析数据，然后像RpcClient的初始化动作一样，通过 调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并放到streamer类map中存储。其中，因为接收到的数据中有<code>iID</code>这个成员是表示其唯一性的（RpcClient的connnect流程中是通过rand方法来获取的），而且当RpcServer接收到此数据时，RpcClient端已经创建了2个FIFO，所以RpcServer后面会直接使用这2个FIFO向RpcClient端回传数据。</p>\n<ul>\n<li><h3 id=\"RpcClient启动过程\"><a href=\"#RpcClient启动过程\" class=\"headerlink\" title=\"RpcClient启动过程\"></a>RpcClient启动过程</h3></li>\n</ul>\n<p>　　与RpcServer类似，不赘述。</p>\n<ul>\n<li><h3 id=\"RpcClient与RpcServer交互过程\"><a href=\"#RpcClient与RpcServer交互过程\" class=\"headerlink\" title=\"RpcClient与RpcServer交互过程\"></a>RpcClient与RpcServer交互过程</h3></li>\n</ul>\n<p>　　RpcServer先启动，创建好监听RpcClient的FIFO。<br>　　<br>　　调用<code>IpcClientFactory</code>类创建实例对像，实际调用<code>IpcClientPipeImpl</code>类来构造RpcClient。并加入到<code>ClientList</code>vctor容器中。<br>　　<br>　　RpcClient构造后开始连接RpcServer(<code>IpcClientPipeImpl::Connect</code>)。先<code>open</code>打开RpcServer创建好的FIFO，并向FIFO<code>write</code>一个<code>IpcPipeImplHeader</code>结构体的数据后关闭FIFO。然后调用<code>IpcStreamerPipeImpl</code>类创建streamer(<code>IpcStreamerPipeImpl::Create</code>)，并<code>open</code>打开(<code>IpcStreamerPipeImpl::DoOpen</code>)，此方法中将创建2个FIFO，并将其设为一读一写（因为FIFO是单工）。</p>\n<ul>\n<li><h3 id=\"INVOKE远程调用执行过程\"><a href=\"#INVOKE远程调用执行过程\" class=\"headerlink\" title=\"INVOKE远程调用执行过程\"></a>INVOKE远程调用执行过程</h3></li>\n</ul>\n<p>　　当RpcClient类有一个函数需要invoke调用底层TvService里的函数时，需要将invoke参数顺序<code>push</code>，最后<code>push</code>函数名，最后<code>finish</code>。然后调用<code>RpcCommandMuxer</code>类对数据序列化并流化，通过RpcClient创建的具有W属性的FIFO传输出去。RpcServer会通过具有此PIPE(对应到RpcServer端是R属性)读取到数据流，并在server端为此新生成一个新的streamer及线程等相关资源，专门用来接收此次通信的流数据，并调用<code>RpcCommandDemuxer</code>类反序列化数据。并调用<code>RpcExecutorManager</code>类里的方法来执行相关动作。<br>　　<br>　　其中<code>RpcExecutorManager</code>是一个专用于管理<code>RpcExecutor</code>类对象的管理器。同样的还有<code>IpcServerManager</code>。<br>　　<br>　　而<code>RpcExecutor</code>是真正执行函数调用的类。它被用于模块初始化时调用，通过<code>RegisterExecutor</code>/<code>UnregisterExecutor</code>方法注册/反注册到<code>RpcExecutorManager</code>类中的list中。它的<code>Execute</code>方法即是真正执行invoke函数的地方，执行完返回的结果是一个已经序列化的以<code>RpcCommandMuxer</code>类表示的数据。<br>　　　　<br>　　RpcServer回传函数调用结果的方式与RpcClient远程调用函数的传输方式一样，不同点在于调用<code>RpcCommandMuxer</code>序列化数据时，头部<code>RpcCommandHeader</code>结构体数据里面填充的<code>iRpcCommandType</code>参数数据不同。<br>　　<br>　　TvService模块初始化时调用<code>RpcExecutor</code>类来注册供RpcClient远程调用invoke的native函数集合，其成员<code>m_FuncMap</code>是一个<code>RpcCommandMuxer* (PrivateImpl::*fpFunction)(RpcCommandDemuxer*, RpcCallback*);</code>类型的函数指针成员的map。通过查找map中的映射关系，最终找到native函数，并执行。执行完将结果封装成<code>RpcCommandMuxer</code>流数据返回。\n　　</p>\n<blockquote>\n<p><strong>例如:</strong> <code>TvChannelApiExecutor</code>类。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div></pre></td><td class=\"code\"><pre><div class=\"line\">class PrivateImpl(): m_CmdMuxer(m_Buffer, sizeof(m_Buffer)),</div><div class=\"line\">                   m_bFirstPlay(false)</div><div class=\"line\">    &#123;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStart\"] = &amp;PrivateImpl::TvAutoScanStart;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStop\"] = &amp;PrivateImpl::TvAutoScanStop;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanComplete\"] = &amp;PrivateImpl::TvAutoScanComplete; </div><div class=\"line\">        m_FuncMap[\"TvAutoScanStartWithRange\"] = &amp;PrivateImpl::TvAutoScanStartWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanStopWithRange\"] = &amp;PrivateImpl::TvAutoScanStopWithRange;</div><div class=\"line\">        m_FuncMap[\"TvAutoScanCompleteWithRange\"] = &amp;PrivateImpl::TvAutoScanCompleteWithRange;  </div><div class=\"line\">        m_FuncMap[\"TvSeekScanStart\"] = &amp;PrivateImpl::TvSeekScanStart;</div><div class=\"line\">        m_FuncMap[\"TvSeekScanStop\"] = &amp;PrivateImpl::TvSeekScanStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStart\"] = &amp;PrivateImpl::TvScanManualStart;</div><div class=\"line\">        m_FuncMap[\"TvScanManualStop\"] = &amp;PrivateImpl::TvScanManualStop;</div><div class=\"line\">        m_FuncMap[\"TvScanManualComplete\"] = &amp;PrivateImpl::TvScanManualComplete;</div><div class=\"line\">        m_FuncMap[\"TvScanInfo\"] = &amp;PrivateImpl::TvScanInfo;</div><div class=\"line\">        m_FuncMap[\"IsTvScanning\"] = &amp;PrivateImpl::IsTvScanning;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanStartFreq\"] = &amp;PrivateImpl::GetAtvSeqScanStartFreq;</div><div class=\"line\">        m_FuncMap[\"GetAtvSeqScanEndFreq\"] = &amp;PrivateImpl::GetAtvSeqScanEndFreq;</div><div class=\"line\">        m_FuncMap[\"SetDtvScanType\"] = &amp;PrivateImpl::SetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"GetDtvScanType\"] = &amp;PrivateImpl::GetDtvScanType;</div><div class=\"line\">        m_FuncMap[\"PlayNextChannel\"] = &amp;PrivateImpl::PlayNextChannel;</div><div class=\"line\">        m_FuncMap[\"PlayPrevChannel\"] = &amp;PrivateImpl::PlayPrevChannel;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannel\"] = &amp;PrivateImpl::PlayFirstChannel;</div><div class=\"line\">        m_FuncMap[\"PlayHistoryChannel\"] = &amp;PrivateImpl::PlayHistoryChannel;</div><div class=\"line\">        m_FuncMap[\"DumpTvChannelList\"] = &amp;PrivateImpl::DumpTvChannelList;</div><div class=\"line\">        m_FuncMap[\"SetDefaultFilter\"] = &amp;PrivateImpl::SetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetDefaultFilter\"] = &amp;PrivateImpl::GetDefaultFilter;</div><div class=\"line\">        m_FuncMap[\"GetCurChannel\"] = &amp;PrivateImpl::GetCurChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelInfoByIndex\"] = &amp;PrivateImpl::GetChannelInfoByIndex;</div><div class=\"line\">        m_FuncMap[\"GetChInfoArray\"] = &amp;PrivateImpl::GetChInfoArray;</div><div class=\"line\">        m_FuncMap[\"GetChannelBandwidth\"] = &amp;PrivateImpl::GetChannelBandwidth;</div><div class=\"line\">        m_FuncMap[\"GetChannelName\"] = &amp;PrivateImpl::GetChannelName;</div><div class=\"line\">        m_FuncMap[\"GetChannelCount\"] = &amp;PrivateImpl::GetChannelCount;</div><div class=\"line\">        m_FuncMap[\"SortChannel\"] = &amp;PrivateImpl::SortChannel;</div><div class=\"line\">        m_FuncMap[\"SaveChannel\"] = &amp;PrivateImpl::SaveChannel;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByIndex\"] = &amp;PrivateImpl::PlayChannelByIndex;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByNum\"] = &amp;PrivateImpl::PlayChannelByNum;</div><div class=\"line\">        m_FuncMap[\"PlayChannel\"] = &amp;PrivateImpl::PlayChannel;       </div><div class=\"line\">        m_FuncMap[\"PlayChannelByLCN\"] = &amp;PrivateImpl::PlayChannelByLCN;</div><div class=\"line\">        m_FuncMap[\"PlayFirstChannelInFreq\"] = &amp;PrivateImpl::PlayFirstChannelInFreq;</div><div class=\"line\">        m_FuncMap[\"PlayChannelByChnumFreq\"] = &amp;PrivateImpl::PlayChannelByChnumFreq;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByIdxEx\"] = &amp;PrivateImpl::SwapChannelByIdxEx;</div><div class=\"line\">        m_FuncMap[\"SwapChannelByNumEx\"] = &amp;PrivateImpl::SwapChannelByNumEx;</div><div class=\"line\">        m_FuncMap[\"ReloadLastPlayedSource\"] = &amp;PrivateImpl::ReloadLastPlayedSource;</div><div class=\"line\">        m_FuncMap[\"SetCurChannelSkipped\"] = &amp;PrivateImpl::SetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"SetCurAtvSoundStd\"] = &amp;PrivateImpl::SetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"FineTuneCurFrequency\"] = &amp;PrivateImpl::FineTuneCurFrequency;</div><div class=\"line\">        m_FuncMap[\"SetCurChAudioCompensation\"] = &amp;PrivateImpl::SetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"SetSource\"] = &amp;PrivateImpl::SetSource;</div><div class=\"line\">        m_FuncMap[\"SetBootSource\"] = &amp;PrivateImpl::SetBootSource;</div><div class=\"line\">        m_FuncMap[\"GetCurChannelSkipped\"] = &amp;PrivateImpl::GetCurChannelSkipped;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundStd\"] = &amp;PrivateImpl::GetCurAtvSoundStd;</div><div class=\"line\">        m_FuncMap[\"GetCurChAudioCompensation\"] = &amp;PrivateImpl::GetCurChAudioCompensation;</div><div class=\"line\">        m_FuncMap[\"GetSourceList\"] = &amp;PrivateImpl::GetSourceList;</div><div class=\"line\">        m_FuncMap[\"GetSourceListCnt\"] = &amp;PrivateImpl::GetSourceListCnt;</div><div class=\"line\">        m_FuncMap[\"GetCurSourceType\"] = &amp;PrivateImpl::GetCurSourceType;</div><div class=\"line\">        m_FuncMap[\"GetBootSource\"] = &amp;PrivateImpl::GetBootSource;</div><div class=\"line\">#if defined (TVSERVER_IDTV)</div><div class=\"line\">        m_FuncMap[\"GetIDTVSubSource\"] = &amp;PrivateImpl::GetIDTVSubSource;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"GetCurTvType\"] = &amp;PrivateImpl::GetCurTvType; </div><div class=\"line\">        m_FuncMap[\"GetChannelNameList\"] = &amp;PrivateImpl::GetChannelNameList;    </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramInfo\"] = &amp;PrivateImpl::GetCurrentProgramInfo;                   </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramDescription\"] = &amp;PrivateImpl::GetCurrentProgramDescription;                         </div><div class=\"line\">        m_FuncMap[\"GetCurrentProgramRating\"] = &amp;PrivateImpl::GetCurrentProgramRating;   </div><div class=\"line\">        m_FuncMap[\"HasCurrentProgramWithSubtitle\"] = &amp;PrivateImpl::HasCurrentProgramWithSubtitle;           </div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelect\"] = &amp;PrivateImpl::GetCurAtvSoundSelect;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvAudioPID\"]=&amp;PrivateImpl::GetCurDtvAudioPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvVideoPID\"]=&amp;PrivateImpl::GetCurDtvVideoPID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvTSID\"]=&amp;PrivateImpl::GetCurDtvTSID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvServiceID\"]=&amp;PrivateImpl::GetCurDtvServiceID;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvPCR\"]=&amp;PrivateImpl::GetCurDtvPCR;</div><div class=\"line\">        m_FuncMap[\"SetCurDtvSoundSelectByIndex\"] = &amp;PrivateImpl::SetCurDtvSoundSelectByIndex;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectIndex\"]=&amp;PrivateImpl::GetCurDtvSoundSelectIndex;     </div><div class=\"line\">        m_FuncMap[\"GetCurrentAudioLang\"] = &amp;PrivateImpl::GetCurrentAudioLang;</div><div class=\"line\">        m_FuncMap[\"GetCurInputInfo\"] = &amp;PrivateImpl::GetCurInputInfo;</div><div class=\"line\">        m_FuncMap[\"GetCurrentSetting_tv\"] = &amp;PrivateImpl::GetCurrentSetting_tv;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqCount\"] = &amp;PrivateImpl::GetChannelFreqCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelFreqByTableIndex\"] = &amp;PrivateImpl::GetChannelFreqByTableIndex;   </div><div class=\"line\">        m_FuncMap[\"GetChannelchannelNumByTableIndex\"] = &amp;PrivateImpl::GetChannelchannelNumByTableIndex;      </div><div class=\"line\">        m_FuncMap[\"GetChannelCountByFreq\"] = &amp;PrivateImpl::GetChannelCountByFreq;     </div><div class=\"line\">        m_FuncMap[\"GetCurChannelIndex\"] = &amp;PrivateImpl::GetCurChannelIndex;</div><div class=\"line\">        m_FuncMap[\"PlayNumberChannel\"] = &amp;PrivateImpl::PlayNumberChannel;</div><div class=\"line\">        m_FuncMap[\"GetChannelListChannelCount\"] = &amp;PrivateImpl::GetChannelListChannelCount;</div><div class=\"line\">        m_FuncMap[\"GetChannelDataList\"] = &amp;PrivateImpl::GetChannelDataList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectList\"] = &amp;PrivateImpl::GetCurDtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurDtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectList\"] = &amp;PrivateImpl::GetCurAtvSoundSelectList;</div><div class=\"line\">        m_FuncMap[\"GetCurAtvSoundSelectCount\"] = &amp;PrivateImpl::GetCurAtvSoundSelectCount;</div><div class=\"line\">        m_FuncMap[\"SetCaptionMode\"] = &amp;PrivateImpl::SetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"GetCaptionMode\"] = &amp;PrivateImpl::GetCaptionMode;</div><div class=\"line\">        m_FuncMap[\"SetAnalogCaption\"] = &amp;PrivateImpl::SetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"GetAnalogCaption\"] = &amp;PrivateImpl::GetAnalogCaption;</div><div class=\"line\">        m_FuncMap[\"SetDigitalCaption\"] = &amp;PrivateImpl::SetDigitalCaption;</div><div class=\"line\">        m_FuncMap[\"SetChannelFav\"] = &amp;PrivateImpl::SetChannelFav;</div><div class=\"line\">        m_FuncMap[\"SetChannelSkip\"] = &amp;PrivateImpl::SetChannelSkip;</div><div class=\"line\">        m_FuncMap[\"SetChannelBlock\"] = &amp;PrivateImpl::SetChannelBlock;       </div><div class=\"line\">        m_FuncMap[\"SetChannelDel\"] = &amp;PrivateImpl::SetChannelDel;</div><div class=\"line\">        m_FuncMap[\"GetChannelFav\"] = &amp;PrivateImpl::GetChannelFav;</div><div class=\"line\">        m_FuncMap[\"GetChannelSkip\"] = &amp;PrivateImpl::GetChannelSkip;     </div><div class=\"line\">        m_FuncMap[\"GetChannelBlock\"] = &amp;PrivateImpl::GetChannelBlock;</div><div class=\"line\">        m_FuncMap[\"QueryTvStatus\"] = &amp;PrivateImpl::QueryTvStatus;</div><div class=\"line\">        m_FuncMap[\"StartRecordTs\"] = &amp;PrivateImpl::StartRecordTs;</div><div class=\"line\">        m_FuncMap[\"StopRecordTs\"] = &amp;PrivateImpl::StopRecordTs;</div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListCountByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListCountByChIdx;   </div><div class=\"line\">#ifdef DVB_T                                </div><div class=\"line\">        m_FuncMap[\"GetEpgDailyListByChIdx\"] = &amp;PrivateImpl::GetEpgDailyListByChIdx;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef ENABLE_FACE_DETECTION_FOR_MAGELLAN</div><div class=\"line\">        m_FuncMap[\"StartDetection\"] = &amp;PrivateImpl::StartDetection; </div><div class=\"line\">        m_FuncMap[\"StopDetection\"] = &amp;PrivateImpl::StopDetection;   </div><div class=\"line\">#endif</div><div class=\"line\">#ifdef QAM_MODE_SETTING</div><div class=\"line\">        m_FuncMap[\"GetTvQamConst\"] = &amp;PrivateImpl::GetTvQamConst;</div><div class=\"line\">        m_FuncMap[\"SetTvQamConst\"] = &amp;PrivateImpl::SetTvQamConst;</div><div class=\"line\">#endif</div><div class=\"line\">#ifdef SYMBOL_RATE_SETTING_BY_VAL</div><div class=\"line\">        m_FuncMap[\"GetTvSymbolRateValue\"] = &amp;PrivateImpl::GetTvSymbolRateValue;</div><div class=\"line\">        m_FuncMap[\"SetTvSymbolRateValue\"] = &amp;PrivateImpl::SetTvSymbolRateValue;</div><div class=\"line\">#endif</div><div class=\"line\">        m_FuncMap[\"SetSubtitleEnable\"] = &amp;PrivateImpl::SetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"GetSubtitleEnable\"] = &amp;PrivateImpl::GetSubtitleEnable;</div><div class=\"line\">        m_FuncMap[\"SetDtvSubtitleByIndex\"] = &amp;PrivateImpl::SetDtvSubtitleByIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexList\"] = &amp;PrivateImpl::GetDtvSubtitleIndexList;</div><div class=\"line\">        m_FuncMap[\"GetCurDtvSubtitleIndex\"] = &amp;PrivateImpl::GetCurDtvSubtitleIndex;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCount\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCount;</div><div class=\"line\">        m_FuncMap[\"GetDtvSubtitleIndexListCountByCategory\"] = &amp;PrivateImpl::GetDtvSubtitleIndexListCountByCategory;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioType\"] = &amp;PrivateImpl::SetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioType\"] = &amp;PrivateImpl::GetDTVAudioType;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::SetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioPrimaryLang\"] = &amp;PrivateImpl::GetDTVAudioPrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::SetDTVAudioSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVAudioSecondaryLang\"] = &amp;PrivateImpl::GetDTVAudioSecondaryLang;</div><div class=\"line\">#ifdef ENABLE_NEW_DVB_2</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleType\"] = &amp;PrivateImpl::SetDTVSubtitleType;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleType\"] = &amp;PrivateImpl::GetDTVSubtitleType;</div><div class=\"line\">#endif</div><div class=\"line\">#if defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::SetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitlePrimaryLang\"] = &amp;PrivateImpl::GetDTVSubtitlePrimaryLang;</div><div class=\"line\">        m_FuncMap[\"SetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::SetDTVSubtitleSecondaryLang;</div><div class=\"line\">        m_FuncMap[\"GetDTVSubtitleSecondaryLang\"] = &amp;PrivateImpl::GetDTVSubtitleSecondaryLang;</div><div class=\"line\">#endif //defined(DVB_SUBTITLE)</div><div class=\"line\">        m_FuncMap[\"SetATVTableScan\"] = &amp;PrivateImpl::SetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetATVTableScan\"] = &amp;PrivateImpl::GetATVTableScan;</div><div class=\"line\">        m_FuncMap[\"GetIsNoSignal\"] = &amp;PrivateImpl::GetIsNoSignal;</div><div class=\"line\">        m_FuncMap[\"GetEpgData\"] = &amp;PrivateImpl::GetEpgData;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataByLCN\"] = &amp;PrivateImpl::GetEpgDataByLCN;</div><div class=\"line\">        m_FuncMap[\"GetEpgListEpgCount\"] = &amp;PrivateImpl::GetEpgListEpgCount; </div><div class=\"line\">        m_FuncMap[\"GetAllLCNByCurFreq\"] = &amp;PrivateImpl::GetAllLCNByCurFreq;</div><div class=\"line\">        m_FuncMap[\"GetEpgDataList\"] = &amp;PrivateImpl::GetEpgDataList;</div><div class=\"line\">        m_FuncMap[\"SetTVStopMode\"] = &amp;PrivateImpl::SetTVStopMode;</div><div class=\"line\">        m_FuncMap[\"GetTVStopMode\"] = &amp;PrivateImpl::GetTVStopMode;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n</blockquote>\n<ul>\n<li><h3 id=\"传输数据的序列-流化\"><a href=\"#传输数据的序列-流化\" class=\"headerlink\" title=\"传输数据的序列/流化\"></a>传输数据的序列/流化</h3></li>\n</ul>\n<p>　　类<code>RpcCommandMuxer</code>和类<code>RpcCommandDemuxer</code>是用于RpcClient与RpcServer之间沟通数据的序列化与反序列化。<br>　　<br>　　类<code>IpcStreamerPipeImpl</code>是用于数据的流化处理。</p>\n<hr>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>参见 <strong><code>RpcTestJni.cpp</code></strong> 源文件。</p>\n<hr>"},{"title":"mosquitto bridge 桥接设置","date":"2015-05-18T03:18:41.000Z","_content":"\n下面是mosquitto桥接模式的一些参数简单设置。\n上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。\n<!--more-->\n\n----------\n\nbridge桥接配置文件mosquitto.conf内容如下：\n\n     user root\n \tpid_file /var/run/mosquitto.pid\n \tport 61883\n \tpersistence true\n \tpersistence_location /skydir/sshome/\n \tconnection LOCAL-SERVER\n \tremote_clientid MSTARTV_REMOTE\n \tlocal_clientid MSTARTV_LOCAL\n \taddress 4.12.12.6:61883\n \ttopic # both 0 sshome/ sshome/\n \tbridge_protocol_version mqttv311\n\n##1.connection\nbridge时用于表示此桥接的别名。\n格式为:\n\n \tconnection LOCAL-SERVER\n\nlog如:\n\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n\n##2.remote_clientid\n用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。\n格式为：\n\n    remote_clientid BRIDGE_REMOTE\n\n注意：如果不设置。系统为默认分配一个形如localhost.***connection***的别名。\nlog如：\n\n    May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\n    May 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **<font color=red>localhost.LOCAL-SERVER</font>** (c0, k60).\n    May 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n\n##3.local_clientid\n同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。\n格式为：\n\n    local_clientid BRIDGE_LOCAL\n\n##4.address\nbridge的桥接地址和端口。标示远端服务器的IP地址和端口。\n格式为：\n\n    address 8.8.8.8:61883。\n\n##5.topic\nbridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。\n例如:\n\n    topic # both 0 sshome/ sshome/\n\n##6.案例.实践\nPC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n \t\n \ttest msg. pc-mstartv-server-pc.\n \thello,server! what can i do for you?\n \thello,server! what can i do for you?\n \they,are you ok、\n\nPC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hey,are you ok、\"\n\n本地local_mqtt_server运行。\n\n \tmosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n \t1431916959: Config loaded from sshome.conf.\n \t1431916959: Opening ipv6 listen socket on port 61883.\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n\n云端remote_mqtt_server运行。\n\n \tMay 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\n \tMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n\n\n\n运行过程:\n>1.启动local_mqtt_server。\n2.启动remote_mqtt_server。\n3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如**\"sshome/sshome\"**。模拟设备连接云端mqtt服务器。\n4.运行PC上的pub客户端，将信息\"hey,are you ok、\"发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如**\"sshome\"**。模拟设备连接本地mqtt服务器。\n5.此时，信息\"hey,are you ok、\"即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。\n6.服务器转发的内容如下:\n\n>  \tid\thdr\tmid\ttopic\tpayload\tctime\n \t124982 (d0, q0, r0) 0 **sshome/sshome** \"hey,are you ok\" 2015-05-18 12:05:51\n\n\n\n注意：sub客户端订阅的topic为**\"sshome/sshome\"**,而不是mosquitto.conf中的**\"sshome/\"**。\n详细说明见[mosquitto的官方手册](http://mosquitto.org/man/mosquitto-conf-5.html)。\n\n    topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n> Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.\n\n> The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.\n\n> For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.\n\n> For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.\n\n> When using topic mapping, an empty prefix can be defined using the place marker \"\". Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.\n\n> \t \t Topic\tLocal_Prefix\tRemote_Prefix\tValidity\n \t1\tvalue\tvalue\tvalue\tvalid\n \t2\tvalue\tvalue\t\"\"\tvalid\n \t3\tvalue\t\"\"\tvalue\tvalid\n \t4\tvalue\t\"\"\t\"\"\tvalid (no remapping)\n \t5\t\"\"\tvalue\tvalue\tvalid (remap single local topic to remote)\n \t6\t\"\"\tvalue\t\"\"\tinvalid\n \t7\t\"\"\t\"\"\tvalue\tinvalid\n \t8\t\"\"\t\"\"\t\"\"\tinvalid\n\n> To remap an entire topic tree, use e.g.:\ntopic # both 2 local/topic/ remote/topic/\nThis option can be specified multiple times per bridge.\n\n> Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.\n\n> See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.\n\n> Example Bridge Topic Remapping. \nThe configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total\n\n> connection test-mosquitto-org\naddress test.mosquitto.org\ncleansession true\ntopic clients/total in 0 test/mosquitto/org $SYS/broker/\n","source":"_posts/mosquitto-bridge-桥接设置.md","raw":"title: \"mosquitto bridge 桥接设置\"\ndate: 2015-05-18 11:18:41\ncategories:\n - work\ntags:\n - mosquitto\n---\n\n下面是mosquitto桥接模式的一些参数简单设置。\n上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。\n<!--more-->\n\n----------\n\nbridge桥接配置文件mosquitto.conf内容如下：\n\n     user root\n \tpid_file /var/run/mosquitto.pid\n \tport 61883\n \tpersistence true\n \tpersistence_location /skydir/sshome/\n \tconnection LOCAL-SERVER\n \tremote_clientid MSTARTV_REMOTE\n \tlocal_clientid MSTARTV_LOCAL\n \taddress 4.12.12.6:61883\n \ttopic # both 0 sshome/ sshome/\n \tbridge_protocol_version mqttv311\n\n##1.connection\nbridge时用于表示此桥接的别名。\n格式为:\n\n \tconnection LOCAL-SERVER\n\nlog如:\n\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n\n##2.remote_clientid\n用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。\n格式为：\n\n    remote_clientid BRIDGE_REMOTE\n\n注意：如果不设置。系统为默认分配一个形如localhost.***connection***的别名。\nlog如：\n\n    May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\n    May 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **<font color=red>localhost.LOCAL-SERVER</font>** (c0, k60).\n    May 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n\n##3.local_clientid\n同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。\n格式为：\n\n    local_clientid BRIDGE_LOCAL\n\n##4.address\nbridge的桥接地址和端口。标示远端服务器的IP地址和端口。\n格式为：\n\n    address 8.8.8.8:61883。\n\n##5.topic\nbridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。\n例如:\n\n    topic # both 0 sshome/ sshome/\n\n##6.案例.实践\nPC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n \t\n \ttest msg. pc-mstartv-server-pc.\n \thello,server! what can i do for you?\n \thello,server! what can i do for you?\n \they,are you ok、\n\nPC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。\n\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hello,server! what can i do for you?\"\n \tC:\\Program Files (x86)\\mosquitto>mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m \"hey,are you ok、\"\n\n本地local_mqtt_server运行。\n\n \tmosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n \t1431916959: Config loaded from sshome.conf.\n \t1431916959: Opening ipv6 listen socket on port 61883.\n \t1431916959: Opening ipv4 listen socket on port 61883.\n \t1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n\n云端remote_mqtt_server运行。\n\n \tMay 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\n \tMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n\n\n\n运行过程:\n>1.启动local_mqtt_server。\n2.启动remote_mqtt_server。\n3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如**\"sshome/sshome\"**。模拟设备连接云端mqtt服务器。\n4.运行PC上的pub客户端，将信息\"hey,are you ok、\"发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如**\"sshome\"**。模拟设备连接本地mqtt服务器。\n5.此时，信息\"hey,are you ok、\"即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。\n6.服务器转发的内容如下:\n\n>  \tid\thdr\tmid\ttopic\tpayload\tctime\n \t124982 (d0, q0, r0) 0 **sshome/sshome** \"hey,are you ok\" 2015-05-18 12:05:51\n\n\n\n注意：sub客户端订阅的topic为**\"sshome/sshome\"**,而不是mosquitto.conf中的**\"sshome/\"**。\n详细说明见[mosquitto的官方手册](http://mosquitto.org/man/mosquitto-conf-5.html)。\n\n    topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n> Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.\n\n> The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.\n\n> For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.\n\n> For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.\n\n> When using topic mapping, an empty prefix can be defined using the place marker \"\". Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.\n\n> \t \t Topic\tLocal_Prefix\tRemote_Prefix\tValidity\n \t1\tvalue\tvalue\tvalue\tvalid\n \t2\tvalue\tvalue\t\"\"\tvalid\n \t3\tvalue\t\"\"\tvalue\tvalid\n \t4\tvalue\t\"\"\t\"\"\tvalid (no remapping)\n \t5\t\"\"\tvalue\tvalue\tvalid (remap single local topic to remote)\n \t6\t\"\"\tvalue\t\"\"\tinvalid\n \t7\t\"\"\t\"\"\tvalue\tinvalid\n \t8\t\"\"\t\"\"\t\"\"\tinvalid\n\n> To remap an entire topic tree, use e.g.:\ntopic # both 2 local/topic/ remote/topic/\nThis option can be specified multiple times per bridge.\n\n> Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.\n\n> See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.\n\n> Example Bridge Topic Remapping. \nThe configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total\n\n> connection test-mosquitto-org\naddress test.mosquitto.org\ncleansession true\ntopic clients/total in 0 test/mosquitto/org $SYS/broker/\n","slug":"mosquitto-bridge-桥接设置","published":1,"updated":"2016-07-14T12:19:05.394Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9e000a00n9li7xr7r3","content":"<p>下面是mosquitto桥接模式的一些参数简单设置。<br>上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。<br><a id=\"more\"></a></p>\n<hr>\n<p>bridge桥接配置文件mosquitto.conf内容如下：</p>\n<pre><code>user root\npid_file /var/run/mosquitto.pid\nport 61883\npersistence true\npersistence_location /skydir/sshome/\nconnection LOCAL-SERVER\nremote_clientid MSTARTV_REMOTE\nlocal_clientid MSTARTV_LOCAL\naddress 4.12.12.6:61883\ntopic # both 0 sshome/ sshome/\nbridge_protocol_version mqttv311\n</code></pre><p>##1.connection<br>bridge时用于表示此桥接的别名。<br>格式为:</p>\n<pre><code>connection LOCAL-SERVER\n</code></pre><p>log如:</p>\n<pre><code>1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n</code></pre><p>##2.remote_clientid<br>用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。<br>格式为：</p>\n<pre><code>remote_clientid BRIDGE_REMOTE\n</code></pre><p>注意：如果不设置。系统为默认分配一个形如localhost.<strong><em>connection</em></strong>的别名。<br>log如：</p>\n<pre><code>May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\nMay 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **&lt;font color=red&gt;localhost.LOCAL-SERVER&lt;/font&gt;** (c0, k60).\nMay 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n</code></pre><p>##3.local_clientid<br>同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。<br>格式为：</p>\n<pre><code>local_clientid BRIDGE_LOCAL\n</code></pre><p>##4.address<br>bridge的桥接地址和端口。标示远端服务器的IP地址和端口。<br>格式为：</p>\n<pre><code>address 8.8.8.8:61883。\n</code></pre><p>##5.topic<br>bridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。<br>例如:</p>\n<pre><code>topic # both 0 sshome/ sshome/\n</code></pre><p>##6.案例.实践<br>PC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n\ntest msg. pc-mstartv-server-pc.\nhello,server! what can i do for you?\nhello,server! what can i do for you?\nhey,are you ok、\n</code></pre><p>PC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hey,are you ok、&quot;\n</code></pre><p>本地local_mqtt_server运行。</p>\n<pre><code>mosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n1431916959: Config loaded from sshome.conf.\n1431916959: Opening ipv6 listen socket on port 61883.\n1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n</code></pre><p>云端remote_mqtt_server运行。</p>\n<pre><code>May 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\nMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n</code></pre><p>运行过程:</p>\n<blockquote>\n<p>1.启动local_mqtt_server。<br>2.启动remote_mqtt_server。<br>3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如<strong>“sshome/sshome”</strong>。模拟设备连接云端mqtt服务器。<br>4.运行PC上的pub客户端，将信息”hey,are you ok、”发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如<strong>“sshome”</strong>。模拟设备连接本地mqtt服务器。<br>5.此时，信息”hey,are you ok、”即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。<br>6.服务器转发的内容如下:</p>\n<pre><code>id    hdr    mid    topic    payload    ctime\n124982 (d0, q0, r0) 0 **sshome/sshome** &quot;hey,are you ok&quot; 2015-05-18 12:05:51\n</code></pre></blockquote>\n<p>注意：sub客户端订阅的topic为<strong>“sshome/sshome”</strong>,而不是mosquitto.conf中的<strong>“sshome/“</strong>。<br>详细说明见<a href=\"http://mosquitto.org/man/mosquitto-conf-5.html\" target=\"_blank\" rel=\"external\">mosquitto的官方手册</a>。</p>\n<pre><code>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n</code></pre><blockquote>\n<p>Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.</p>\n<p>The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.</p>\n<p>For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.</p>\n<p>For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.</p>\n<p>When using topic mapping, an empty prefix can be defined using the place marker “”. Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.</p>\n<pre><code>     Topic    Local_Prefix    Remote_Prefix    Validity\n1    value    value    value    valid\n2    value    value    &quot;&quot;    valid\n3    value    &quot;&quot;    value    valid\n4    value    &quot;&quot;    &quot;&quot;    valid (no remapping)\n5    &quot;&quot;    value    value    valid (remap single local topic to remote)\n6    &quot;&quot;    value    &quot;&quot;    invalid\n7    &quot;&quot;    &quot;&quot;    value    invalid\n8    &quot;&quot;    &quot;&quot;    &quot;&quot;    invalid\n</code></pre><p>To remap an entire topic tree, use e.g.:<br>topic # both 2 local/topic/ remote/topic/<br>This option can be specified multiple times per bridge.</p>\n<p>Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.</p>\n<p>See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.</p>\n<p>Example Bridge Topic Remapping.<br>The configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total</p>\n<p>connection test-mosquitto-org<br>address test.mosquitto.org<br>cleansession true<br>topic clients/total in 0 test/mosquitto/org $SYS/broker/</p>\n</blockquote>\n","excerpt":"<p>下面是mosquitto桥接模式的一些参数简单设置。<br>上次提到其它同事项目中有这个需求，实现的同时顺便记录一下，以备查。<br>","more":"</p>\n<hr>\n<p>bridge桥接配置文件mosquitto.conf内容如下：</p>\n<pre><code>user root\npid_file /var/run/mosquitto.pid\nport 61883\npersistence true\npersistence_location /skydir/sshome/\nconnection LOCAL-SERVER\nremote_clientid MSTARTV_REMOTE\nlocal_clientid MSTARTV_LOCAL\naddress 4.12.12.6:61883\ntopic # both 0 sshome/ sshome/\nbridge_protocol_version mqttv311\n</code></pre><p>##1.connection<br>bridge时用于表示此桥接的别名。<br>格式为:</p>\n<pre><code>connection LOCAL-SERVER\n</code></pre><p>log如:</p>\n<pre><code>1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (4.12.12.6:61883)\n</code></pre><p>##2.remote_clientid<br>用于bridge时local_mqtt_server在remote_mqtt_server上的别名显示。<br>格式为：</p>\n<pre><code>remote_clientid BRIDGE_REMOTE\n</code></pre><p>注意：如果不设置。系统为默认分配一个形如localhost.<strong><em>connection</em></strong>的别名。<br>log如：</p>\n<pre><code>May 18 10:42  mosquitto[23367]: New connection from 18.10.13.7 on port 61883.\nMay 18 10:42 mosquitto[23367]: New client connected from 18.10.13.7 as **&lt;font color=red&gt;localhost.LOCAL-SERVER&lt;/font&gt;** (c0, k60).\nMay 18 10:42 mosquitto[23367]: localhost.LOCAL-SERVER 0 sshome/#\n</code></pre><p>##3.local_clientid<br>同remote_clientid。用于bridge时local_mqtt_server在本地mqtt client的标识。此字符串为local_mqtt_server在本地数据库的别名。但只存在于本地。<br>格式为：</p>\n<pre><code>local_clientid BRIDGE_LOCAL\n</code></pre><p>##4.address<br>bridge的桥接地址和端口。标示远端服务器的IP地址和端口。<br>格式为：</p>\n<pre><code>address 8.8.8.8:61883。\n</code></pre><p>##5.topic<br>bridge时用于桥接local_mqtt_server与remote_mqtt_server时，信息转发用的topic。<br>例如:</p>\n<pre><code>topic # both 0 sshome/ sshome/\n</code></pre><p>##6.案例.实践<br>PC上开一个sub客户端。连接remote_mqtt_server，并订阅某个topic。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_sub.exe -h 4.12.12.6 -p 61883 -i TzWinTester -u user -P user -t sshome/sshome\n\ntest msg. pc-mstartv-server-pc.\nhello,server! what can i do for you?\nhello,server! what can i do for you?\nhey,are you ok、\n</code></pre><p>PC上另开一个pub客户端。连接local_mqtt_server,以向某个topic发送信息。</p>\n<pre><code>C:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hello,server! what can i do for you?&quot;\nC:\\Program Files (x86)\\mosquitto&gt;mosquitto_pub.exe -h 192.168.1.114 -p 61883 -i PCTESTER -t sshome -m &quot;hey,are you ok、&quot;\n</code></pre><p>本地local_mqtt_server运行。</p>\n<pre><code>mosquitto version 1.4 (build date 2015-05-06 14:33:09+0800) starting\n1431916959: Config loaded from sshome.conf.\n1431916959: Opening ipv6 listen socket on port 61883.\n1431916959: Opening ipv4 listen socket on port 61883.\n1431916959: Connecting bridge LOCAL-SERVER (42.121.120.62:61883)\n</code></pre><p>云端remote_mqtt_server运行。</p>\n<pre><code>May 18 12:00:58 mosquitto[23367]: localhost.LOCAL-SERVER 0 **sshome/#**\nMay 18 12:00:58 mosquitto[23367]: New client connected from 180.109.130.79 as localhost.LOCAL-SERVER (c0, k60).\n</code></pre><p>运行过程:</p>\n<blockquote>\n<p>1.启动local_mqtt_server。<br>2.启动remote_mqtt_server。<br>3.运行PC上的sub客户端，根据local_mqtt_server运行时载入的配置文件mosquitto.conf中的bridge参数设定，指定云端remote_mqtt_server IP/port，并订阅相应的topic，如<strong>“sshome/sshome”</strong>。模拟设备连接云端mqtt服务器。<br>4.运行PC上的pub客户端，将信息”hey,are you ok、”发布到loca_mqtt_server上的topic。此topic为bridge配置里设定的topic。如<strong>“sshome”</strong>。模拟设备连接本地mqtt服务器。<br>5.此时，信息”hey,are you ok、”即通过local_mqtt_server与remote_mqtt_server的桥接，从本地设备转发到云端设备上。<br>6.服务器转发的内容如下:</p>\n<pre><code>id    hdr    mid    topic    payload    ctime\n124982 (d0, q0, r0) 0 **sshome/sshome** &quot;hey,are you ok&quot; 2015-05-18 12:05:51\n</code></pre></blockquote>\n<p>注意：sub客户端订阅的topic为<strong>“sshome/sshome”</strong>,而不是mosquitto.conf中的<strong>“sshome/“</strong>。<br>详细说明见<a href=\"http://mosquitto.org/man/mosquitto-conf-5.html\">mosquitto的官方手册</a>。</p>\n<pre><code>topic pattern [[[ out | in | both ] qos-level] local-prefix remote-prefix]\n</code></pre><blockquote>\n<p>Define a topic pattern to be shared between the two brokers. Any topics matching the pattern (which may include wildcards) are shared. The second parameter defines the direction that the messages will be shared in, so it is possible to import messages from a remote broker using in, export messages to a remote broker using out or share messages in both directions. If this parameter is not defined, the default of out is used. The QoS level defines the publish/subscribe QoS level used for this topic and defaults to 0.</p>\n<p>The local-prefix and remote-prefix options allow topics to be remapped when publishing to and receiving from remote brokers. This allows a topic tree from the local broker to be inserted into the topic tree of the remote broker at an appropriate place.</p>\n<p>For incoming topics, the bridge will prepend the pattern with the remote prefix and subscribe to the resulting topic on the remote broker. When a matching incoming message is received, the remote prefix will be removed from the topic and then the local prefix added.</p>\n<p>For outgoing topics, the bridge will prepend the pattern with the local prefix and subscribe to the resulting topic on the local broker. When an outgoing message is processed, the local prefix will be removed from the topic then the remote prefix added.</p>\n<p>When using topic mapping, an empty prefix can be defined using the place marker “”. Using the empty marker for the topic itself is also valid. The table below defines what combination of empty or value is valid.</p>\n<pre><code>     Topic    Local_Prefix    Remote_Prefix    Validity\n1    value    value    value    valid\n2    value    value    &quot;&quot;    valid\n3    value    &quot;&quot;    value    valid\n4    value    &quot;&quot;    &quot;&quot;    valid (no remapping)\n5    &quot;&quot;    value    value    valid (remap single local topic to remote)\n6    &quot;&quot;    value    &quot;&quot;    invalid\n7    &quot;&quot;    &quot;&quot;    value    invalid\n8    &quot;&quot;    &quot;&quot;    &quot;&quot;    invalid\n</code></pre><p>To remap an entire topic tree, use e.g.:<br>topic # both 2 local/topic/ remote/topic/<br>This option can be specified multiple times per bridge.</p>\n<p>Care must be taken to ensure that loops are not created with this option. If you are experiencing high CPU load from a broker, it is possible that you have a loop where each broker is forever forwarding each other the same messages.</p>\n<p>See also the cleansession option if you have messages arriving on unexpected topics when using incoming topics.</p>\n<p>Example Bridge Topic Remapping.<br>The configuration below connects a bridge to the broker at test.mosquitto.org. It subscribes to the remote topic $SYS/broker/clients/total and republishes the messages received to the local topic test/mosquitto/org/clients/total</p>\n<p>connection test-mosquitto-org<br>address test.mosquitto.org<br>cleansession true<br>topic clients/total in 0 test/mosquitto/org $SYS/broker/</p>\n</blockquote>"},{"title":"当了一天的翻译机器","date":"2016-07-15T06:41:38.000Z","_content":"全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。\n","source":"_posts/当了一天的翻译机器.md","raw":"---\ntitle: 当了一天的翻译机器\ndate: 2016-07-15 14:41:38\ncategories:\n - life\ntags: \n - 虾扯\n---\n全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。\n","slug":"当了一天的翻译机器","published":1,"updated":"2016-07-15T06:45:39.593Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9m000c00n94uoa0kis","content":"<p>全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。</p>\n","excerpt":"","more":"<p>全组被抓包人肉翻译TV界面的语言。从英语翻译到世界各地语言，人肉翻译啊啊啊。。。本来给的源文件里的语言都是些chenglish，还得先理解这些内容想表达的是什么意思，再去翻译到对应的语言。真是累身又累心。幸好有Google。</p>\n"},{"title":"推荐款不错的hexo主题","date":"2016-07-15T06:57:21.000Z","_content":"昨天刚重新启用github blog。找了几款主题分别试用了下。\n第一款是[NexT](https://github.com/iissnan/hexo-theme-next)，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。\n另外一款是[Anisina](https://github.com/haojen/hexo-theme-Anisina)，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？\n另外又试了几款，有[Bootstrap](https://github.com/cgmartin/hexo-theme-bootstrap-blog),[jacman](https://github.com/wuchong/jacman)都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。\n最终我还得选用了NexT主题，[作者网站](http://theme-next.iissnan.com/)上有很详细的配置说明以及第三方插件加载方法，挺实用的。\n只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。\n","source":"_posts/推荐款不错的hexo主题.md","raw":"---\ntitle: 推荐款不错的hexo主题\ndate: 2016-07-15 14:57:21\ncategories:\n - life\ntags:\n - hexo\n---\n昨天刚重新启用github blog。找了几款主题分别试用了下。\n第一款是[NexT](https://github.com/iissnan/hexo-theme-next)，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。\n另外一款是[Anisina](https://github.com/haojen/hexo-theme-Anisina)，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？\n另外又试了几款，有[Bootstrap](https://github.com/cgmartin/hexo-theme-bootstrap-blog),[jacman](https://github.com/wuchong/jacman)都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。\n最终我还得选用了NexT主题，[作者网站](http://theme-next.iissnan.com/)上有很详细的配置说明以及第三方插件加载方法，挺实用的。\n只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。\n","slug":"推荐款不错的hexo主题","published":1,"updated":"2016-07-15T09:40:50.101Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9q000h00n9ke1kmlpy","content":"<p>昨天刚重新启用github blog。找了几款主题分别试用了下。<br>第一款是<a href=\"https://github.com/iissnan/hexo-theme-next\" target=\"_blank\" rel=\"external\">NexT</a>，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。<br>另外一款是<a href=\"https://github.com/haojen/hexo-theme-Anisina\" target=\"_blank\" rel=\"external\">Anisina</a>，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？<br>另外又试了几款，有<a href=\"https://github.com/cgmartin/hexo-theme-bootstrap-blog\" target=\"_blank\" rel=\"external\">Bootstrap</a>,<a href=\"https://github.com/wuchong/jacman\" target=\"_blank\" rel=\"external\">jacman</a>都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。<br>最终我还得选用了NexT主题，<a href=\"http://theme-next.iissnan.com/\" target=\"_blank\" rel=\"external\">作者网站</a>上有很详细的配置说明以及第三方插件加载方法，挺实用的。<br>只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。</p>\n","excerpt":"","more":"<p>昨天刚重新启用github blog。找了几款主题分别试用了下。<br>第一款是<a href=\"https://github.com/iissnan/hexo-theme-next\">NexT</a>，是款非常简洁的主题，简洁到只有黑白色。轻量级，在手机和PAD上看了下，加载都很快。<br>另外一款是<a href=\"https://github.com/haojen/hexo-theme-Anisina\">Anisina</a>，同样是款轻量级的主题。不过它比较让我不爽的是要层次分不清。它要求把它自己主题里的配置文件替换掉站点的配置文件，这让我不舒服，难道我下次换回另外一个主题还得想法把配置文件换回去？<br>另外又试了几款，有<a href=\"https://github.com/cgmartin/hexo-theme-bootstrap-blog\">Bootstrap</a>,<a href=\"https://github.com/wuchong/jacman\">jacman</a>都还行，但是其它的都太花哨了，图有点多，对于在移动设备上浏览时来说，太重了。毕竟blog这东西，是要看内容的，不是来看图的，是吧？不要把blog搞成QQ空间了那就扯淡了。<br>最终我还得选用了NexT主题，<a href=\"http://theme-next.iissnan.com/\">作者网站</a>上有很详细的配置说明以及第三方插件加载方法，挺实用的。<br>只是有一点，我还没找到方法，就是默认的POST模板没有categories，我每次文章都得自己手动加，有点烦。</p>\n"},{"title":"学习Docker好榜样","date":"2015-06-24T01:16:51.000Z","_content":"突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。\n[Docker](http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK)是什么?\n![](http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155)\n","source":"_posts/学习Docker好榜样.md","raw":"title: \"学习Docker好榜样\"\ndate: 2015-06-24 09:16:51\ncategories:\n - study\ntags:\n - docker\n---\n突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。\n[Docker](http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK)是什么?\n![](http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155)\n","slug":"学习Docker好榜样","published":1,"updated":"2016-07-14T12:20:06.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9u000j00n99nv8dkjw","content":"<p>突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。<br><a href=\"http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK\" target=\"_blank\" rel=\"external\">Docker</a>是什么?<br><img src=\"http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155\" alt=\"\"></p>\n","excerpt":"","more":"<p>突然对Docker感兴趣了。那好吧，从现在开始，我们就走上学习Docker好榜样的道路吧。<br><a href=\"http://baike.baidu.com/link?url=dbWokWq0hlM5_1xr94x2KVWl5vj6ay0ntye5XkIfOOK7gscQA4Dnjwlm4JAfKuvgtwqVFiDSd4oL6VeXKTYAeK\">Docker</a>是什么?<br><img src=\"http://img.zdnet.com.cn/3/280/liDe8COmy32O6.png?rand=155\" alt=\"\"></p>\n"},{"title":"继续mqtt","date":"2015-05-15T02:31:13.000Z","_content":"&emsp;手头上正在做有关智能家居的项目。项目基于[mqtt](http://mqtt.org/)协议开发，使用开源项目[mosquitto](http://mosquitto.org/)为主体搭建。\n&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。\n&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。\n&emsp;go go go...\n","source":"_posts/继续mqtt.md","raw":"title: \"继续mqtt\"\ndate: 2015-05-15 10:31:13\ncategories:\n - work\ntags:\n - mqtt\n - mosquitto\n---\n&emsp;手头上正在做有关智能家居的项目。项目基于[mqtt](http://mqtt.org/)协议开发，使用开源项目[mosquitto](http://mosquitto.org/)为主体搭建。\n&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。\n&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。\n&emsp;go go go...\n","slug":"继续mqtt","published":1,"updated":"2016-07-14T12:19:55.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhut9y000n00n9zxb2s4y5","content":"<p>&emsp;手头上正在做有关智能家居的项目。项目基于<a href=\"http://mqtt.org/\" target=\"_blank\" rel=\"external\">mqtt</a>协议开发，使用开源项目<a href=\"http://mosquitto.org/\" target=\"_blank\" rel=\"external\">mosquitto</a>为主体搭建。<br>&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。<br>&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。<br>&emsp;go go go…</p>\n","excerpt":"","more":"<p>&emsp;手头上正在做有关智能家居的项目。项目基于<a href=\"http://mqtt.org/\">mqtt</a>协议开发，使用开源项目<a href=\"http://mosquitto.org/\">mosquitto</a>为主体搭建。<br>&emsp;过程中有很多心得以及走过的坑，都记录在为知笔记上了。想一下子转到这边来，还有点麻烦，就算了。以后的填坑心得都记录于此吧。毕竟准备以此为工作技术blog的。<br>&emsp;昨天其它的同事提的需求是：本地mqtt server与云端mqtt server桥接，使app端与家庭设备端能在lan和wan范围内都能正常通信。这就涉及到mosquitto中的bridge部分了。这部分早先简单看了一下，但是不是太明白，现在已基本忘了，得重新捡拾起来review并实现需求。<br>&emsp;go go go…</p>\n"},{"title":"都快忘了这个blog了","date":"2016-07-14T05:23:09.000Z","_content":"\n因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？\n","source":"_posts/都快忘了这个blog了.md","raw":"---\ntitle: 都快忘了这个blog了\ndate: 2016-07-14 13:23:09\ncategories:\n - life\ntags:\n - 虾扯\n---\n\n因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？\n","slug":"都快忘了这个blog了","published":1,"updated":"2016-07-14T12:19:30.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhutby001h00n9kc6ld9yb","content":"<p>因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？</p>\n","excerpt":"","more":"<p>因为文件丢失，都快忘了hexo架的git pages的blog了。忽然从某个备份文件里找到一个残缺的备份文件，拉出来试一下。看看是不是要更新一下。好像hexo已经更新到V3.2了，我这还能继续兼容吗？</p>\n"},{"title":"重启github blog","date":"2016-07-14T05:44:20.000Z","_content":"折腾了一上午，赶紧记录下来。\n\n---\n\n打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：\n\n1. 安装[NodeJS](https://nodejs.org/en/)。\n2. 安装Git。我在windows上用的是[MinGW32](http://www.mingw.org/)。\n3. 在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。\n```\nnpm install\nnpm install hexo-deployer-git --save\n```\n4. 然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）\n```\nhexo clean\nhexo new \"title\"\nhexo generate (hexo ge)\nhexo deploy (hexo de)\n```\n5. 发布前可以先本地浏览器预览一下。地址为http://localhost:4000 \n```\nhexo server (hexo se)\n```\n\nPS:有一个很重要的地方要注意，`_config.yml`文件中的deploy地址很模糊，有的文章说是要填`https://github.com/XXX/XXX.github.io.git`，有的文章又说要填`git@github.com:xxxxx/xxxxx.github.io.git`这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/cgoder/cgoder.github.io\n  branch: master\n```\n","source":"_posts/重启github-blog.md","raw":"---\ntitle: 重启github blog\ndate: 2016-07-14 13:44:20\ncategories:\n - life\ntags:\n - 虾扯\n---\n折腾了一上午，赶紧记录下来。\n\n---\n\n打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：\n\n1. 安装[NodeJS](https://nodejs.org/en/)。\n2. 安装Git。我在windows上用的是[MinGW32](http://www.mingw.org/)。\n3. 在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。\n```\nnpm install\nnpm install hexo-deployer-git --save\n```\n4. 然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）\n```\nhexo clean\nhexo new \"title\"\nhexo generate (hexo ge)\nhexo deploy (hexo de)\n```\n5. 发布前可以先本地浏览器预览一下。地址为http://localhost:4000 \n```\nhexo server (hexo se)\n```\n\nPS:有一个很重要的地方要注意，`_config.yml`文件中的deploy地址很模糊，有的文章说是要填`https://github.com/XXX/XXX.github.io.git`，有的文章又说要填`git@github.com:xxxxx/xxxxx.github.io.git`这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）\n```\n# Deployment\n## Docs: https://hexo.io/docs/deployment.html\ndeploy:\n  type: git\n  repository: https://github.com/cgoder/cgoder.github.io\n  branch: master\n```\n","slug":"重启github-blog","published":1,"updated":"2016-07-14T12:20:31.912Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciquhutby001j00n9x7jlw4qj","content":"<p>折腾了一上午，赶紧记录下来。</p>\n<hr>\n<p>打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：</p>\n<ol>\n<li>安装<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"external\">NodeJS</a>。</li>\n<li>安装Git。我在windows上用的是<a href=\"http://www.mingw.org/\" target=\"_blank\" rel=\"external\">MinGW32</a>。</li>\n<li><p>在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo new &quot;title&quot;</div><div class=\"line\">hexo generate (hexo ge)</div><div class=\"line\">hexo deploy (hexo de)</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布前可以先本地浏览器预览一下。地址为<a href=\"http://localhost:4000\" target=\"_blank\" rel=\"external\">http://localhost:4000</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server (hexo se)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS:有一个很重要的地方要注意，<code>_config.yml</code>文件中的deploy地址很模糊，有的文章说是要填<code>https://github.com/XXX/XXX.github.io.git</code>，有的文章又说要填<code>git@github.com:xxxxx/xxxxx.github.io.git</code>这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/cgoder/cgoder.github.io</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<p>折腾了一上午，赶紧记录下来。</p>\n<hr>\n<p>打开备份的文件夹，里面存储了原来的部署。换电脑或者重新开始部署时，以下几步是需要的：</p>\n<ol>\n<li>安装<a href=\"https://nodejs.org/en/\">NodeJS</a>。</li>\n<li>安装Git。我在windows上用的是<a href=\"http://www.mingw.org/\">MinGW32</a>。</li>\n<li><p>在文件夹中打开MinGW32窗口，安装npm以及deploye git插件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">npm install</div><div class=\"line\">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>\n</li>\n<li><p>然后就是正常的写文章，部署了。（最好先把之前的.deploy_git目录删除）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo clean</div><div class=\"line\">hexo new &quot;title&quot;</div><div class=\"line\">hexo generate (hexo ge)</div><div class=\"line\">hexo deploy (hexo de)</div></pre></td></tr></table></figure>\n</li>\n<li><p>发布前可以先本地浏览器预览一下。地址为<a href=\"http://localhost:4000\">http://localhost:4000</a> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">hexo server (hexo se)</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>PS:有一个很重要的地方要注意，<code>_config.yml</code>文件中的deploy地址很模糊，有的文章说是要填<code>https://github.com/XXX/XXX.github.io.git</code>，有的文章又说要填<code>git@github.com:xxxxx/xxxxx.github.io.git</code>这样的地址，搞不懂为什么。不过我是填的前者。（难道hexo V3之后改了？）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"># Deployment</div><div class=\"line\">## Docs: https://hexo.io/docs/deployment.html</div><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  repository: https://github.com/cgoder/cgoder.github.io</div><div class=\"line\">  branch: master</div></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ciquhut9a000600n9vtchmqjw","category_id":"ciquhut96000400n9sm75hppm","_id":"ciquhut9m000b00n9xd0fevoh"},{"post_id":"ciquhut8m000100n96b71c0f8","category_id":"ciquhut96000400n9sm75hppm","_id":"ciquhut9q000f00n970pkpdbj"},{"post_id":"ciquhut90000200n9kdl93s9b","category_id":"ciquhut9a000900n9245f0wp1","_id":"ciquhut9u000k00n949bmny91"},{"post_id":"ciquhut9m000c00n94uoa0kis","category_id":"ciquhut9a000900n9245f0wp1","_id":"ciquhut9y000o00n9klqoz819"},{"post_id":"ciquhut9q000h00n9ke1kmlpy","category_id":"ciquhut9a000900n9245f0wp1","_id":"ciquhut9y000q00n9p94qtef7"},{"post_id":"ciquhut96000500n9r1f7ssdy","category_id":"ciquhut96000400n9sm75hppm","_id":"ciquhuta6000t00n9w9r05086"},{"post_id":"ciquhut9u000j00n99nv8dkjw","category_id":"ciquhut96000400n9sm75hppm","_id":"ciquhuta6000v00n96beqs7ps"},{"post_id":"ciquhut9y000n00n9zxb2s4y5","category_id":"ciquhut9u000l00n99mwger5i","_id":"ciquhuta6000x00n9628j30gs"},{"post_id":"ciquhut9a000800n9lf53s8ey","category_id":"ciquhut9u000l00n99mwger5i","_id":"ciquhuta6000z00n9yae6cars"},{"post_id":"ciquhut9e000a00n9li7xr7r3","category_id":"ciquhut9u000l00n99mwger5i","_id":"ciquhutaa001100n9bvo1hbtx"},{"post_id":"ciquhutby001h00n9kc6ld9yb","category_id":"ciquhut9a000900n9245f0wp1","_id":"ciquhutcd001n00n9vyp10jgu"},{"post_id":"ciquhutby001j00n9x7jlw4qj","category_id":"ciquhut9a000900n9245f0wp1","_id":"ciquhutcd001o00n94kse2035"}],"PostTag":[{"post_id":"ciquhut8m000100n96b71c0f8","tag_id":"ciquhut93000300n988z09mo2","_id":"ciquhut9q000g00n9ch17gsaz"},{"post_id":"ciquhut8m000100n96b71c0f8","tag_id":"ciquhut9a000700n9rj52d7te","_id":"ciquhut9u000i00n9nhivlcn1"},{"post_id":"ciquhut90000200n9kdl93s9b","tag_id":"ciquhut9m000d00n9tmqddzom","_id":"ciquhut9y000p00n93otmjtrc"},{"post_id":"ciquhut96000500n9r1f7ssdy","tag_id":"ciquhut9u000m00n9dr5awzpj","_id":"ciquhuta6000u00n91eglnam6"},{"post_id":"ciquhut9a000600n9vtchmqjw","tag_id":"ciquhut9u000m00n9dr5awzpj","_id":"ciquhuta6000y00n9kii8ardz"},{"post_id":"ciquhut9a000800n9lf53s8ey","tag_id":"ciquhuta6000w00n9eh38hgqd","_id":"ciquhutab001300n96rhz8pdo"},{"post_id":"ciquhut9a000800n9lf53s8ey","tag_id":"ciquhuta6001000n9gayv70ni","_id":"ciquhutab001400n914ttjujm"},{"post_id":"ciquhut9e000a00n9li7xr7r3","tag_id":"ciquhutab001200n91tbak56t","_id":"ciquhutab001600n9m46xtxd0"},{"post_id":"ciquhut9m000c00n94uoa0kis","tag_id":"ciquhut9m000d00n9tmqddzom","_id":"ciquhutab001800n94ijpygzs"},{"post_id":"ciquhut9q000h00n9ke1kmlpy","tag_id":"ciquhutab001700n9a6w0qouf","_id":"ciquhutab001a00n9g0g15jyr"},{"post_id":"ciquhut9u000j00n99nv8dkjw","tag_id":"ciquhutab001900n9nez15ffv","_id":"ciquhutab001c00n9anew3f3t"},{"post_id":"ciquhut9y000n00n9zxb2s4y5","tag_id":"ciquhutab001b00n9wzwcxjjb","_id":"ciquhutab001e00n9ythvf1ko"},{"post_id":"ciquhut9y000n00n9zxb2s4y5","tag_id":"ciquhutab001200n91tbak56t","_id":"ciquhutab001f00n97tsqmlne"},{"post_id":"ciquhutby001h00n9kc6ld9yb","tag_id":"ciquhut9m000d00n9tmqddzom","_id":"ciquhutcd001k00n9bb4mjj3e"},{"post_id":"ciquhutby001j00n9x7jlw4qj","tag_id":"ciquhut9m000d00n9tmqddzom","_id":"ciquhutcd001m00n93l7i30q5"}],"Tag":[{"name":"golang","_id":"ciquhut93000300n988z09mo2"},{"name":"Docker","_id":"ciquhut9a000700n9rj52d7te"},{"name":"虾扯","_id":"ciquhut9m000d00n9tmqddzom"},{"name":"Markdown","_id":"ciquhut9u000m00n9dr5awzpj"},{"name":"realtek","_id":"ciquhuta6000w00n9eh38hgqd"},{"name":"linux","_id":"ciquhuta6001000n9gayv70ni"},{"name":"mosquitto","_id":"ciquhutab001200n91tbak56t"},{"name":"hexo","_id":"ciquhutab001700n9a6w0qouf"},{"name":"docker","_id":"ciquhutab001900n9nez15ffv"},{"name":"mqtt","_id":"ciquhutab001b00n9wzwcxjjb"}]}}